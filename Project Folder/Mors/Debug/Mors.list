
Mors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f04  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  0800908c  0800908c  0001908c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009264  08009264  0002021c  2**0
                  CONTENTS
  4 .ARM          00000008  08009264  08009264  00019264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800926c  0800926c  0002021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800926c  0800926c  0001926c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009270  08009270  00019270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000021c  20000000  08009274  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002021c  2**0
                  CONTENTS
 10 .bss          00001ddc  2000021c  2000021c  0002021c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001ff8  20001ff8  0002021c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001aab6  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b8e  00000000  00000000  0003ad02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001768  00000000  00000000  0003e890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015d8  00000000  00000000  0003fff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025499  00000000  00000000  000415d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d8e2  00000000  00000000  00066a69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2d87  00000000  00000000  0008434b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001570d2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000639c  00000000  00000000  00157124  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000021c 	.word	0x2000021c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009074 	.word	0x08009074

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000220 	.word	0x20000220
 80001c4:	08009074 	.word	0x08009074

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay(int unit)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b085      	sub	sp, #20
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
	for(int x=0x3*unit*0xFDEAF;x!=0;x--){}
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	4a09      	ldr	r2, [pc, #36]	; (8000520 <delay+0x30>)
 80004fc:	fb02 f303 	mul.w	r3, r2, r3
 8000500:	60fb      	str	r3, [r7, #12]
 8000502:	e002      	b.n	800050a <delay+0x1a>
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	3b01      	subs	r3, #1
 8000508:	60fb      	str	r3, [r7, #12]
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d1f9      	bne.n	8000504 <delay+0x14>
}
 8000510:	bf00      	nop
 8000512:	bf00      	nop
 8000514:	3714      	adds	r7, #20
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	002f9c0d 	.word	0x002f9c0d

08000524 <decoder>:
void decoder()
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
	if(coded[0]!='\0')
 800052a:	4b13      	ldr	r3, [pc, #76]	; (8000578 <decoder+0x54>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d003      	beq.n	800053a <decoder+0x16>
		strcpy(coded_save,coded);
 8000532:	4911      	ldr	r1, [pc, #68]	; (8000578 <decoder+0x54>)
 8000534:	4811      	ldr	r0, [pc, #68]	; (800057c <decoder+0x58>)
 8000536:	f008 fd95 	bl	8009064 <strcpy>
	for(int i=0;i<36;i++)
 800053a:	2300      	movs	r3, #0
 800053c:	607b      	str	r3, [r7, #4]
 800053e:	e013      	b.n	8000568 <decoder+0x44>
	{
		if(!strcmp(coded,morscode[i]))
 8000540:	4a0f      	ldr	r2, [pc, #60]	; (8000580 <decoder+0x5c>)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000548:	4619      	mov	r1, r3
 800054a:	480b      	ldr	r0, [pc, #44]	; (8000578 <decoder+0x54>)
 800054c:	f7ff fe3c 	bl	80001c8 <strcmp>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d105      	bne.n	8000562 <decoder+0x3e>
		{
			decoded[0]=symbols[i];
 8000556:	4a0b      	ldr	r2, [pc, #44]	; (8000584 <decoder+0x60>)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800055e:	4a0a      	ldr	r2, [pc, #40]	; (8000588 <decoder+0x64>)
 8000560:	6013      	str	r3, [r2, #0]
	for(int i=0;i<36;i++)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	3301      	adds	r3, #1
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	2b23      	cmp	r3, #35	; 0x23
 800056c:	dde8      	ble.n	8000540 <decoder+0x1c>
		}
	}
}
 800056e:	bf00      	nop
 8000570:	bf00      	nop
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	200003bc 	.word	0x200003bc
 800057c:	200003c4 	.word	0x200003c4
 8000580:	20000000 	.word	0x20000000
 8000584:	20000090 	.word	0x20000090
 8000588:	200003cc 	.word	0x200003cc

0800058c <mors>:
void mors(uint32_t timer)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	if(250 < timer && timer < 700)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2bfa      	cmp	r3, #250	; 0xfa
 8000598:	d91a      	bls.n	80005d0 <mors+0x44>
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80005a0:	d216      	bcs.n	80005d0 <mors+0x44>
	{
		HAL_GPIO_WritePin(GPIOD, LD6_Pin,1);
 80005a2:	2201      	movs	r2, #1
 80005a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005a8:	4818      	ldr	r0, [pc, #96]	; (800060c <mors+0x80>)
 80005aa:	f001 f981 	bl	80018b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, LD5_Pin,0);
 80005ae:	2200      	movs	r2, #0
 80005b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005b4:	4815      	ldr	r0, [pc, #84]	; (800060c <mors+0x80>)
 80005b6:	f001 f97b 	bl	80018b0 <HAL_GPIO_WritePin>
		coded[press]=dot;
 80005ba:	4b15      	ldr	r3, [pc, #84]	; (8000610 <mors+0x84>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a15      	ldr	r2, [pc, #84]	; (8000614 <mors+0x88>)
 80005c0:	212e      	movs	r1, #46	; 0x2e
 80005c2:	54d1      	strb	r1, [r2, r3]
		press++;
 80005c4:	4b12      	ldr	r3, [pc, #72]	; (8000610 <mors+0x84>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	3301      	adds	r3, #1
 80005ca:	4a11      	ldr	r2, [pc, #68]	; (8000610 <mors+0x84>)
 80005cc:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOD, LD6_Pin,0);
		HAL_GPIO_WritePin(GPIOD, LD5_Pin,1);
		coded[press]=dash;
		press++;
	}
}
 80005ce:	e019      	b.n	8000604 <mors+0x78>
	else if(699 < timer)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80005d6:	d315      	bcc.n	8000604 <mors+0x78>
		HAL_GPIO_WritePin(GPIOD, LD6_Pin,0);
 80005d8:	2200      	movs	r2, #0
 80005da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005de:	480b      	ldr	r0, [pc, #44]	; (800060c <mors+0x80>)
 80005e0:	f001 f966 	bl	80018b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, LD5_Pin,1);
 80005e4:	2201      	movs	r2, #1
 80005e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005ea:	4808      	ldr	r0, [pc, #32]	; (800060c <mors+0x80>)
 80005ec:	f001 f960 	bl	80018b0 <HAL_GPIO_WritePin>
		coded[press]=dash;
 80005f0:	4b07      	ldr	r3, [pc, #28]	; (8000610 <mors+0x84>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a07      	ldr	r2, [pc, #28]	; (8000614 <mors+0x88>)
 80005f6:	215f      	movs	r1, #95	; 0x5f
 80005f8:	54d1      	strb	r1, [r2, r3]
		press++;
 80005fa:	4b05      	ldr	r3, [pc, #20]	; (8000610 <mors+0x84>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	3301      	adds	r3, #1
 8000600:	4a03      	ldr	r2, [pc, #12]	; (8000610 <mors+0x84>)
 8000602:	6013      	str	r3, [r2, #0]
}
 8000604:	bf00      	nop
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40020c00 	.word	0x40020c00
 8000610:	200003d4 	.word	0x200003d4
 8000614:	200003bc 	.word	0x200003bc

08000618 <mors_blink>:
void mors_blink()
{
 8000618:	b590      	push	{r4, r7, lr}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
	if((done||press==5)&&start)
 800061e:	4b3d      	ldr	r3, [pc, #244]	; (8000714 <mors_blink+0xfc>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d103      	bne.n	800062e <mors_blink+0x16>
 8000626:	4b3c      	ldr	r3, [pc, #240]	; (8000718 <mors_blink+0x100>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2b05      	cmp	r3, #5
 800062c:	d16b      	bne.n	8000706 <mors_blink+0xee>
 800062e:	4b3b      	ldr	r3, [pc, #236]	; (800071c <mors_blink+0x104>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d067      	beq.n	8000706 <mors_blink+0xee>
	{
		CDC_Transmit_FS((uint8_t*)*decoded, strlen(*decoded));
 8000636:	4b3a      	ldr	r3, [pc, #232]	; (8000720 <mors_blink+0x108>)
 8000638:	681c      	ldr	r4, [r3, #0]
 800063a:	4b39      	ldr	r3, [pc, #228]	; (8000720 <mors_blink+0x108>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff fdcc 	bl	80001dc <strlen>
 8000644:	4603      	mov	r3, r0
 8000646:	b29b      	uxth	r3, r3
 8000648:	4619      	mov	r1, r3
 800064a:	4620      	mov	r0, r4
 800064c:	f008 f874 	bl	8008738 <CDC_Transmit_FS>
		for(int i=0;i<5;i++)
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	e007      	b.n	8000666 <mors_blink+0x4e>
			coded[i]='\0';
 8000656:	4a33      	ldr	r2, [pc, #204]	; (8000724 <mors_blink+0x10c>)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4413      	add	r3, r2
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<5;i++)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	3301      	adds	r3, #1
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2b04      	cmp	r3, #4
 800066a:	ddf4      	ble.n	8000656 <mors_blink+0x3e>
		HAL_GPIO_WritePin(GPIOD, LD5_Pin,0);
 800066c:	2200      	movs	r2, #0
 800066e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000672:	482d      	ldr	r0, [pc, #180]	; (8000728 <mors_blink+0x110>)
 8000674:	f001 f91c 	bl	80018b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, LD6_Pin,0);
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800067e:	482a      	ldr	r0, [pc, #168]	; (8000728 <mors_blink+0x110>)
 8000680:	f001 f916 	bl	80018b0 <HAL_GPIO_WritePin>
		for(int i=0;coded_save[i]!='\0';i++)
 8000684:	2300      	movs	r3, #0
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	e031      	b.n	80006ee <mors_blink+0xd6>
		{
			switch(coded_save[i])
 800068a:	4a28      	ldr	r2, [pc, #160]	; (800072c <mors_blink+0x114>)
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	4413      	add	r3, r2
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b2e      	cmp	r3, #46	; 0x2e
 8000694:	d002      	beq.n	800069c <mors_blink+0x84>
 8000696:	2b5f      	cmp	r3, #95	; 0x5f
 8000698:	d013      	beq.n	80006c2 <mors_blink+0xaa>
						  delay(0x3);
					      HAL_GPIO_WritePin(GPIOD, LD3_Pin, 0);
						  delay(0x3);
						  break;
			  	 default:
			  	  		 break;
 800069a:	e025      	b.n	80006e8 <mors_blink+0xd0>
		  	  			HAL_GPIO_WritePin(GPIOD, LD3_Pin, 1);
 800069c:	2201      	movs	r2, #1
 800069e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006a2:	4821      	ldr	r0, [pc, #132]	; (8000728 <mors_blink+0x110>)
 80006a4:	f001 f904 	bl	80018b0 <HAL_GPIO_WritePin>
		  	  			delay(0x1);
 80006a8:	2001      	movs	r0, #1
 80006aa:	f7ff ff21 	bl	80004f0 <delay>
			  	  		HAL_GPIO_WritePin(GPIOD, LD3_Pin, 0);
 80006ae:	2200      	movs	r2, #0
 80006b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b4:	481c      	ldr	r0, [pc, #112]	; (8000728 <mors_blink+0x110>)
 80006b6:	f001 f8fb 	bl	80018b0 <HAL_GPIO_WritePin>
			  	  		delay(0x1);
 80006ba:	2001      	movs	r0, #1
 80006bc:	f7ff ff18 	bl	80004f0 <delay>
			  	  		break;
 80006c0:	e012      	b.n	80006e8 <mors_blink+0xd0>
						  HAL_GPIO_WritePin(GPIOD, LD3_Pin, 1);
 80006c2:	2201      	movs	r2, #1
 80006c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006c8:	4817      	ldr	r0, [pc, #92]	; (8000728 <mors_blink+0x110>)
 80006ca:	f001 f8f1 	bl	80018b0 <HAL_GPIO_WritePin>
						  delay(0x3);
 80006ce:	2003      	movs	r0, #3
 80006d0:	f7ff ff0e 	bl	80004f0 <delay>
					      HAL_GPIO_WritePin(GPIOD, LD3_Pin, 0);
 80006d4:	2200      	movs	r2, #0
 80006d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006da:	4813      	ldr	r0, [pc, #76]	; (8000728 <mors_blink+0x110>)
 80006dc:	f001 f8e8 	bl	80018b0 <HAL_GPIO_WritePin>
						  delay(0x3);
 80006e0:	2003      	movs	r0, #3
 80006e2:	f7ff ff05 	bl	80004f0 <delay>
						  break;
 80006e6:	bf00      	nop
		for(int i=0;coded_save[i]!='\0';i++)
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	3301      	adds	r3, #1
 80006ec:	603b      	str	r3, [r7, #0]
 80006ee:	4a0f      	ldr	r2, [pc, #60]	; (800072c <mors_blink+0x114>)
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	4413      	add	r3, r2
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d1c7      	bne.n	800068a <mors_blink+0x72>
			}
		}
		delay(0x1);
 80006fa:	2001      	movs	r0, #1
 80006fc:	f7ff fef8 	bl	80004f0 <delay>
		press=0;
 8000700:	4b05      	ldr	r3, [pc, #20]	; (8000718 <mors_blink+0x100>)
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
	}
	done=0;
 8000706:	4b03      	ldr	r3, [pc, #12]	; (8000714 <mors_blink+0xfc>)
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
}
 800070c:	bf00      	nop
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	bd90      	pop	{r4, r7, pc}
 8000714:	200003dc 	.word	0x200003dc
 8000718:	200003d4 	.word	0x200003d4
 800071c:	200003e0 	.word	0x200003e0
 8000720:	200003cc 	.word	0x200003cc
 8000724:	200003bc 	.word	0x200003bc
 8000728:	40020c00 	.word	0x40020c00
 800072c:	200003c4 	.word	0x200003c4

08000730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	press=0;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <main+0x38>)
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073a:	f000 fd2b 	bl	8001194 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073e:	f000 f817 	bl	8000770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000742:	f000 f97f 	bl	8000a44 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000746:	f000 f87d 	bl	8000844 <MX_I2C1_Init>
  MX_I2S3_Init();
 800074a:	f000 f8a9 	bl	80008a0 <MX_I2S3_Init>
  MX_SPI1_Init();
 800074e:	f000 f8d7 	bl	8000900 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000752:	f007 ff2b 	bl	80085ac <MX_USB_DEVICE_Init>
  MX_TIM6_Init();
 8000756:	f000 f909 	bl	800096c <MX_TIM6_Init>
  MX_TIM7_Init();
 800075a:	f000 f93d 	bl	80009d8 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim7);
 800075e:	4803      	ldr	r0, [pc, #12]	; (800076c <main+0x3c>)
 8000760:	f003 ffd6 	bl	8004710 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000764:	e7fe      	b.n	8000764 <main+0x34>
 8000766:	bf00      	nop
 8000768:	200003d4 	.word	0x200003d4
 800076c:	20000374 	.word	0x20000374

08000770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b094      	sub	sp, #80	; 0x50
 8000774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000776:	f107 0320 	add.w	r3, r7, #32
 800077a:	2230      	movs	r2, #48	; 0x30
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f008 fc68 	bl	8009054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000794:	2300      	movs	r3, #0
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	4b28      	ldr	r3, [pc, #160]	; (800083c <SystemClock_Config+0xcc>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079c:	4a27      	ldr	r2, [pc, #156]	; (800083c <SystemClock_Config+0xcc>)
 800079e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a2:	6413      	str	r3, [r2, #64]	; 0x40
 80007a4:	4b25      	ldr	r3, [pc, #148]	; (800083c <SystemClock_Config+0xcc>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b0:	2300      	movs	r3, #0
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	4b22      	ldr	r3, [pc, #136]	; (8000840 <SystemClock_Config+0xd0>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a21      	ldr	r2, [pc, #132]	; (8000840 <SystemClock_Config+0xd0>)
 80007ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007be:	6013      	str	r3, [r2, #0]
 80007c0:	4b1f      	ldr	r3, [pc, #124]	; (8000840 <SystemClock_Config+0xd0>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007cc:	2301      	movs	r3, #1
 80007ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d6:	2302      	movs	r3, #2
 80007d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007e0:	2308      	movs	r3, #8
 80007e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007e4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ea:	2302      	movs	r3, #2
 80007ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007ee:	2307      	movs	r3, #7
 80007f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f2:	f107 0320 	add.w	r3, r7, #32
 80007f6:	4618      	mov	r0, r3
 80007f8:	f003 f8ee 	bl	80039d8 <HAL_RCC_OscConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000802:	f000 fac3 	bl	8000d8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000806:	230f      	movs	r3, #15
 8000808:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080a:	2302      	movs	r3, #2
 800080c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000812:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000816:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000818:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800081c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800081e:	f107 030c 	add.w	r3, r7, #12
 8000822:	2105      	movs	r1, #5
 8000824:	4618      	mov	r0, r3
 8000826:	f003 fb4f 	bl	8003ec8 <HAL_RCC_ClockConfig>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000830:	f000 faac 	bl	8000d8c <Error_Handler>
  }
}
 8000834:	bf00      	nop
 8000836:	3750      	adds	r7, #80	; 0x50
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40023800 	.word	0x40023800
 8000840:	40007000 	.word	0x40007000

08000844 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000848:	4b12      	ldr	r3, [pc, #72]	; (8000894 <MX_I2C1_Init+0x50>)
 800084a:	4a13      	ldr	r2, [pc, #76]	; (8000898 <MX_I2C1_Init+0x54>)
 800084c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <MX_I2C1_Init+0x50>)
 8000850:	4a12      	ldr	r2, [pc, #72]	; (800089c <MX_I2C1_Init+0x58>)
 8000852:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000854:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <MX_I2C1_Init+0x50>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <MX_I2C1_Init+0x50>)
 800085c:	2200      	movs	r2, #0
 800085e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <MX_I2C1_Init+0x50>)
 8000862:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000866:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000868:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <MX_I2C1_Init+0x50>)
 800086a:	2200      	movs	r2, #0
 800086c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <MX_I2C1_Init+0x50>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000874:	4b07      	ldr	r3, [pc, #28]	; (8000894 <MX_I2C1_Init+0x50>)
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <MX_I2C1_Init+0x50>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000880:	4804      	ldr	r0, [pc, #16]	; (8000894 <MX_I2C1_Init+0x50>)
 8000882:	f001 f847 	bl	8001914 <HAL_I2C_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800088c:	f000 fa7e 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000238 	.word	0x20000238
 8000898:	40005400 	.word	0x40005400
 800089c:	000186a0 	.word	0x000186a0

080008a0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80008a4:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <MX_I2S3_Init+0x54>)
 80008a6:	4a14      	ldr	r2, [pc, #80]	; (80008f8 <MX_I2S3_Init+0x58>)
 80008a8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80008aa:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <MX_I2S3_Init+0x54>)
 80008ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008b0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80008b2:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <MX_I2S3_Init+0x54>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008b8:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <MX_I2S3_Init+0x54>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <MX_I2S3_Init+0x54>)
 80008c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008c4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <MX_I2S3_Init+0x54>)
 80008c8:	4a0c      	ldr	r2, [pc, #48]	; (80008fc <MX_I2S3_Init+0x5c>)
 80008ca:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008cc:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_I2S3_Init+0x54>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <MX_I2S3_Init+0x54>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MX_I2S3_Init+0x54>)
 80008da:	2200      	movs	r2, #0
 80008dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008de:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_I2S3_Init+0x54>)
 80008e0:	f001 f95c 	bl	8001b9c <HAL_I2S_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80008ea:	f000 fa4f 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	2000028c 	.word	0x2000028c
 80008f8:	40003c00 	.word	0x40003c00
 80008fc:	00017700 	.word	0x00017700

08000900 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000904:	4b17      	ldr	r3, [pc, #92]	; (8000964 <MX_SPI1_Init+0x64>)
 8000906:	4a18      	ldr	r2, [pc, #96]	; (8000968 <MX_SPI1_Init+0x68>)
 8000908:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800090a:	4b16      	ldr	r3, [pc, #88]	; (8000964 <MX_SPI1_Init+0x64>)
 800090c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000910:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000912:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_SPI1_Init+0x64>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <MX_SPI1_Init+0x64>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_SPI1_Init+0x64>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <MX_SPI1_Init+0x64>)
 8000926:	2200      	movs	r2, #0
 8000928:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_SPI1_Init+0x64>)
 800092c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000930:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_SPI1_Init+0x64>)
 8000934:	2200      	movs	r2, #0
 8000936:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000938:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <MX_SPI1_Init+0x64>)
 800093a:	2200      	movs	r2, #0
 800093c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_SPI1_Init+0x64>)
 8000940:	2200      	movs	r2, #0
 8000942:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <MX_SPI1_Init+0x64>)
 8000946:	2200      	movs	r2, #0
 8000948:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_SPI1_Init+0x64>)
 800094c:	220a      	movs	r2, #10
 800094e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <MX_SPI1_Init+0x64>)
 8000952:	f003 fe05 	bl	8004560 <HAL_SPI_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800095c:	f000 fa16 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	200002d4 	.word	0x200002d4
 8000968:	40013000 	.word	0x40013000

0800096c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000972:	463b      	mov	r3, r7
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800097a:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <MX_TIM6_Init+0x64>)
 800097c:	4a15      	ldr	r2, [pc, #84]	; (80009d4 <MX_TIM6_Init+0x68>)
 800097e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 48000;
 8000980:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <MX_TIM6_Init+0x64>)
 8000982:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000986:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000988:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_TIM6_Init+0x64>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 650;
 800098e:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <MX_TIM6_Init+0x64>)
 8000990:	f240 228a 	movw	r2, #650	; 0x28a
 8000994:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_TIM6_Init+0x64>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800099c:	480c      	ldr	r0, [pc, #48]	; (80009d0 <MX_TIM6_Init+0x64>)
 800099e:	f003 fe68 	bl	8004672 <HAL_TIM_Base_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80009a8:	f000 f9f0 	bl	8000d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ac:	2300      	movs	r3, #0
 80009ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b0:	2300      	movs	r3, #0
 80009b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80009b4:	463b      	mov	r3, r7
 80009b6:	4619      	mov	r1, r3
 80009b8:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_TIM6_Init+0x64>)
 80009ba:	f004 f951 	bl	8004c60 <HAL_TIMEx_MasterConfigSynchronization>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80009c4:	f000 f9e2 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80009c8:	bf00      	nop
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	2000032c 	.word	0x2000032c
 80009d4:	40001000 	.word	0x40001000

080009d8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009de:	463b      	mov	r3, r7
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80009e6:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <MX_TIM7_Init+0x64>)
 80009e8:	4a15      	ldr	r2, [pc, #84]	; (8000a40 <MX_TIM7_Init+0x68>)
 80009ea:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 47999;
 80009ec:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <MX_TIM7_Init+0x64>)
 80009ee:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 80009f2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f4:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <MX_TIM7_Init+0x64>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 17500;
 80009fa:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <MX_TIM7_Init+0x64>)
 80009fc:	f244 425c 	movw	r2, #17500	; 0x445c
 8000a00:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <MX_TIM7_Init+0x64>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000a08:	480c      	ldr	r0, [pc, #48]	; (8000a3c <MX_TIM7_Init+0x64>)
 8000a0a:	f003 fe32 	bl	8004672 <HAL_TIM_Base_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000a14:	f000 f9ba 	bl	8000d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000a20:	463b      	mov	r3, r7
 8000a22:	4619      	mov	r1, r3
 8000a24:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_TIM7_Init+0x64>)
 8000a26:	f004 f91b 	bl	8004c60 <HAL_TIMEx_MasterConfigSynchronization>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000a30:	f000 f9ac 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000a34:	bf00      	nop
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20000374 	.word	0x20000374
 8000a40:	40001400 	.word	0x40001400

08000a44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08c      	sub	sp, #48	; 0x30
 8000a48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
 8000a58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61bb      	str	r3, [r7, #24]
 8000a5e:	4b7a      	ldr	r3, [pc, #488]	; (8000c48 <MX_GPIO_Init+0x204>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a79      	ldr	r2, [pc, #484]	; (8000c48 <MX_GPIO_Init+0x204>)
 8000a64:	f043 0310 	orr.w	r3, r3, #16
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b77      	ldr	r3, [pc, #476]	; (8000c48 <MX_GPIO_Init+0x204>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0310 	and.w	r3, r3, #16
 8000a72:	61bb      	str	r3, [r7, #24]
 8000a74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	617b      	str	r3, [r7, #20]
 8000a7a:	4b73      	ldr	r3, [pc, #460]	; (8000c48 <MX_GPIO_Init+0x204>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a72      	ldr	r2, [pc, #456]	; (8000c48 <MX_GPIO_Init+0x204>)
 8000a80:	f043 0304 	orr.w	r3, r3, #4
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b70      	ldr	r3, [pc, #448]	; (8000c48 <MX_GPIO_Init+0x204>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0304 	and.w	r3, r3, #4
 8000a8e:	617b      	str	r3, [r7, #20]
 8000a90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	613b      	str	r3, [r7, #16]
 8000a96:	4b6c      	ldr	r3, [pc, #432]	; (8000c48 <MX_GPIO_Init+0x204>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a6b      	ldr	r2, [pc, #428]	; (8000c48 <MX_GPIO_Init+0x204>)
 8000a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b69      	ldr	r3, [pc, #420]	; (8000c48 <MX_GPIO_Init+0x204>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	4b65      	ldr	r3, [pc, #404]	; (8000c48 <MX_GPIO_Init+0x204>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a64      	ldr	r2, [pc, #400]	; (8000c48 <MX_GPIO_Init+0x204>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b62      	ldr	r3, [pc, #392]	; (8000c48 <MX_GPIO_Init+0x204>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	4b5e      	ldr	r3, [pc, #376]	; (8000c48 <MX_GPIO_Init+0x204>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a5d      	ldr	r2, [pc, #372]	; (8000c48 <MX_GPIO_Init+0x204>)
 8000ad4:	f043 0302 	orr.w	r3, r3, #2
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b5b      	ldr	r3, [pc, #364]	; (8000c48 <MX_GPIO_Init+0x204>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0302 	and.w	r3, r3, #2
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	4b57      	ldr	r3, [pc, #348]	; (8000c48 <MX_GPIO_Init+0x204>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a56      	ldr	r2, [pc, #344]	; (8000c48 <MX_GPIO_Init+0x204>)
 8000af0:	f043 0308 	orr.w	r3, r3, #8
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b54      	ldr	r3, [pc, #336]	; (8000c48 <MX_GPIO_Init+0x204>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0308 	and.w	r3, r3, #8
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2108      	movs	r1, #8
 8000b06:	4851      	ldr	r0, [pc, #324]	; (8000c4c <MX_GPIO_Init+0x208>)
 8000b08:	f000 fed2 	bl	80018b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	2101      	movs	r1, #1
 8000b10:	484f      	ldr	r0, [pc, #316]	; (8000c50 <MX_GPIO_Init+0x20c>)
 8000b12:	f000 fecd 	bl	80018b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b16:	2200      	movs	r2, #0
 8000b18:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000b1c:	484d      	ldr	r0, [pc, #308]	; (8000c54 <MX_GPIO_Init+0x210>)
 8000b1e:	f000 fec7 	bl	80018b0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000b22:	2308      	movs	r3, #8
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b26:	2301      	movs	r3, #1
 8000b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000b32:	f107 031c 	add.w	r3, r7, #28
 8000b36:	4619      	mov	r1, r3
 8000b38:	4844      	ldr	r0, [pc, #272]	; (8000c4c <MX_GPIO_Init+0x208>)
 8000b3a:	f000 fd05 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b42:	2301      	movs	r3, #1
 8000b44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b4e:	f107 031c 	add.w	r3, r7, #28
 8000b52:	4619      	mov	r1, r3
 8000b54:	483e      	ldr	r0, [pc, #248]	; (8000c50 <MX_GPIO_Init+0x20c>)
 8000b56:	f000 fcf7 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000b5a:	2308      	movs	r3, #8
 8000b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b6a:	2305      	movs	r3, #5
 8000b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b6e:	f107 031c 	add.w	r3, r7, #28
 8000b72:	4619      	mov	r1, r3
 8000b74:	4836      	ldr	r0, [pc, #216]	; (8000c50 <MX_GPIO_Init+0x20c>)
 8000b76:	f000 fce7 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b7e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000b82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b88:	f107 031c 	add.w	r3, r7, #28
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4832      	ldr	r0, [pc, #200]	; (8000c58 <MX_GPIO_Init+0x214>)
 8000b90:	f000 fcda 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000b94:	2304      	movs	r3, #4
 8000b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000ba0:	f107 031c 	add.w	r3, r7, #28
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	482d      	ldr	r0, [pc, #180]	; (8000c5c <MX_GPIO_Init+0x218>)
 8000ba8:	f000 fcce 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000bac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bbe:	2305      	movs	r3, #5
 8000bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000bc2:	f107 031c 	add.w	r3, r7, #28
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4824      	ldr	r0, [pc, #144]	; (8000c5c <MX_GPIO_Init+0x218>)
 8000bca:	f000 fcbd 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000bce:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000bd2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000be0:	f107 031c 	add.w	r3, r7, #28
 8000be4:	4619      	mov	r1, r3
 8000be6:	481b      	ldr	r0, [pc, #108]	; (8000c54 <MX_GPIO_Init+0x210>)
 8000be8:	f000 fcae 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pin : letterdone_Pin */
  GPIO_InitStruct.Pin = letterdone_Pin;
 8000bec:	2302      	movs	r3, #2
 8000bee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000bf0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000bf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(letterdone_GPIO_Port, &GPIO_InitStruct);
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4814      	ldr	r0, [pc, #80]	; (8000c54 <MX_GPIO_Init+0x210>)
 8000c02:	f000 fca1 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000c06:	2320      	movs	r3, #32
 8000c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c12:	f107 031c 	add.w	r3, r7, #28
 8000c16:	4619      	mov	r1, r3
 8000c18:	480e      	ldr	r0, [pc, #56]	; (8000c54 <MX_GPIO_Init+0x210>)
 8000c1a:	f000 fc95 	bl	8001548 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2100      	movs	r1, #0
 8000c22:	2006      	movs	r0, #6
 8000c24:	f000 fc4b 	bl	80014be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c28:	2006      	movs	r0, #6
 8000c2a:	f000 fc64 	bl	80014f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2100      	movs	r1, #0
 8000c32:	2007      	movs	r0, #7
 8000c34:	f000 fc43 	bl	80014be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000c38:	2007      	movs	r0, #7
 8000c3a:	f000 fc5c 	bl	80014f6 <HAL_NVIC_EnableIRQ>

}
 8000c3e:	bf00      	nop
 8000c40:	3730      	adds	r7, #48	; 0x30
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	40020800 	.word	0x40020800
 8000c54:	40020c00 	.word	0x40020c00
 8000c58:	40020000 	.word	0x40020000
 8000c5c:	40020400 	.word	0x40020400

08000c60 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start_IT(&htim6);
 8000c6a:	4834      	ldr	r0, [pc, #208]	; (8000d3c <HAL_GPIO_EXTI_Callback+0xdc>)
 8000c6c:	f003 fdb8 	bl	80047e0 <HAL_TIM_Base_Start_IT>
	if(GPIO_Pin==B1_Pin)
 8000c70:	88fb      	ldrh	r3, [r7, #6]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d14c      	bne.n	8000d10 <HAL_GPIO_EXTI_Callback+0xb0>
	{
		start=1;
 8000c76:	4b32      	ldr	r3, [pc, #200]	; (8000d40 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, LD5_Pin,0);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c82:	4830      	ldr	r0, [pc, #192]	; (8000d44 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000c84:	f000 fe14 	bl	80018b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, LD6_Pin,0);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c8e:	482d      	ldr	r0, [pc, #180]	; (8000d44 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000c90:	f000 fe0e 	bl	80018b0 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOA, B1_Pin))
 8000c94:	2101      	movs	r1, #1
 8000c96:	482c      	ldr	r0, [pc, #176]	; (8000d48 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000c98:	f000 fdf2 	bl	8001880 <HAL_GPIO_ReadPin>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d015      	beq.n	8000cce <HAL_GPIO_EXTI_Callback+0x6e>
		{//rising edge
			HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000ca2:	2006      	movs	r0, #6
 8000ca4:	f000 fc35 	bl	8001512 <HAL_NVIC_DisableIRQ>
			done=0;
 8000ca8:	4b28      	ldr	r3, [pc, #160]	; (8000d4c <HAL_GPIO_EXTI_Callback+0xec>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
			bounce=1;
 8000cae:	4b28      	ldr	r3, [pc, #160]	; (8000d50 <HAL_GPIO_EXTI_Callback+0xf0>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	601a      	str	r2, [r3, #0]
			TIM7->CNT=0;
 8000cb4:	4b27      	ldr	r3, [pc, #156]	; (8000d54 <HAL_GPIO_EXTI_Callback+0xf4>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	625a      	str	r2, [r3, #36]	; 0x24
			TIM6->CNT=0;
 8000cba:	4b27      	ldr	r3, [pc, #156]	; (8000d58 <HAL_GPIO_EXTI_Callback+0xf8>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_GPIO_WritePin(GPIOD, LD4_Pin,1);
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cc6:	481f      	ldr	r0, [pc, #124]	; (8000d44 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000cc8:	f000 fdf2 	bl	80018b0 <HAL_GPIO_WritePin>
 8000ccc:	e020      	b.n	8000d10 <HAL_GPIO_EXTI_Callback+0xb0>
		}
		else
		{//falling edge
			HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000cce:	2006      	movs	r0, #6
 8000cd0:	f000 fc1f 	bl	8001512 <HAL_NVIC_DisableIRQ>
			bounce=1;
 8000cd4:	4b1e      	ldr	r3, [pc, #120]	; (8000d50 <HAL_GPIO_EXTI_Callback+0xf0>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	601a      	str	r2, [r3, #0]
			press_time=TIM7->CNT;
 8000cda:	4b1e      	ldr	r3, [pc, #120]	; (8000d54 <HAL_GPIO_EXTI_Callback+0xf4>)
 8000cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cde:	4a1f      	ldr	r2, [pc, #124]	; (8000d5c <HAL_GPIO_EXTI_Callback+0xfc>)
 8000ce0:	6013      	str	r3, [r2, #0]
	        HAL_GPIO_WritePin(GPIOD, LD4_Pin,0);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ce8:	4816      	ldr	r0, [pc, #88]	; (8000d44 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000cea:	f000 fde1 	bl	80018b0 <HAL_GPIO_WritePin>
	        if(press<5)
 8000cee:	4b1c      	ldr	r3, [pc, #112]	; (8000d60 <HAL_GPIO_EXTI_Callback+0x100>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2b04      	cmp	r3, #4
 8000cf4:	dc05      	bgt.n	8000d02 <HAL_GPIO_EXTI_Callback+0xa2>
	        	mors(press_time);
 8000cf6:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <HAL_GPIO_EXTI_Callback+0xfc>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fc46 	bl	800058c <mors>
 8000d00:	e001      	b.n	8000d06 <HAL_GPIO_EXTI_Callback+0xa6>
	        else
	        	mors_blink();
 8000d02:	f7ff fc89 	bl	8000618 <mors_blink>
	        decoder();
 8000d06:	f7ff fc0d 	bl	8000524 <decoder>
			TIM7->CNT=0;
 8000d0a:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <HAL_GPIO_EXTI_Callback+0xf4>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}
	if(GPIO_Pin==letterdone_Pin)
 8000d10:	88fb      	ldrh	r3, [r7, #6]
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d10d      	bne.n	8000d32 <HAL_GPIO_EXTI_Callback+0xd2>
	{
		if(!(HAL_GPIO_ReadPin(GPIOD, letterdone_Pin)));
 8000d16:	2102      	movs	r1, #2
 8000d18:	480a      	ldr	r0, [pc, #40]	; (8000d44 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000d1a:	f000 fdb1 	bl	8001880 <HAL_GPIO_ReadPin>
		{
			done=1;
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <HAL_GPIO_EXTI_Callback+0xec>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	601a      	str	r2, [r3, #0]
			decoder();
 8000d24:	f7ff fbfe 	bl	8000524 <decoder>
			mors_blink();
 8000d28:	f7ff fc76 	bl	8000618 <mors_blink>
			start=0;
 8000d2c:	4b04      	ldr	r3, [pc, #16]	; (8000d40 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	2000032c 	.word	0x2000032c
 8000d40:	200003e0 	.word	0x200003e0
 8000d44:	40020c00 	.word	0x40020c00
 8000d48:	40020000 	.word	0x40020000
 8000d4c:	200003dc 	.word	0x200003dc
 8000d50:	200003d8 	.word	0x200003d8
 8000d54:	40001400 	.word	0x40001400
 8000d58:	40001000 	.word	0x40001000
 8000d5c:	200003d0 	.word	0x200003d0
 8000d60:	200003d4 	.word	0x200003d4

08000d64 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
	if (bounce)
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d005      	beq.n	8000d80 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000d74:	2006      	movs	r0, #6
 8000d76:	f000 fbbe 	bl	80014f6 <HAL_NVIC_EnableIRQ>
		bounce=0;
 8000d7a:	4b03      	ldr	r3, [pc, #12]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
	}
}
 8000d80:	bf00      	nop
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	200003d8 	.word	0x200003d8

08000d8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d90:	b672      	cpsid	i
}
 8000d92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <Error_Handler+0x8>
	...

08000d98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <HAL_MspInit+0x4c>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	4a0f      	ldr	r2, [pc, #60]	; (8000de4 <HAL_MspInit+0x4c>)
 8000da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dac:	6453      	str	r3, [r2, #68]	; 0x44
 8000dae:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <HAL_MspInit+0x4c>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	603b      	str	r3, [r7, #0]
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <HAL_MspInit+0x4c>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	4a08      	ldr	r2, [pc, #32]	; (8000de4 <HAL_MspInit+0x4c>)
 8000dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_MspInit+0x4c>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd2:	603b      	str	r3, [r7, #0]
 8000dd4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000dd6:	2007      	movs	r0, #7
 8000dd8:	f000 fb66 	bl	80014a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40023800 	.word	0x40023800

08000de8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08a      	sub	sp, #40	; 0x28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a19      	ldr	r2, [pc, #100]	; (8000e6c <HAL_I2C_MspInit+0x84>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d12c      	bne.n	8000e64 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <HAL_I2C_MspInit+0x88>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	4a17      	ldr	r2, [pc, #92]	; (8000e70 <HAL_I2C_MspInit+0x88>)
 8000e14:	f043 0302 	orr.w	r3, r3, #2
 8000e18:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1a:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <HAL_I2C_MspInit+0x88>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000e26:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000e2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e2c:	2312      	movs	r3, #18
 8000e2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e30:	2301      	movs	r3, #1
 8000e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e34:	2300      	movs	r3, #0
 8000e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e38:	2304      	movs	r3, #4
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	4619      	mov	r1, r3
 8000e42:	480c      	ldr	r0, [pc, #48]	; (8000e74 <HAL_I2C_MspInit+0x8c>)
 8000e44:	f000 fb80 	bl	8001548 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <HAL_I2C_MspInit+0x88>)
 8000e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e50:	4a07      	ldr	r2, [pc, #28]	; (8000e70 <HAL_I2C_MspInit+0x88>)
 8000e52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e56:	6413      	str	r3, [r2, #64]	; 0x40
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <HAL_I2C_MspInit+0x88>)
 8000e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e64:	bf00      	nop
 8000e66:	3728      	adds	r7, #40	; 0x28
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40005400 	.word	0x40005400
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40020400 	.word	0x40020400

08000e78 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08e      	sub	sp, #56	; 0x38
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a31      	ldr	r2, [pc, #196]	; (8000f68 <HAL_I2S_MspInit+0xf0>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d15a      	bne.n	8000f5e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000eac:	23c0      	movs	r3, #192	; 0xc0
 8000eae:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f003 fa11 	bl	80042e0 <HAL_RCCEx_PeriphCLKConfig>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000ec4:	f7ff ff62 	bl	8000d8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ec8:	2300      	movs	r3, #0
 8000eca:	613b      	str	r3, [r7, #16]
 8000ecc:	4b27      	ldr	r3, [pc, #156]	; (8000f6c <HAL_I2S_MspInit+0xf4>)
 8000ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed0:	4a26      	ldr	r2, [pc, #152]	; (8000f6c <HAL_I2S_MspInit+0xf4>)
 8000ed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ed6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed8:	4b24      	ldr	r3, [pc, #144]	; (8000f6c <HAL_I2S_MspInit+0xf4>)
 8000eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000edc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ee0:	613b      	str	r3, [r7, #16]
 8000ee2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	4b20      	ldr	r3, [pc, #128]	; (8000f6c <HAL_I2S_MspInit+0xf4>)
 8000eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eec:	4a1f      	ldr	r2, [pc, #124]	; (8000f6c <HAL_I2S_MspInit+0xf4>)
 8000eee:	f043 0301 	orr.w	r3, r3, #1
 8000ef2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef4:	4b1d      	ldr	r3, [pc, #116]	; (8000f6c <HAL_I2S_MspInit+0xf4>)
 8000ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f00:	2300      	movs	r3, #0
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	4b19      	ldr	r3, [pc, #100]	; (8000f6c <HAL_I2S_MspInit+0xf4>)
 8000f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f08:	4a18      	ldr	r2, [pc, #96]	; (8000f6c <HAL_I2S_MspInit+0xf4>)
 8000f0a:	f043 0304 	orr.w	r3, r3, #4
 8000f0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f10:	4b16      	ldr	r3, [pc, #88]	; (8000f6c <HAL_I2S_MspInit+0xf4>)
 8000f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f14:	f003 0304 	and.w	r3, r3, #4
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000f1c:	2310      	movs	r3, #16
 8000f1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f2c:	2306      	movs	r3, #6
 8000f2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000f30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f34:	4619      	mov	r1, r3
 8000f36:	480e      	ldr	r0, [pc, #56]	; (8000f70 <HAL_I2S_MspInit+0xf8>)
 8000f38:	f000 fb06 	bl	8001548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000f3c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f4e:	2306      	movs	r3, #6
 8000f50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f56:	4619      	mov	r1, r3
 8000f58:	4806      	ldr	r0, [pc, #24]	; (8000f74 <HAL_I2S_MspInit+0xfc>)
 8000f5a:	f000 faf5 	bl	8001548 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000f5e:	bf00      	nop
 8000f60:	3738      	adds	r7, #56	; 0x38
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40003c00 	.word	0x40003c00
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40020000 	.word	0x40020000
 8000f74:	40020800 	.word	0x40020800

08000f78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	; 0x28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a19      	ldr	r2, [pc, #100]	; (8000ffc <HAL_SPI_MspInit+0x84>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d12b      	bne.n	8000ff2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	4b18      	ldr	r3, [pc, #96]	; (8001000 <HAL_SPI_MspInit+0x88>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa2:	4a17      	ldr	r2, [pc, #92]	; (8001000 <HAL_SPI_MspInit+0x88>)
 8000fa4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8000faa:	4b15      	ldr	r3, [pc, #84]	; (8001000 <HAL_SPI_MspInit+0x88>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	4b11      	ldr	r3, [pc, #68]	; (8001000 <HAL_SPI_MspInit+0x88>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a10      	ldr	r2, [pc, #64]	; (8001000 <HAL_SPI_MspInit+0x88>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <HAL_SPI_MspInit+0x88>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000fd2:	23e0      	movs	r3, #224	; 0xe0
 8000fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fe2:	2305      	movs	r3, #5
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe6:	f107 0314 	add.w	r3, r7, #20
 8000fea:	4619      	mov	r1, r3
 8000fec:	4805      	ldr	r0, [pc, #20]	; (8001004 <HAL_SPI_MspInit+0x8c>)
 8000fee:	f000 faab 	bl	8001548 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ff2:	bf00      	nop
 8000ff4:	3728      	adds	r7, #40	; 0x28
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40013000 	.word	0x40013000
 8001000:	40023800 	.word	0x40023800
 8001004:	40020000 	.word	0x40020000

08001008 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a18      	ldr	r2, [pc, #96]	; (8001078 <HAL_TIM_Base_MspInit+0x70>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d116      	bne.n	8001048 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	4b17      	ldr	r3, [pc, #92]	; (800107c <HAL_TIM_Base_MspInit+0x74>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001022:	4a16      	ldr	r2, [pc, #88]	; (800107c <HAL_TIM_Base_MspInit+0x74>)
 8001024:	f043 0310 	orr.w	r3, r3, #16
 8001028:	6413      	str	r3, [r2, #64]	; 0x40
 800102a:	4b14      	ldr	r3, [pc, #80]	; (800107c <HAL_TIM_Base_MspInit+0x74>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102e:	f003 0310 	and.w	r3, r3, #16
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001036:	2200      	movs	r2, #0
 8001038:	2100      	movs	r1, #0
 800103a:	2036      	movs	r0, #54	; 0x36
 800103c:	f000 fa3f 	bl	80014be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001040:	2036      	movs	r0, #54	; 0x36
 8001042:	f000 fa58 	bl	80014f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001046:	e012      	b.n	800106e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0c      	ldr	r2, [pc, #48]	; (8001080 <HAL_TIM_Base_MspInit+0x78>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d10d      	bne.n	800106e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	4b09      	ldr	r3, [pc, #36]	; (800107c <HAL_TIM_Base_MspInit+0x74>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	4a08      	ldr	r2, [pc, #32]	; (800107c <HAL_TIM_Base_MspInit+0x74>)
 800105c:	f043 0320 	orr.w	r3, r3, #32
 8001060:	6413      	str	r3, [r2, #64]	; 0x40
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_TIM_Base_MspInit+0x74>)
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	f003 0320 	and.w	r3, r3, #32
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	68bb      	ldr	r3, [r7, #8]
}
 800106e:	bf00      	nop
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40001000 	.word	0x40001000
 800107c:	40023800 	.word	0x40023800
 8001080:	40001400 	.word	0x40001400

08001084 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001088:	e7fe      	b.n	8001088 <NMI_Handler+0x4>

0800108a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800108e:	e7fe      	b.n	800108e <HardFault_Handler+0x4>

08001090 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001094:	e7fe      	b.n	8001094 <MemManage_Handler+0x4>

08001096 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800109a:	e7fe      	b.n	800109a <BusFault_Handler+0x4>

0800109c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <UsageFault_Handler+0x4>

080010a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010d0:	f000 f8b2 	bl	8001238 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80010dc:	2001      	movs	r0, #1
 80010de:	f000 fc01 	bl	80018e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(letterdone_Pin);
 80010ea:	2002      	movs	r0, #2
 80010ec:	f000 fbfa 	bl	80018e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80010f8:	4802      	ldr	r0, [pc, #8]	; (8001104 <TIM6_DAC_IRQHandler+0x10>)
 80010fa:	f003 fbe1 	bl	80048c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	2000032c 	.word	0x2000032c

08001108 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800110c:	4802      	ldr	r0, [pc, #8]	; (8001118 <OTG_FS_IRQHandler+0x10>)
 800110e:	f001 fb35 	bl	800277c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200018cc 	.word	0x200018cc

0800111c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <SystemInit+0x20>)
 8001122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001126:	4a05      	ldr	r2, [pc, #20]	; (800113c <SystemInit+0x20>)
 8001128:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800112c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001140:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001178 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001144:	480d      	ldr	r0, [pc, #52]	; (800117c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001146:	490e      	ldr	r1, [pc, #56]	; (8001180 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001148:	4a0e      	ldr	r2, [pc, #56]	; (8001184 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800114a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800114c:	e002      	b.n	8001154 <LoopCopyDataInit>

0800114e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800114e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001150:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001152:	3304      	adds	r3, #4

08001154 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001154:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001156:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001158:	d3f9      	bcc.n	800114e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800115a:	4a0b      	ldr	r2, [pc, #44]	; (8001188 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800115c:	4c0b      	ldr	r4, [pc, #44]	; (800118c <LoopFillZerobss+0x26>)
  movs r3, #0
 800115e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001160:	e001      	b.n	8001166 <LoopFillZerobss>

08001162 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001162:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001164:	3204      	adds	r2, #4

08001166 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001166:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001168:	d3fb      	bcc.n	8001162 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800116a:	f7ff ffd7 	bl	800111c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800116e:	f007 ff4d 	bl	800900c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001172:	f7ff fadd 	bl	8000730 <main>
  bx  lr    
 8001176:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001178:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800117c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001180:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 8001184:	08009274 	.word	0x08009274
  ldr r2, =_sbss
 8001188:	2000021c 	.word	0x2000021c
  ldr r4, =_ebss
 800118c:	20001ff8 	.word	0x20001ff8

08001190 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001190:	e7fe      	b.n	8001190 <ADC_IRQHandler>
	...

08001194 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001198:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <HAL_Init+0x40>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a0d      	ldr	r2, [pc, #52]	; (80011d4 <HAL_Init+0x40>)
 800119e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011a4:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <HAL_Init+0x40>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a0a      	ldr	r2, [pc, #40]	; (80011d4 <HAL_Init+0x40>)
 80011aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011b0:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <HAL_Init+0x40>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a07      	ldr	r2, [pc, #28]	; (80011d4 <HAL_Init+0x40>)
 80011b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011bc:	2003      	movs	r0, #3
 80011be:	f000 f973 	bl	80014a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011c2:	2000      	movs	r0, #0
 80011c4:	f000 f808 	bl	80011d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011c8:	f7ff fde6 	bl	8000d98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40023c00 	.word	0x40023c00

080011d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <HAL_InitTick+0x54>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <HAL_InitTick+0x58>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	4619      	mov	r1, r3
 80011ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80011f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 f999 	bl	800152e <HAL_SYSTICK_Config>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e00e      	b.n	8001224 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b0f      	cmp	r3, #15
 800120a:	d80a      	bhi.n	8001222 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800120c:	2200      	movs	r2, #0
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	f04f 30ff 	mov.w	r0, #4294967295
 8001214:	f000 f953 	bl	80014be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001218:	4a06      	ldr	r2, [pc, #24]	; (8001234 <HAL_InitTick+0x5c>)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800121e:	2300      	movs	r3, #0
 8001220:	e000      	b.n	8001224 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
}
 8001224:	4618      	mov	r0, r3
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000120 	.word	0x20000120
 8001230:	20000128 	.word	0x20000128
 8001234:	20000124 	.word	0x20000124

08001238 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <HAL_IncTick+0x20>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	461a      	mov	r2, r3
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <HAL_IncTick+0x24>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4413      	add	r3, r2
 8001248:	4a04      	ldr	r2, [pc, #16]	; (800125c <HAL_IncTick+0x24>)
 800124a:	6013      	str	r3, [r2, #0]
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	20000128 	.word	0x20000128
 800125c:	200003e4 	.word	0x200003e4

08001260 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return uwTick;
 8001264:	4b03      	ldr	r3, [pc, #12]	; (8001274 <HAL_GetTick+0x14>)
 8001266:	681b      	ldr	r3, [r3, #0]
}
 8001268:	4618      	mov	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	200003e4 	.word	0x200003e4

08001278 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001280:	f7ff ffee 	bl	8001260 <HAL_GetTick>
 8001284:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001290:	d005      	beq.n	800129e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001292:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <HAL_Delay+0x44>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	461a      	mov	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4413      	add	r3, r2
 800129c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800129e:	bf00      	nop
 80012a0:	f7ff ffde 	bl	8001260 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d8f7      	bhi.n	80012a0 <HAL_Delay+0x28>
  {
  }
}
 80012b0:	bf00      	nop
 80012b2:	bf00      	nop
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000128 	.word	0x20000128

080012c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <__NVIC_SetPriorityGrouping+0x44>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012dc:	4013      	ands	r3, r2
 80012de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012f2:	4a04      	ldr	r2, [pc, #16]	; (8001304 <__NVIC_SetPriorityGrouping+0x44>)
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	60d3      	str	r3, [r2, #12]
}
 80012f8:	bf00      	nop
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <__NVIC_GetPriorityGrouping+0x18>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	0a1b      	lsrs	r3, r3, #8
 8001312:	f003 0307 	and.w	r3, r3, #7
}
 8001316:	4618      	mov	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	2b00      	cmp	r3, #0
 8001334:	db0b      	blt.n	800134e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	f003 021f 	and.w	r2, r3, #31
 800133c:	4907      	ldr	r1, [pc, #28]	; (800135c <__NVIC_EnableIRQ+0x38>)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	095b      	lsrs	r3, r3, #5
 8001344:	2001      	movs	r0, #1
 8001346:	fa00 f202 	lsl.w	r2, r0, r2
 800134a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	e000e100 	.word	0xe000e100

08001360 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	2b00      	cmp	r3, #0
 8001370:	db12      	blt.n	8001398 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	f003 021f 	and.w	r2, r3, #31
 8001378:	490a      	ldr	r1, [pc, #40]	; (80013a4 <__NVIC_DisableIRQ+0x44>)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	095b      	lsrs	r3, r3, #5
 8001380:	2001      	movs	r0, #1
 8001382:	fa00 f202 	lsl.w	r2, r0, r2
 8001386:	3320      	adds	r3, #32
 8001388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800138c:	f3bf 8f4f 	dsb	sy
}
 8001390:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001392:	f3bf 8f6f 	isb	sy
}
 8001396:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	e000e100 	.word	0xe000e100

080013a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	6039      	str	r1, [r7, #0]
 80013b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	db0a      	blt.n	80013d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	490c      	ldr	r1, [pc, #48]	; (80013f4 <__NVIC_SetPriority+0x4c>)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	0112      	lsls	r2, r2, #4
 80013c8:	b2d2      	uxtb	r2, r2
 80013ca:	440b      	add	r3, r1
 80013cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d0:	e00a      	b.n	80013e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	4908      	ldr	r1, [pc, #32]	; (80013f8 <__NVIC_SetPriority+0x50>)
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	f003 030f 	and.w	r3, r3, #15
 80013de:	3b04      	subs	r3, #4
 80013e0:	0112      	lsls	r2, r2, #4
 80013e2:	b2d2      	uxtb	r2, r2
 80013e4:	440b      	add	r3, r1
 80013e6:	761a      	strb	r2, [r3, #24]
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	e000e100 	.word	0xe000e100
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b089      	sub	sp, #36	; 0x24
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f1c3 0307 	rsb	r3, r3, #7
 8001416:	2b04      	cmp	r3, #4
 8001418:	bf28      	it	cs
 800141a:	2304      	movcs	r3, #4
 800141c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3304      	adds	r3, #4
 8001422:	2b06      	cmp	r3, #6
 8001424:	d902      	bls.n	800142c <NVIC_EncodePriority+0x30>
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3b03      	subs	r3, #3
 800142a:	e000      	b.n	800142e <NVIC_EncodePriority+0x32>
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001430:	f04f 32ff 	mov.w	r2, #4294967295
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43da      	mvns	r2, r3
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	401a      	ands	r2, r3
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001444:	f04f 31ff 	mov.w	r1, #4294967295
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	fa01 f303 	lsl.w	r3, r1, r3
 800144e:	43d9      	mvns	r1, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001454:	4313      	orrs	r3, r2
         );
}
 8001456:	4618      	mov	r0, r3
 8001458:	3724      	adds	r7, #36	; 0x24
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
	...

08001464 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3b01      	subs	r3, #1
 8001470:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001474:	d301      	bcc.n	800147a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001476:	2301      	movs	r3, #1
 8001478:	e00f      	b.n	800149a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800147a:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <SysTick_Config+0x40>)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3b01      	subs	r3, #1
 8001480:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001482:	210f      	movs	r1, #15
 8001484:	f04f 30ff 	mov.w	r0, #4294967295
 8001488:	f7ff ff8e 	bl	80013a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <SysTick_Config+0x40>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001492:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <SysTick_Config+0x40>)
 8001494:	2207      	movs	r2, #7
 8001496:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	e000e010 	.word	0xe000e010

080014a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff ff05 	bl	80012c0 <__NVIC_SetPriorityGrouping>
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014be:	b580      	push	{r7, lr}
 80014c0:	b086      	sub	sp, #24
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	4603      	mov	r3, r0
 80014c6:	60b9      	str	r1, [r7, #8]
 80014c8:	607a      	str	r2, [r7, #4]
 80014ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014d0:	f7ff ff1a 	bl	8001308 <__NVIC_GetPriorityGrouping>
 80014d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	68b9      	ldr	r1, [r7, #8]
 80014da:	6978      	ldr	r0, [r7, #20]
 80014dc:	f7ff ff8e 	bl	80013fc <NVIC_EncodePriority>
 80014e0:	4602      	mov	r2, r0
 80014e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e6:	4611      	mov	r1, r2
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff5d 	bl	80013a8 <__NVIC_SetPriority>
}
 80014ee:	bf00      	nop
 80014f0:	3718      	adds	r7, #24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	4603      	mov	r3, r0
 80014fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ff0d 	bl	8001324 <__NVIC_EnableIRQ>
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
 8001518:	4603      	mov	r3, r0
 800151a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800151c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff ff1d 	bl	8001360 <__NVIC_DisableIRQ>
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff ff94 	bl	8001464 <SysTick_Config>
 800153c:	4603      	mov	r3, r0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001548:	b480      	push	{r7}
 800154a:	b089      	sub	sp, #36	; 0x24
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001556:	2300      	movs	r3, #0
 8001558:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800155a:	2300      	movs	r3, #0
 800155c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
 8001562:	e16b      	b.n	800183c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001564:	2201      	movs	r2, #1
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	4013      	ands	r3, r2
 8001576:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	429a      	cmp	r2, r3
 800157e:	f040 815a 	bne.w	8001836 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f003 0303 	and.w	r3, r3, #3
 800158a:	2b01      	cmp	r3, #1
 800158c:	d005      	beq.n	800159a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001596:	2b02      	cmp	r3, #2
 8001598:	d130      	bne.n	80015fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	2203      	movs	r2, #3
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43db      	mvns	r3, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4013      	ands	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	68da      	ldr	r2, [r3, #12]
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015d0:	2201      	movs	r2, #1
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	43db      	mvns	r3, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4013      	ands	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	091b      	lsrs	r3, r3, #4
 80015e6:	f003 0201 	and.w	r2, r3, #1
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f003 0303 	and.w	r3, r3, #3
 8001604:	2b03      	cmp	r3, #3
 8001606:	d017      	beq.n	8001638 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	2203      	movs	r2, #3
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	689a      	ldr	r2, [r3, #8]
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 0303 	and.w	r3, r3, #3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d123      	bne.n	800168c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	08da      	lsrs	r2, r3, #3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3208      	adds	r2, #8
 800164c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001650:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	f003 0307 	and.w	r3, r3, #7
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	220f      	movs	r2, #15
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	43db      	mvns	r3, r3
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4013      	ands	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	691a      	ldr	r2, [r3, #16]
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	4313      	orrs	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	08da      	lsrs	r2, r3, #3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	3208      	adds	r2, #8
 8001686:	69b9      	ldr	r1, [r7, #24]
 8001688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	2203      	movs	r2, #3
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4013      	ands	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 0203 	and.w	r2, r3, #3
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	f000 80b4 	beq.w	8001836 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	4b60      	ldr	r3, [pc, #384]	; (8001854 <HAL_GPIO_Init+0x30c>)
 80016d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d6:	4a5f      	ldr	r2, [pc, #380]	; (8001854 <HAL_GPIO_Init+0x30c>)
 80016d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016dc:	6453      	str	r3, [r2, #68]	; 0x44
 80016de:	4b5d      	ldr	r3, [pc, #372]	; (8001854 <HAL_GPIO_Init+0x30c>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016ea:	4a5b      	ldr	r2, [pc, #364]	; (8001858 <HAL_GPIO_Init+0x310>)
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	089b      	lsrs	r3, r3, #2
 80016f0:	3302      	adds	r3, #2
 80016f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f003 0303 	and.w	r3, r3, #3
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	220f      	movs	r2, #15
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	43db      	mvns	r3, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4013      	ands	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a52      	ldr	r2, [pc, #328]	; (800185c <HAL_GPIO_Init+0x314>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d02b      	beq.n	800176e <HAL_GPIO_Init+0x226>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a51      	ldr	r2, [pc, #324]	; (8001860 <HAL_GPIO_Init+0x318>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d025      	beq.n	800176a <HAL_GPIO_Init+0x222>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a50      	ldr	r2, [pc, #320]	; (8001864 <HAL_GPIO_Init+0x31c>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d01f      	beq.n	8001766 <HAL_GPIO_Init+0x21e>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a4f      	ldr	r2, [pc, #316]	; (8001868 <HAL_GPIO_Init+0x320>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d019      	beq.n	8001762 <HAL_GPIO_Init+0x21a>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a4e      	ldr	r2, [pc, #312]	; (800186c <HAL_GPIO_Init+0x324>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d013      	beq.n	800175e <HAL_GPIO_Init+0x216>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a4d      	ldr	r2, [pc, #308]	; (8001870 <HAL_GPIO_Init+0x328>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d00d      	beq.n	800175a <HAL_GPIO_Init+0x212>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a4c      	ldr	r2, [pc, #304]	; (8001874 <HAL_GPIO_Init+0x32c>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d007      	beq.n	8001756 <HAL_GPIO_Init+0x20e>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a4b      	ldr	r2, [pc, #300]	; (8001878 <HAL_GPIO_Init+0x330>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d101      	bne.n	8001752 <HAL_GPIO_Init+0x20a>
 800174e:	2307      	movs	r3, #7
 8001750:	e00e      	b.n	8001770 <HAL_GPIO_Init+0x228>
 8001752:	2308      	movs	r3, #8
 8001754:	e00c      	b.n	8001770 <HAL_GPIO_Init+0x228>
 8001756:	2306      	movs	r3, #6
 8001758:	e00a      	b.n	8001770 <HAL_GPIO_Init+0x228>
 800175a:	2305      	movs	r3, #5
 800175c:	e008      	b.n	8001770 <HAL_GPIO_Init+0x228>
 800175e:	2304      	movs	r3, #4
 8001760:	e006      	b.n	8001770 <HAL_GPIO_Init+0x228>
 8001762:	2303      	movs	r3, #3
 8001764:	e004      	b.n	8001770 <HAL_GPIO_Init+0x228>
 8001766:	2302      	movs	r3, #2
 8001768:	e002      	b.n	8001770 <HAL_GPIO_Init+0x228>
 800176a:	2301      	movs	r3, #1
 800176c:	e000      	b.n	8001770 <HAL_GPIO_Init+0x228>
 800176e:	2300      	movs	r3, #0
 8001770:	69fa      	ldr	r2, [r7, #28]
 8001772:	f002 0203 	and.w	r2, r2, #3
 8001776:	0092      	lsls	r2, r2, #2
 8001778:	4093      	lsls	r3, r2
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4313      	orrs	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001780:	4935      	ldr	r1, [pc, #212]	; (8001858 <HAL_GPIO_Init+0x310>)
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	089b      	lsrs	r3, r3, #2
 8001786:	3302      	adds	r3, #2
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800178e:	4b3b      	ldr	r3, [pc, #236]	; (800187c <HAL_GPIO_Init+0x334>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	43db      	mvns	r3, r3
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4013      	ands	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017b2:	4a32      	ldr	r2, [pc, #200]	; (800187c <HAL_GPIO_Init+0x334>)
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017b8:	4b30      	ldr	r3, [pc, #192]	; (800187c <HAL_GPIO_Init+0x334>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	43db      	mvns	r3, r3
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4013      	ands	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d003      	beq.n	80017dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	4313      	orrs	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017dc:	4a27      	ldr	r2, [pc, #156]	; (800187c <HAL_GPIO_Init+0x334>)
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017e2:	4b26      	ldr	r3, [pc, #152]	; (800187c <HAL_GPIO_Init+0x334>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	43db      	mvns	r3, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4013      	ands	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	4313      	orrs	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001806:	4a1d      	ldr	r2, [pc, #116]	; (800187c <HAL_GPIO_Init+0x334>)
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800180c:	4b1b      	ldr	r3, [pc, #108]	; (800187c <HAL_GPIO_Init+0x334>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	43db      	mvns	r3, r3
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4013      	ands	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d003      	beq.n	8001830 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	4313      	orrs	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001830:	4a12      	ldr	r2, [pc, #72]	; (800187c <HAL_GPIO_Init+0x334>)
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	3301      	adds	r3, #1
 800183a:	61fb      	str	r3, [r7, #28]
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	2b0f      	cmp	r3, #15
 8001840:	f67f ae90 	bls.w	8001564 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001844:	bf00      	nop
 8001846:	bf00      	nop
 8001848:	3724      	adds	r7, #36	; 0x24
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	40023800 	.word	0x40023800
 8001858:	40013800 	.word	0x40013800
 800185c:	40020000 	.word	0x40020000
 8001860:	40020400 	.word	0x40020400
 8001864:	40020800 	.word	0x40020800
 8001868:	40020c00 	.word	0x40020c00
 800186c:	40021000 	.word	0x40021000
 8001870:	40021400 	.word	0x40021400
 8001874:	40021800 	.word	0x40021800
 8001878:	40021c00 	.word	0x40021c00
 800187c:	40013c00 	.word	0x40013c00

08001880 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	460b      	mov	r3, r1
 800188a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	691a      	ldr	r2, [r3, #16]
 8001890:	887b      	ldrh	r3, [r7, #2]
 8001892:	4013      	ands	r3, r2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d002      	beq.n	800189e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001898:	2301      	movs	r3, #1
 800189a:	73fb      	strb	r3, [r7, #15]
 800189c:	e001      	b.n	80018a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800189e:	2300      	movs	r3, #0
 80018a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	460b      	mov	r3, r1
 80018ba:	807b      	strh	r3, [r7, #2]
 80018bc:	4613      	mov	r3, r2
 80018be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018c0:	787b      	ldrb	r3, [r7, #1]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018c6:	887a      	ldrh	r2, [r7, #2]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018cc:	e003      	b.n	80018d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018ce:	887b      	ldrh	r3, [r7, #2]
 80018d0:	041a      	lsls	r2, r3, #16
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	619a      	str	r2, [r3, #24]
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
	...

080018e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80018ee:	4b08      	ldr	r3, [pc, #32]	; (8001910 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018f0:	695a      	ldr	r2, [r3, #20]
 80018f2:	88fb      	ldrh	r3, [r7, #6]
 80018f4:	4013      	ands	r3, r2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d006      	beq.n	8001908 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018fa:	4a05      	ldr	r2, [pc, #20]	; (8001910 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018fc:	88fb      	ldrh	r3, [r7, #6]
 80018fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001900:	88fb      	ldrh	r3, [r7, #6]
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff f9ac 	bl	8000c60 <HAL_GPIO_EXTI_Callback>
  }
}
 8001908:	bf00      	nop
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40013c00 	.word	0x40013c00

08001914 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e12b      	b.n	8001b7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	d106      	bne.n	8001940 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff fa54 	bl	8000de8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2224      	movs	r2, #36	; 0x24
 8001944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f022 0201 	bic.w	r2, r2, #1
 8001956:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001966:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001976:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001978:	f002 fc9e 	bl	80042b8 <HAL_RCC_GetPCLK1Freq>
 800197c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	4a81      	ldr	r2, [pc, #516]	; (8001b88 <HAL_I2C_Init+0x274>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d807      	bhi.n	8001998 <HAL_I2C_Init+0x84>
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4a80      	ldr	r2, [pc, #512]	; (8001b8c <HAL_I2C_Init+0x278>)
 800198c:	4293      	cmp	r3, r2
 800198e:	bf94      	ite	ls
 8001990:	2301      	movls	r3, #1
 8001992:	2300      	movhi	r3, #0
 8001994:	b2db      	uxtb	r3, r3
 8001996:	e006      	b.n	80019a6 <HAL_I2C_Init+0x92>
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4a7d      	ldr	r2, [pc, #500]	; (8001b90 <HAL_I2C_Init+0x27c>)
 800199c:	4293      	cmp	r3, r2
 800199e:	bf94      	ite	ls
 80019a0:	2301      	movls	r3, #1
 80019a2:	2300      	movhi	r3, #0
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e0e7      	b.n	8001b7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	4a78      	ldr	r2, [pc, #480]	; (8001b94 <HAL_I2C_Init+0x280>)
 80019b2:	fba2 2303 	umull	r2, r3, r2, r3
 80019b6:	0c9b      	lsrs	r3, r3, #18
 80019b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68ba      	ldr	r2, [r7, #8]
 80019ca:	430a      	orrs	r2, r1
 80019cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	6a1b      	ldr	r3, [r3, #32]
 80019d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	4a6a      	ldr	r2, [pc, #424]	; (8001b88 <HAL_I2C_Init+0x274>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d802      	bhi.n	80019e8 <HAL_I2C_Init+0xd4>
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	3301      	adds	r3, #1
 80019e6:	e009      	b.n	80019fc <HAL_I2C_Init+0xe8>
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80019ee:	fb02 f303 	mul.w	r3, r2, r3
 80019f2:	4a69      	ldr	r2, [pc, #420]	; (8001b98 <HAL_I2C_Init+0x284>)
 80019f4:	fba2 2303 	umull	r2, r3, r2, r3
 80019f8:	099b      	lsrs	r3, r3, #6
 80019fa:	3301      	adds	r3, #1
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	6812      	ldr	r2, [r2, #0]
 8001a00:	430b      	orrs	r3, r1
 8001a02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001a0e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	495c      	ldr	r1, [pc, #368]	; (8001b88 <HAL_I2C_Init+0x274>)
 8001a18:	428b      	cmp	r3, r1
 8001a1a:	d819      	bhi.n	8001a50 <HAL_I2C_Init+0x13c>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	1e59      	subs	r1, r3, #1
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a2a:	1c59      	adds	r1, r3, #1
 8001a2c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001a30:	400b      	ands	r3, r1
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d00a      	beq.n	8001a4c <HAL_I2C_Init+0x138>
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	1e59      	subs	r1, r3, #1
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a44:	3301      	adds	r3, #1
 8001a46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a4a:	e051      	b.n	8001af0 <HAL_I2C_Init+0x1dc>
 8001a4c:	2304      	movs	r3, #4
 8001a4e:	e04f      	b.n	8001af0 <HAL_I2C_Init+0x1dc>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d111      	bne.n	8001a7c <HAL_I2C_Init+0x168>
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	1e58      	subs	r0, r3, #1
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6859      	ldr	r1, [r3, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	440b      	add	r3, r1
 8001a66:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	bf0c      	ite	eq
 8001a74:	2301      	moveq	r3, #1
 8001a76:	2300      	movne	r3, #0
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	e012      	b.n	8001aa2 <HAL_I2C_Init+0x18e>
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	1e58      	subs	r0, r3, #1
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6859      	ldr	r1, [r3, #4]
 8001a84:	460b      	mov	r3, r1
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	440b      	add	r3, r1
 8001a8a:	0099      	lsls	r1, r3, #2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a92:	3301      	adds	r3, #1
 8001a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	bf0c      	ite	eq
 8001a9c:	2301      	moveq	r3, #1
 8001a9e:	2300      	movne	r3, #0
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <HAL_I2C_Init+0x196>
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e022      	b.n	8001af0 <HAL_I2C_Init+0x1dc>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d10e      	bne.n	8001ad0 <HAL_I2C_Init+0x1bc>
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	1e58      	subs	r0, r3, #1
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6859      	ldr	r1, [r3, #4]
 8001aba:	460b      	mov	r3, r1
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	440b      	add	r3, r1
 8001ac0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ace:	e00f      	b.n	8001af0 <HAL_I2C_Init+0x1dc>
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	1e58      	subs	r0, r3, #1
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6859      	ldr	r1, [r3, #4]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	440b      	add	r3, r1
 8001ade:	0099      	lsls	r1, r3, #2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001af0:	6879      	ldr	r1, [r7, #4]
 8001af2:	6809      	ldr	r1, [r1, #0]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69da      	ldr	r2, [r3, #28]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a1b      	ldr	r3, [r3, #32]
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	430a      	orrs	r2, r1
 8001b12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	6911      	ldr	r1, [r2, #16]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	68d2      	ldr	r2, [r2, #12]
 8001b2a:	4311      	orrs	r1, r2
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	6812      	ldr	r2, [r2, #0]
 8001b30:	430b      	orrs	r3, r1
 8001b32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	695a      	ldr	r2, [r3, #20]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	431a      	orrs	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f042 0201 	orr.w	r2, r2, #1
 8001b5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2220      	movs	r2, #32
 8001b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	000186a0 	.word	0x000186a0
 8001b8c:	001e847f 	.word	0x001e847f
 8001b90:	003d08ff 	.word	0x003d08ff
 8001b94:	431bde83 	.word	0x431bde83
 8001b98:	10624dd3 	.word	0x10624dd3

08001b9c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b088      	sub	sp, #32
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e128      	b.n	8001e00 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d109      	bne.n	8001bce <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a90      	ldr	r2, [pc, #576]	; (8001e08 <HAL_I2S_Init+0x26c>)
 8001bc6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7ff f955 	bl	8000e78 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	69db      	ldr	r3, [r3, #28]
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	6812      	ldr	r2, [r2, #0]
 8001be0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001be4:	f023 030f 	bic.w	r3, r3, #15
 8001be8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2202      	movs	r2, #2
 8001bf0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d060      	beq.n	8001cbc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d102      	bne.n	8001c08 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001c02:	2310      	movs	r3, #16
 8001c04:	617b      	str	r3, [r7, #20]
 8001c06:	e001      	b.n	8001c0c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001c08:	2320      	movs	r3, #32
 8001c0a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	2b20      	cmp	r3, #32
 8001c12:	d802      	bhi.n	8001c1a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001c1a:	2001      	movs	r0, #1
 8001c1c:	f002 fc42 	bl	80044a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8001c20:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c2a:	d125      	bne.n	8001c78 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d010      	beq.n	8001c56 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c3e:	4613      	mov	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	461a      	mov	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	695b      	ldr	r3, [r3, #20]
 8001c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c50:	3305      	adds	r3, #5
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	e01f      	b.n	8001c96 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c60:	4613      	mov	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	461a      	mov	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c72:	3305      	adds	r3, #5
 8001c74:	613b      	str	r3, [r7, #16]
 8001c76:	e00e      	b.n	8001c96 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001c78:	68fa      	ldr	r2, [r7, #12]
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c80:	4613      	mov	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	461a      	mov	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c92:	3305      	adds	r3, #5
 8001c94:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	4a5c      	ldr	r2, [pc, #368]	; (8001e0c <HAL_I2S_Init+0x270>)
 8001c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c9e:	08db      	lsrs	r3, r3, #3
 8001ca0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	085b      	lsrs	r3, r3, #1
 8001cb2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	021b      	lsls	r3, r3, #8
 8001cb8:	61bb      	str	r3, [r7, #24]
 8001cba:	e003      	b.n	8001cc4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d902      	bls.n	8001cd0 <HAL_I2S_Init+0x134>
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	2bff      	cmp	r3, #255	; 0xff
 8001cce:	d907      	bls.n	8001ce0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd4:	f043 0210 	orr.w	r2, r3, #16
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e08f      	b.n	8001e00 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	691a      	ldr	r2, [r3, #16]
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	ea42 0103 	orr.w	r1, r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	69fa      	ldr	r2, [r7, #28]
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001cfe:	f023 030f 	bic.w	r3, r3, #15
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	6851      	ldr	r1, [r2, #4]
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	6892      	ldr	r2, [r2, #8]
 8001d0a:	4311      	orrs	r1, r2
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	68d2      	ldr	r2, [r2, #12]
 8001d10:	4311      	orrs	r1, r2
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	6992      	ldr	r2, [r2, #24]
 8001d16:	430a      	orrs	r2, r1
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d22:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d161      	bne.n	8001df0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a38      	ldr	r2, [pc, #224]	; (8001e10 <HAL_I2S_Init+0x274>)
 8001d30:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a37      	ldr	r2, [pc, #220]	; (8001e14 <HAL_I2S_Init+0x278>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d101      	bne.n	8001d40 <HAL_I2S_Init+0x1a4>
 8001d3c:	4b36      	ldr	r3, [pc, #216]	; (8001e18 <HAL_I2S_Init+0x27c>)
 8001d3e:	e001      	b.n	8001d44 <HAL_I2S_Init+0x1a8>
 8001d40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6812      	ldr	r2, [r2, #0]
 8001d4a:	4932      	ldr	r1, [pc, #200]	; (8001e14 <HAL_I2S_Init+0x278>)
 8001d4c:	428a      	cmp	r2, r1
 8001d4e:	d101      	bne.n	8001d54 <HAL_I2S_Init+0x1b8>
 8001d50:	4a31      	ldr	r2, [pc, #196]	; (8001e18 <HAL_I2S_Init+0x27c>)
 8001d52:	e001      	b.n	8001d58 <HAL_I2S_Init+0x1bc>
 8001d54:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001d58:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001d5c:	f023 030f 	bic.w	r3, r3, #15
 8001d60:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a2b      	ldr	r2, [pc, #172]	; (8001e14 <HAL_I2S_Init+0x278>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d101      	bne.n	8001d70 <HAL_I2S_Init+0x1d4>
 8001d6c:	4b2a      	ldr	r3, [pc, #168]	; (8001e18 <HAL_I2S_Init+0x27c>)
 8001d6e:	e001      	b.n	8001d74 <HAL_I2S_Init+0x1d8>
 8001d70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d74:	2202      	movs	r2, #2
 8001d76:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a25      	ldr	r2, [pc, #148]	; (8001e14 <HAL_I2S_Init+0x278>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d101      	bne.n	8001d86 <HAL_I2S_Init+0x1ea>
 8001d82:	4b25      	ldr	r3, [pc, #148]	; (8001e18 <HAL_I2S_Init+0x27c>)
 8001d84:	e001      	b.n	8001d8a <HAL_I2S_Init+0x1ee>
 8001d86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d8a:	69db      	ldr	r3, [r3, #28]
 8001d8c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d96:	d003      	beq.n	8001da0 <HAL_I2S_Init+0x204>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d103      	bne.n	8001da8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001da0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001da4:	613b      	str	r3, [r7, #16]
 8001da6:	e001      	b.n	8001dac <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001da8:	2300      	movs	r3, #0
 8001daa:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001db6:	4313      	orrs	r3, r2
 8001db8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	897b      	ldrh	r3, [r7, #10]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001dd8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a0d      	ldr	r2, [pc, #52]	; (8001e14 <HAL_I2S_Init+0x278>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d101      	bne.n	8001de8 <HAL_I2S_Init+0x24c>
 8001de4:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <HAL_I2S_Init+0x27c>)
 8001de6:	e001      	b.n	8001dec <HAL_I2S_Init+0x250>
 8001de8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001dec:	897a      	ldrh	r2, [r7, #10]
 8001dee:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3720      	adds	r7, #32
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	08001f13 	.word	0x08001f13
 8001e0c:	cccccccd 	.word	0xcccccccd
 8001e10:	08002029 	.word	0x08002029
 8001e14:	40003800 	.word	0x40003800
 8001e18:	40003400 	.word	0x40003400

08001e1c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e64:	881a      	ldrh	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e70:	1c9a      	adds	r2, r3, #2
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10e      	bne.n	8001eac <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e9c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff ffb8 	bl	8001e1c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001eac:	bf00      	nop
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68da      	ldr	r2, [r3, #12]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec6:	b292      	uxth	r2, r2
 8001ec8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ece:	1c9a      	adds	r2, r3, #2
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	3b01      	subs	r3, #1
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d10e      	bne.n	8001f0a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001efa:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f7ff ff93 	bl	8001e30 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b086      	sub	sp, #24
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b04      	cmp	r3, #4
 8001f2c:	d13a      	bne.n	8001fa4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d109      	bne.n	8001f4c <I2S_IRQHandler+0x3a>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f42:	2b40      	cmp	r3, #64	; 0x40
 8001f44:	d102      	bne.n	8001f4c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7ff ffb4 	bl	8001eb4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f52:	2b40      	cmp	r3, #64	; 0x40
 8001f54:	d126      	bne.n	8001fa4 <I2S_IRQHandler+0x92>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f003 0320 	and.w	r3, r3, #32
 8001f60:	2b20      	cmp	r3, #32
 8001f62:	d11f      	bne.n	8001fa4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	685a      	ldr	r2, [r3, #4]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f72:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001f74:	2300      	movs	r3, #0
 8001f76:	613b      	str	r3, [r7, #16]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	613b      	str	r3, [r7, #16]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	613b      	str	r3, [r7, #16]
 8001f88:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f96:	f043 0202 	orr.w	r2, r3, #2
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff ff50 	bl	8001e44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b03      	cmp	r3, #3
 8001fae:	d136      	bne.n	800201e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d109      	bne.n	8001fce <I2S_IRQHandler+0xbc>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fc4:	2b80      	cmp	r3, #128	; 0x80
 8001fc6:	d102      	bne.n	8001fce <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7ff ff45 	bl	8001e58 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f003 0308 	and.w	r3, r3, #8
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d122      	bne.n	800201e <I2S_IRQHandler+0x10c>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f003 0320 	and.w	r3, r3, #32
 8001fe2:	2b20      	cmp	r3, #32
 8001fe4:	d11b      	bne.n	800201e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001ff4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002010:	f043 0204 	orr.w	r2, r3, #4
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7ff ff13 	bl	8001e44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800201e:	bf00      	nop
 8002020:	3718      	adds	r7, #24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
	...

08002028 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b088      	sub	sp, #32
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a92      	ldr	r2, [pc, #584]	; (8002288 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d101      	bne.n	8002046 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002042:	4b92      	ldr	r3, [pc, #584]	; (800228c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002044:	e001      	b.n	800204a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002046:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a8b      	ldr	r2, [pc, #556]	; (8002288 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d101      	bne.n	8002064 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002060:	4b8a      	ldr	r3, [pc, #552]	; (800228c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002062:	e001      	b.n	8002068 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002064:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002074:	d004      	beq.n	8002080 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	f040 8099 	bne.w	80021b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b02      	cmp	r3, #2
 8002088:	d107      	bne.n	800209a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002090:	2b00      	cmp	r3, #0
 8002092:	d002      	beq.n	800209a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f925 	bl	80022e4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d107      	bne.n	80020b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d002      	beq.n	80020b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f9c8 	bl	8002444 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ba:	2b40      	cmp	r3, #64	; 0x40
 80020bc:	d13a      	bne.n	8002134 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	f003 0320 	and.w	r3, r3, #32
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d035      	beq.n	8002134 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a6e      	ldr	r2, [pc, #440]	; (8002288 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d101      	bne.n	80020d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80020d2:	4b6e      	ldr	r3, [pc, #440]	; (800228c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80020d4:	e001      	b.n	80020da <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80020d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4969      	ldr	r1, [pc, #420]	; (8002288 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80020e2:	428b      	cmp	r3, r1
 80020e4:	d101      	bne.n	80020ea <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80020e6:	4b69      	ldr	r3, [pc, #420]	; (800228c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80020e8:	e001      	b.n	80020ee <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80020ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80020f2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	685a      	ldr	r2, [r3, #4]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002102:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002104:	2300      	movs	r3, #0
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2201      	movs	r2, #1
 800211e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002126:	f043 0202 	orr.w	r2, r3, #2
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7ff fe88 	bl	8001e44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	2b08      	cmp	r3, #8
 800213c:	f040 80c3 	bne.w	80022c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	f003 0320 	and.w	r3, r3, #32
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 80bd 	beq.w	80022c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	685a      	ldr	r2, [r3, #4]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800215a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a49      	ldr	r2, [pc, #292]	; (8002288 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d101      	bne.n	800216a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002166:	4b49      	ldr	r3, [pc, #292]	; (800228c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002168:	e001      	b.n	800216e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800216a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4944      	ldr	r1, [pc, #272]	; (8002288 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002176:	428b      	cmp	r3, r1
 8002178:	d101      	bne.n	800217e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800217a:	4b44      	ldr	r3, [pc, #272]	; (800228c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800217c:	e001      	b.n	8002182 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800217e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002182:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002186:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002188:	2300      	movs	r3, #0
 800218a:	60bb      	str	r3, [r7, #8]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	60bb      	str	r3, [r7, #8]
 8002194:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a2:	f043 0204 	orr.w	r2, r3, #4
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff fe4a 	bl	8001e44 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80021b0:	e089      	b.n	80022c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d107      	bne.n	80021cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d002      	beq.n	80021cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f8be 	bl	8002348 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d107      	bne.n	80021e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d002      	beq.n	80021e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f000 f8fd 	bl	80023e0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ec:	2b40      	cmp	r3, #64	; 0x40
 80021ee:	d12f      	bne.n	8002250 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	f003 0320 	and.w	r3, r3, #32
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d02a      	beq.n	8002250 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002208:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a1e      	ldr	r2, [pc, #120]	; (8002288 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d101      	bne.n	8002218 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002214:	4b1d      	ldr	r3, [pc, #116]	; (800228c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002216:	e001      	b.n	800221c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002218:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4919      	ldr	r1, [pc, #100]	; (8002288 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002224:	428b      	cmp	r3, r1
 8002226:	d101      	bne.n	800222c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002228:	4b18      	ldr	r3, [pc, #96]	; (800228c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800222a:	e001      	b.n	8002230 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800222c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002230:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002234:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002242:	f043 0202 	orr.w	r2, r3, #2
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f7ff fdfa 	bl	8001e44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	f003 0308 	and.w	r3, r3, #8
 8002256:	2b08      	cmp	r3, #8
 8002258:	d136      	bne.n	80022c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	f003 0320 	and.w	r3, r3, #32
 8002260:	2b00      	cmp	r3, #0
 8002262:	d031      	beq.n	80022c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a07      	ldr	r2, [pc, #28]	; (8002288 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d101      	bne.n	8002272 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800226e:	4b07      	ldr	r3, [pc, #28]	; (800228c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002270:	e001      	b.n	8002276 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002272:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002276:	685a      	ldr	r2, [r3, #4]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4902      	ldr	r1, [pc, #8]	; (8002288 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800227e:	428b      	cmp	r3, r1
 8002280:	d106      	bne.n	8002290 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002282:	4b02      	ldr	r3, [pc, #8]	; (800228c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002284:	e006      	b.n	8002294 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002286:	bf00      	nop
 8002288:	40003800 	.word	0x40003800
 800228c:	40003400 	.word	0x40003400
 8002290:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002294:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002298:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80022a8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b6:	f043 0204 	orr.w	r2, r3, #4
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7ff fdc0 	bl	8001e44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80022c4:	e000      	b.n	80022c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80022c6:	bf00      	nop
}
 80022c8:	bf00      	nop
 80022ca:	3720      	adds	r7, #32
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f0:	1c99      	adds	r1, r3, #2
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	6251      	str	r1, [r2, #36]	; 0x24
 80022f6:	881a      	ldrh	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002302:	b29b      	uxth	r3, r3
 8002304:	3b01      	subs	r3, #1
 8002306:	b29a      	uxth	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002310:	b29b      	uxth	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d113      	bne.n	800233e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002324:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800232a:	b29b      	uxth	r3, r3
 800232c:	2b00      	cmp	r3, #0
 800232e:	d106      	bne.n	800233e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f7ff ffc9 	bl	80022d0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800233e:	bf00      	nop
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
	...

08002348 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002354:	1c99      	adds	r1, r3, #2
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	6251      	str	r1, [r2, #36]	; 0x24
 800235a:	8819      	ldrh	r1, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a1d      	ldr	r2, [pc, #116]	; (80023d8 <I2SEx_TxISR_I2SExt+0x90>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d101      	bne.n	800236a <I2SEx_TxISR_I2SExt+0x22>
 8002366:	4b1d      	ldr	r3, [pc, #116]	; (80023dc <I2SEx_TxISR_I2SExt+0x94>)
 8002368:	e001      	b.n	800236e <I2SEx_TxISR_I2SExt+0x26>
 800236a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800236e:	460a      	mov	r2, r1
 8002370:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002376:	b29b      	uxth	r3, r3
 8002378:	3b01      	subs	r3, #1
 800237a:	b29a      	uxth	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002384:	b29b      	uxth	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d121      	bne.n	80023ce <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a12      	ldr	r2, [pc, #72]	; (80023d8 <I2SEx_TxISR_I2SExt+0x90>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d101      	bne.n	8002398 <I2SEx_TxISR_I2SExt+0x50>
 8002394:	4b11      	ldr	r3, [pc, #68]	; (80023dc <I2SEx_TxISR_I2SExt+0x94>)
 8002396:	e001      	b.n	800239c <I2SEx_TxISR_I2SExt+0x54>
 8002398:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	490d      	ldr	r1, [pc, #52]	; (80023d8 <I2SEx_TxISR_I2SExt+0x90>)
 80023a4:	428b      	cmp	r3, r1
 80023a6:	d101      	bne.n	80023ac <I2SEx_TxISR_I2SExt+0x64>
 80023a8:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <I2SEx_TxISR_I2SExt+0x94>)
 80023aa:	e001      	b.n	80023b0 <I2SEx_TxISR_I2SExt+0x68>
 80023ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80023b4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d106      	bne.n	80023ce <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f7ff ff81 	bl	80022d0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40003800 	.word	0x40003800
 80023dc:	40003400 	.word	0x40003400

080023e0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68d8      	ldr	r0, [r3, #12]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f2:	1c99      	adds	r1, r3, #2
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80023f8:	b282      	uxth	r2, r0
 80023fa:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002400:	b29b      	uxth	r3, r3
 8002402:	3b01      	subs	r3, #1
 8002404:	b29a      	uxth	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800240e:	b29b      	uxth	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	d113      	bne.n	800243c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	685a      	ldr	r2, [r3, #4]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002422:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002428:	b29b      	uxth	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d106      	bne.n	800243c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7ff ff4a 	bl	80022d0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800243c:	bf00      	nop
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a20      	ldr	r2, [pc, #128]	; (80024d4 <I2SEx_RxISR_I2SExt+0x90>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d101      	bne.n	800245a <I2SEx_RxISR_I2SExt+0x16>
 8002456:	4b20      	ldr	r3, [pc, #128]	; (80024d8 <I2SEx_RxISR_I2SExt+0x94>)
 8002458:	e001      	b.n	800245e <I2SEx_RxISR_I2SExt+0x1a>
 800245a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800245e:	68d8      	ldr	r0, [r3, #12]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002464:	1c99      	adds	r1, r3, #2
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	62d1      	str	r1, [r2, #44]	; 0x2c
 800246a:	b282      	uxth	r2, r0
 800246c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002472:	b29b      	uxth	r3, r3
 8002474:	3b01      	subs	r3, #1
 8002476:	b29a      	uxth	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002480:	b29b      	uxth	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d121      	bne.n	80024ca <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a12      	ldr	r2, [pc, #72]	; (80024d4 <I2SEx_RxISR_I2SExt+0x90>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d101      	bne.n	8002494 <I2SEx_RxISR_I2SExt+0x50>
 8002490:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <I2SEx_RxISR_I2SExt+0x94>)
 8002492:	e001      	b.n	8002498 <I2SEx_RxISR_I2SExt+0x54>
 8002494:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	490d      	ldr	r1, [pc, #52]	; (80024d4 <I2SEx_RxISR_I2SExt+0x90>)
 80024a0:	428b      	cmp	r3, r1
 80024a2:	d101      	bne.n	80024a8 <I2SEx_RxISR_I2SExt+0x64>
 80024a4:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <I2SEx_RxISR_I2SExt+0x94>)
 80024a6:	e001      	b.n	80024ac <I2SEx_RxISR_I2SExt+0x68>
 80024a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024ac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80024b0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d106      	bne.n	80024ca <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f7ff ff03 	bl	80022d0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80024ca:	bf00      	nop
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40003800 	.word	0x40003800
 80024d8:	40003400 	.word	0x40003400

080024dc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80024dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024de:	b08f      	sub	sp, #60	; 0x3c
 80024e0:	af0a      	add	r7, sp, #40	; 0x28
 80024e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e10f      	b.n	800270e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d106      	bne.n	800250e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f006 fa5d 	bl	80089c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2203      	movs	r2, #3
 8002512:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800251a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251e:	2b00      	cmp	r3, #0
 8002520:	d102      	bne.n	8002528 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f002 fd3c 	bl	8004faa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	603b      	str	r3, [r7, #0]
 8002538:	687e      	ldr	r6, [r7, #4]
 800253a:	466d      	mov	r5, sp
 800253c:	f106 0410 	add.w	r4, r6, #16
 8002540:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002542:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002544:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002546:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002548:	e894 0003 	ldmia.w	r4, {r0, r1}
 800254c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002550:	1d33      	adds	r3, r6, #4
 8002552:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002554:	6838      	ldr	r0, [r7, #0]
 8002556:	f002 fc13 	bl	8004d80 <USB_CoreInit>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d005      	beq.n	800256c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2202      	movs	r2, #2
 8002564:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e0d0      	b.n	800270e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2100      	movs	r1, #0
 8002572:	4618      	mov	r0, r3
 8002574:	f002 fd2a 	bl	8004fcc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002578:	2300      	movs	r3, #0
 800257a:	73fb      	strb	r3, [r7, #15]
 800257c:	e04a      	b.n	8002614 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800257e:	7bfa      	ldrb	r2, [r7, #15]
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	4613      	mov	r3, r2
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	4413      	add	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	440b      	add	r3, r1
 800258c:	333d      	adds	r3, #61	; 0x3d
 800258e:	2201      	movs	r2, #1
 8002590:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002592:	7bfa      	ldrb	r2, [r7, #15]
 8002594:	6879      	ldr	r1, [r7, #4]
 8002596:	4613      	mov	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	4413      	add	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	440b      	add	r3, r1
 80025a0:	333c      	adds	r3, #60	; 0x3c
 80025a2:	7bfa      	ldrb	r2, [r7, #15]
 80025a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80025a6:	7bfa      	ldrb	r2, [r7, #15]
 80025a8:	7bfb      	ldrb	r3, [r7, #15]
 80025aa:	b298      	uxth	r0, r3
 80025ac:	6879      	ldr	r1, [r7, #4]
 80025ae:	4613      	mov	r3, r2
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	4413      	add	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	440b      	add	r3, r1
 80025b8:	3344      	adds	r3, #68	; 0x44
 80025ba:	4602      	mov	r2, r0
 80025bc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025be:	7bfa      	ldrb	r2, [r7, #15]
 80025c0:	6879      	ldr	r1, [r7, #4]
 80025c2:	4613      	mov	r3, r2
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	4413      	add	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	440b      	add	r3, r1
 80025cc:	3340      	adds	r3, #64	; 0x40
 80025ce:	2200      	movs	r2, #0
 80025d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025d2:	7bfa      	ldrb	r2, [r7, #15]
 80025d4:	6879      	ldr	r1, [r7, #4]
 80025d6:	4613      	mov	r3, r2
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	4413      	add	r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	440b      	add	r3, r1
 80025e0:	3348      	adds	r3, #72	; 0x48
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80025e6:	7bfa      	ldrb	r2, [r7, #15]
 80025e8:	6879      	ldr	r1, [r7, #4]
 80025ea:	4613      	mov	r3, r2
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	4413      	add	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	440b      	add	r3, r1
 80025f4:	334c      	adds	r3, #76	; 0x4c
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025fa:	7bfa      	ldrb	r2, [r7, #15]
 80025fc:	6879      	ldr	r1, [r7, #4]
 80025fe:	4613      	mov	r3, r2
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	4413      	add	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	440b      	add	r3, r1
 8002608:	3354      	adds	r3, #84	; 0x54
 800260a:	2200      	movs	r2, #0
 800260c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800260e:	7bfb      	ldrb	r3, [r7, #15]
 8002610:	3301      	adds	r3, #1
 8002612:	73fb      	strb	r3, [r7, #15]
 8002614:	7bfa      	ldrb	r2, [r7, #15]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	429a      	cmp	r2, r3
 800261c:	d3af      	bcc.n	800257e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800261e:	2300      	movs	r3, #0
 8002620:	73fb      	strb	r3, [r7, #15]
 8002622:	e044      	b.n	80026ae <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002624:	7bfa      	ldrb	r2, [r7, #15]
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	4613      	mov	r3, r2
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	4413      	add	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	440b      	add	r3, r1
 8002632:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002636:	2200      	movs	r2, #0
 8002638:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800263a:	7bfa      	ldrb	r2, [r7, #15]
 800263c:	6879      	ldr	r1, [r7, #4]
 800263e:	4613      	mov	r3, r2
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	4413      	add	r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	440b      	add	r3, r1
 8002648:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800264c:	7bfa      	ldrb	r2, [r7, #15]
 800264e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002650:	7bfa      	ldrb	r2, [r7, #15]
 8002652:	6879      	ldr	r1, [r7, #4]
 8002654:	4613      	mov	r3, r2
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	4413      	add	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	440b      	add	r3, r1
 800265e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002662:	2200      	movs	r2, #0
 8002664:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002666:	7bfa      	ldrb	r2, [r7, #15]
 8002668:	6879      	ldr	r1, [r7, #4]
 800266a:	4613      	mov	r3, r2
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	4413      	add	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	440b      	add	r3, r1
 8002674:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800267c:	7bfa      	ldrb	r2, [r7, #15]
 800267e:	6879      	ldr	r1, [r7, #4]
 8002680:	4613      	mov	r3, r2
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	4413      	add	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	440b      	add	r3, r1
 800268a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002692:	7bfa      	ldrb	r2, [r7, #15]
 8002694:	6879      	ldr	r1, [r7, #4]
 8002696:	4613      	mov	r3, r2
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	4413      	add	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	440b      	add	r3, r1
 80026a0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026a8:	7bfb      	ldrb	r3, [r7, #15]
 80026aa:	3301      	adds	r3, #1
 80026ac:	73fb      	strb	r3, [r7, #15]
 80026ae:	7bfa      	ldrb	r2, [r7, #15]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d3b5      	bcc.n	8002624 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	603b      	str	r3, [r7, #0]
 80026be:	687e      	ldr	r6, [r7, #4]
 80026c0:	466d      	mov	r5, sp
 80026c2:	f106 0410 	add.w	r4, r6, #16
 80026c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80026d6:	1d33      	adds	r3, r6, #4
 80026d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026da:	6838      	ldr	r0, [r7, #0]
 80026dc:	f002 fcc2 	bl	8005064 <USB_DevInit>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d005      	beq.n	80026f2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2202      	movs	r2, #2
 80026ea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e00d      	b.n	800270e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f003 fe11 	bl	800632e <USB_DevDisconnect>

  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3714      	adds	r7, #20
 8002712:	46bd      	mov	sp, r7
 8002714:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002716 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b084      	sub	sp, #16
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800272a:	2b01      	cmp	r3, #1
 800272c:	d101      	bne.n	8002732 <HAL_PCD_Start+0x1c>
 800272e:	2302      	movs	r3, #2
 8002730:	e020      	b.n	8002774 <HAL_PCD_Start+0x5e>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273e:	2b01      	cmp	r3, #1
 8002740:	d109      	bne.n	8002756 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002746:	2b01      	cmp	r3, #1
 8002748:	d005      	beq.n	8002756 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f002 fc14 	bl	8004f88 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4618      	mov	r0, r3
 8002766:	f003 fdc1 	bl	80062ec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800277c:	b590      	push	{r4, r7, lr}
 800277e:	b08d      	sub	sp, #52	; 0x34
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800278a:	6a3b      	ldr	r3, [r7, #32]
 800278c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f003 fe7f 	bl	8006496 <USB_GetMode>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	f040 848a 	bne.w	80030b4 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f003 fde3 	bl	8006370 <USB_ReadInterrupts>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 8480 	beq.w	80030b2 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	0a1b      	lsrs	r3, r3, #8
 80027bc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f003 fdd0 	bl	8006370 <USB_ReadInterrupts>
 80027d0:	4603      	mov	r3, r0
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d107      	bne.n	80027ea <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	695a      	ldr	r2, [r3, #20]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f002 0202 	and.w	r2, r2, #2
 80027e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f003 fdbe 	bl	8006370 <USB_ReadInterrupts>
 80027f4:	4603      	mov	r3, r0
 80027f6:	f003 0310 	and.w	r3, r3, #16
 80027fa:	2b10      	cmp	r3, #16
 80027fc:	d161      	bne.n	80028c2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	699a      	ldr	r2, [r3, #24]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0210 	bic.w	r2, r2, #16
 800280c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800280e:	6a3b      	ldr	r3, [r7, #32]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	f003 020f 	and.w	r2, r3, #15
 800281a:	4613      	mov	r3, r2
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	4413      	add	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	4413      	add	r3, r2
 800282a:	3304      	adds	r3, #4
 800282c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	0c5b      	lsrs	r3, r3, #17
 8002832:	f003 030f 	and.w	r3, r3, #15
 8002836:	2b02      	cmp	r3, #2
 8002838:	d124      	bne.n	8002884 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002840:	4013      	ands	r3, r2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d035      	beq.n	80028b2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	091b      	lsrs	r3, r3, #4
 800284e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002850:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002854:	b29b      	uxth	r3, r3
 8002856:	461a      	mov	r2, r3
 8002858:	6a38      	ldr	r0, [r7, #32]
 800285a:	f003 fbf5 	bl	8006048 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	691a      	ldr	r2, [r3, #16]
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	091b      	lsrs	r3, r3, #4
 8002866:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800286a:	441a      	add	r2, r3
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	6a1a      	ldr	r2, [r3, #32]
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	091b      	lsrs	r3, r3, #4
 8002878:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800287c:	441a      	add	r2, r3
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	621a      	str	r2, [r3, #32]
 8002882:	e016      	b.n	80028b2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	0c5b      	lsrs	r3, r3, #17
 8002888:	f003 030f 	and.w	r3, r3, #15
 800288c:	2b06      	cmp	r3, #6
 800288e:	d110      	bne.n	80028b2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002896:	2208      	movs	r2, #8
 8002898:	4619      	mov	r1, r3
 800289a:	6a38      	ldr	r0, [r7, #32]
 800289c:	f003 fbd4 	bl	8006048 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	6a1a      	ldr	r2, [r3, #32]
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	091b      	lsrs	r3, r3, #4
 80028a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028ac:	441a      	add	r2, r3
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	699a      	ldr	r2, [r3, #24]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f042 0210 	orr.w	r2, r2, #16
 80028c0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f003 fd52 	bl	8006370 <USB_ReadInterrupts>
 80028cc:	4603      	mov	r3, r0
 80028ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028d2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80028d6:	f040 80a7 	bne.w	8002a28 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80028da:	2300      	movs	r3, #0
 80028dc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f003 fd57 	bl	8006396 <USB_ReadDevAllOutEpInterrupt>
 80028e8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80028ea:	e099      	b.n	8002a20 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80028ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f000 808e 	beq.w	8002a14 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	4611      	mov	r1, r2
 8002902:	4618      	mov	r0, r3
 8002904:	f003 fd7b 	bl	80063fe <USB_ReadDevOutEPInterrupt>
 8002908:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00c      	beq.n	800292e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002916:	015a      	lsls	r2, r3, #5
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	4413      	add	r3, r2
 800291c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002920:	461a      	mov	r2, r3
 8002922:	2301      	movs	r3, #1
 8002924:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002926:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 fec3 	bl	80036b4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	f003 0308 	and.w	r3, r3, #8
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00c      	beq.n	8002952 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	015a      	lsls	r2, r3, #5
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	4413      	add	r3, r2
 8002940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002944:	461a      	mov	r2, r3
 8002946:	2308      	movs	r3, #8
 8002948:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800294a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 ff99 	bl	8003884 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	f003 0310 	and.w	r3, r3, #16
 8002958:	2b00      	cmp	r3, #0
 800295a:	d008      	beq.n	800296e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295e:	015a      	lsls	r2, r3, #5
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	4413      	add	r3, r2
 8002964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002968:	461a      	mov	r2, r3
 800296a:	2310      	movs	r3, #16
 800296c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d030      	beq.n	80029da <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002978:	6a3b      	ldr	r3, [r7, #32]
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002980:	2b80      	cmp	r3, #128	; 0x80
 8002982:	d109      	bne.n	8002998 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	69fa      	ldr	r2, [r7, #28]
 800298e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002992:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002996:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800299a:	4613      	mov	r3, r2
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	4413      	add	r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	4413      	add	r3, r2
 80029aa:	3304      	adds	r3, #4
 80029ac:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	78db      	ldrb	r3, [r3, #3]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d108      	bne.n	80029c8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	2200      	movs	r2, #0
 80029ba:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	4619      	mov	r1, r3
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f006 f914 	bl	8008bf0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	015a      	lsls	r2, r3, #5
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	4413      	add	r3, r2
 80029d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029d4:	461a      	mov	r2, r3
 80029d6:	2302      	movs	r3, #2
 80029d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	f003 0320 	and.w	r3, r3, #32
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d008      	beq.n	80029f6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80029e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e6:	015a      	lsls	r2, r3, #5
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	4413      	add	r3, r2
 80029ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029f0:	461a      	mov	r2, r3
 80029f2:	2320      	movs	r3, #32
 80029f4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d009      	beq.n	8002a14 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a02:	015a      	lsls	r2, r3, #5
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	4413      	add	r3, r2
 8002a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a12:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a16:	3301      	adds	r3, #1
 8002a18:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a1c:	085b      	lsrs	r3, r3, #1
 8002a1e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f47f af62 	bne.w	80028ec <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f003 fc9f 	bl	8006370 <USB_ReadInterrupts>
 8002a32:	4603      	mov	r3, r0
 8002a34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a38:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a3c:	f040 80db 	bne.w	8002bf6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f003 fcc0 	bl	80063ca <USB_ReadDevAllInEpInterrupt>
 8002a4a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002a50:	e0cd      	b.n	8002bee <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 80c2 	beq.w	8002be2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	4611      	mov	r1, r2
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f003 fce6 	bl	800643a <USB_ReadDevInEPInterrupt>
 8002a6e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d057      	beq.n	8002b2a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	f003 030f 	and.w	r3, r3, #15
 8002a80:	2201      	movs	r2, #1
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	43db      	mvns	r3, r3
 8002a94:	69f9      	ldr	r1, [r7, #28]
 8002a96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	015a      	lsls	r2, r3, #5
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002aaa:	461a      	mov	r2, r3
 8002aac:	2301      	movs	r3, #1
 8002aae:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d132      	bne.n	8002b1e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002abc:	4613      	mov	r3, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	334c      	adds	r3, #76	; 0x4c
 8002ac8:	6819      	ldr	r1, [r3, #0]
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ace:	4613      	mov	r3, r2
 8002ad0:	00db      	lsls	r3, r3, #3
 8002ad2:	4413      	add	r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	4403      	add	r3, r0
 8002ad8:	3348      	adds	r3, #72	; 0x48
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4419      	add	r1, r3
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	4413      	add	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4403      	add	r3, r0
 8002aec:	334c      	adds	r3, #76	; 0x4c
 8002aee:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d113      	bne.n	8002b1e <HAL_PCD_IRQHandler+0x3a2>
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002afa:	4613      	mov	r3, r2
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	4413      	add	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	440b      	add	r3, r1
 8002b04:	3354      	adds	r3, #84	; 0x54
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d108      	bne.n	8002b1e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6818      	ldr	r0, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b16:	461a      	mov	r2, r3
 8002b18:	2101      	movs	r1, #1
 8002b1a:	f003 fced 	bl	80064f8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	4619      	mov	r1, r3
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f005 ffde 	bl	8008ae6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	f003 0308 	and.w	r3, r3, #8
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d008      	beq.n	8002b46 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b36:	015a      	lsls	r2, r3, #5
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b40:	461a      	mov	r2, r3
 8002b42:	2308      	movs	r3, #8
 8002b44:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	f003 0310 	and.w	r3, r3, #16
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d008      	beq.n	8002b62 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b52:	015a      	lsls	r2, r3, #5
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	4413      	add	r3, r2
 8002b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	2310      	movs	r3, #16
 8002b60:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d008      	beq.n	8002b7e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6e:	015a      	lsls	r2, r3, #5
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	4413      	add	r3, r2
 8002b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b78:	461a      	mov	r2, r3
 8002b7a:	2340      	movs	r3, #64	; 0x40
 8002b7c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d023      	beq.n	8002bd0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002b88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b8a:	6a38      	ldr	r0, [r7, #32]
 8002b8c:	f002 fbce 	bl	800532c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b92:	4613      	mov	r3, r2
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	4413      	add	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	3338      	adds	r3, #56	; 0x38
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	3304      	adds	r3, #4
 8002ba2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	78db      	ldrb	r3, [r3, #3]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d108      	bne.n	8002bbe <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f006 f82b 	bl	8008c14 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	015a      	lsls	r2, r3, #5
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bca:	461a      	mov	r2, r3
 8002bcc:	2302      	movs	r3, #2
 8002bce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002bda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 fcdb 	bl	8003598 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	3301      	adds	r3, #1
 8002be6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bea:	085b      	lsrs	r3, r3, #1
 8002bec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f47f af2e 	bne.w	8002a52 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f003 fbb8 	bl	8006370 <USB_ReadInterrupts>
 8002c00:	4603      	mov	r3, r0
 8002c02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c0a:	d122      	bne.n	8002c52 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	69fa      	ldr	r2, [r7, #28]
 8002c16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c1a:	f023 0301 	bic.w	r3, r3, #1
 8002c1e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d108      	bne.n	8002c3c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002c32:	2100      	movs	r1, #0
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 fec3 	bl	80039c0 <HAL_PCDEx_LPM_Callback>
 8002c3a:	e002      	b.n	8002c42 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f005 ffc9 	bl	8008bd4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	695a      	ldr	r2, [r3, #20]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002c50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f003 fb8a 	bl	8006370 <USB_ReadInterrupts>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c66:	d112      	bne.n	8002c8e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d102      	bne.n	8002c7e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f005 ff85 	bl	8008b88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	695a      	ldr	r2, [r3, #20]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002c8c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f003 fb6c 	bl	8006370 <USB_ReadInterrupts>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ca2:	f040 80b7 	bne.w	8002e14 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	69fa      	ldr	r2, [r7, #28]
 8002cb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cb4:	f023 0301 	bic.w	r3, r3, #1
 8002cb8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2110      	movs	r1, #16
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f002 fb33 	bl	800532c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cca:	e046      	b.n	8002d5a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cce:	015a      	lsls	r2, r3, #5
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cd8:	461a      	mov	r2, r3
 8002cda:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002cde:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce2:	015a      	lsls	r2, r3, #5
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cf0:	0151      	lsls	r1, r2, #5
 8002cf2:	69fa      	ldr	r2, [r7, #28]
 8002cf4:	440a      	add	r2, r1
 8002cf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002cfa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002cfe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d02:	015a      	lsls	r2, r3, #5
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	4413      	add	r3, r2
 8002d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002d12:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d16:	015a      	lsls	r2, r3, #5
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d24:	0151      	lsls	r1, r2, #5
 8002d26:	69fa      	ldr	r2, [r7, #28]
 8002d28:	440a      	add	r2, r1
 8002d2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002d2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d32:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d36:	015a      	lsls	r2, r3, #5
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d44:	0151      	lsls	r1, r2, #5
 8002d46:	69fa      	ldr	r2, [r7, #28]
 8002d48:	440a      	add	r2, r1
 8002d4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002d4e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002d52:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d56:	3301      	adds	r3, #1
 8002d58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d3b3      	bcc.n	8002ccc <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d6a:	69db      	ldr	r3, [r3, #28]
 8002d6c:	69fa      	ldr	r2, [r7, #28]
 8002d6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d72:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002d76:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d016      	beq.n	8002dae <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d8a:	69fa      	ldr	r2, [r7, #28]
 8002d8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d90:	f043 030b 	orr.w	r3, r3, #11
 8002d94:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da0:	69fa      	ldr	r2, [r7, #28]
 8002da2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002da6:	f043 030b 	orr.w	r3, r3, #11
 8002daa:	6453      	str	r3, [r2, #68]	; 0x44
 8002dac:	e015      	b.n	8002dda <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	69fa      	ldr	r2, [r7, #28]
 8002db8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dbc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002dc0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002dc4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	69fa      	ldr	r2, [r7, #28]
 8002dd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dd4:	f043 030b 	orr.w	r3, r3, #11
 8002dd8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	69fa      	ldr	r2, [r7, #28]
 8002de4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002de8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002dec:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6818      	ldr	r0, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002dfe:	461a      	mov	r2, r3
 8002e00:	f003 fb7a 	bl	80064f8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	695a      	ldr	r2, [r3, #20]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002e12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f003 faa9 	bl	8006370 <USB_ReadInterrupts>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e28:	d124      	bne.n	8002e74 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f003 fb3f 	bl	80064b2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f002 faf4 	bl	8005426 <USB_GetDevSpeed>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	461a      	mov	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681c      	ldr	r4, [r3, #0]
 8002e4a:	f001 fa29 	bl	80042a0 <HAL_RCC_GetHCLKFreq>
 8002e4e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	461a      	mov	r2, r3
 8002e58:	4620      	mov	r0, r4
 8002e5a:	f001 fff3 	bl	8004e44 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f005 fe69 	bl	8008b36 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	695a      	ldr	r2, [r3, #20]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002e72:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f003 fa79 	bl	8006370 <USB_ReadInterrupts>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	f003 0308 	and.w	r3, r3, #8
 8002e84:	2b08      	cmp	r3, #8
 8002e86:	d10a      	bne.n	8002e9e <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f005 fe46 	bl	8008b1a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	695a      	ldr	r2, [r3, #20]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f002 0208 	and.w	r2, r2, #8
 8002e9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f003 fa64 	bl	8006370 <USB_ReadInterrupts>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eae:	2b80      	cmp	r3, #128	; 0x80
 8002eb0:	d122      	bne.n	8002ef8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002eb2:	6a3b      	ldr	r3, [r7, #32]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002eba:	6a3b      	ldr	r3, [r7, #32]
 8002ebc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ec2:	e014      	b.n	8002eee <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002ec4:	6879      	ldr	r1, [r7, #4]
 8002ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ec8:	4613      	mov	r3, r2
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	4413      	add	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d105      	bne.n	8002ee8 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 fb27 	bl	8003536 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eea:	3301      	adds	r3, #1
 8002eec:	627b      	str	r3, [r7, #36]	; 0x24
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d3e5      	bcc.n	8002ec4 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f003 fa37 	bl	8006370 <USB_ReadInterrupts>
 8002f02:	4603      	mov	r3, r0
 8002f04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f0c:	d13b      	bne.n	8002f86 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f0e:	2301      	movs	r3, #1
 8002f10:	627b      	str	r3, [r7, #36]	; 0x24
 8002f12:	e02b      	b.n	8002f6c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f16:	015a      	lsls	r2, r3, #5
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f24:	6879      	ldr	r1, [r7, #4]
 8002f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f28:	4613      	mov	r3, r2
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	4413      	add	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	440b      	add	r3, r1
 8002f32:	3340      	adds	r3, #64	; 0x40
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d115      	bne.n	8002f66 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002f3a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	da12      	bge.n	8002f66 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002f40:	6879      	ldr	r1, [r7, #4]
 8002f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f44:	4613      	mov	r3, r2
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	4413      	add	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	333f      	adds	r3, #63	; 0x3f
 8002f50:	2201      	movs	r2, #1
 8002f52:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	4619      	mov	r1, r3
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 fae8 	bl	8003536 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f68:	3301      	adds	r3, #1
 8002f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d3ce      	bcc.n	8002f14 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	695a      	ldr	r2, [r3, #20]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002f84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f003 f9f0 	bl	8006370 <USB_ReadInterrupts>
 8002f90:	4603      	mov	r3, r0
 8002f92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f9a:	d155      	bne.n	8003048 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8002fa0:	e045      	b.n	800302e <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa4:	015a      	lsls	r2, r3, #5
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	4413      	add	r3, r2
 8002faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	00db      	lsls	r3, r3, #3
 8002fba:	4413      	add	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	440b      	add	r3, r1
 8002fc0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d12e      	bne.n	8003028 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002fca:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	da2b      	bge.n	8003028 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002fdc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d121      	bne.n	8003028 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe8:	4613      	mov	r3, r2
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	4413      	add	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	440b      	add	r3, r1
 8002ff2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003002:	6a3b      	ldr	r3, [r7, #32]
 8003004:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003006:	6a3b      	ldr	r3, [r7, #32]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10a      	bne.n	8003028 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	69fa      	ldr	r2, [r7, #28]
 800301c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003020:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003024:	6053      	str	r3, [r2, #4]
            break;
 8003026:	e007      	b.n	8003038 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302a:	3301      	adds	r3, #1
 800302c:	627b      	str	r3, [r7, #36]	; 0x24
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003034:	429a      	cmp	r2, r3
 8003036:	d3b4      	bcc.n	8002fa2 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	695a      	ldr	r2, [r3, #20]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003046:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f003 f98f 	bl	8006370 <USB_ReadInterrupts>
 8003052:	4603      	mov	r3, r0
 8003054:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800305c:	d10a      	bne.n	8003074 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f005 fdea 	bl	8008c38 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695a      	ldr	r2, [r3, #20]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003072:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4618      	mov	r0, r3
 800307a:	f003 f979 	bl	8006370 <USB_ReadInterrupts>
 800307e:	4603      	mov	r3, r0
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	2b04      	cmp	r3, #4
 8003086:	d115      	bne.n	80030b4 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	f003 0304 	and.w	r3, r3, #4
 8003096:	2b00      	cmp	r3, #0
 8003098:	d002      	beq.n	80030a0 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f005 fdda 	bl	8008c54 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6859      	ldr	r1, [r3, #4]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	430a      	orrs	r2, r1
 80030ae:	605a      	str	r2, [r3, #4]
 80030b0:	e000      	b.n	80030b4 <HAL_PCD_IRQHandler+0x938>
      return;
 80030b2:	bf00      	nop
    }
  }
}
 80030b4:	3734      	adds	r7, #52	; 0x34
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd90      	pop	{r4, r7, pc}

080030ba <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b082      	sub	sp, #8
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
 80030c2:	460b      	mov	r3, r1
 80030c4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d101      	bne.n	80030d4 <HAL_PCD_SetAddress+0x1a>
 80030d0:	2302      	movs	r3, #2
 80030d2:	e013      	b.n	80030fc <HAL_PCD_SetAddress+0x42>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	78fa      	ldrb	r2, [r7, #3]
 80030e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	78fa      	ldrb	r2, [r7, #3]
 80030ea:	4611      	mov	r1, r2
 80030ec:	4618      	mov	r0, r3
 80030ee:	f003 f8d7 	bl	80062a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	4608      	mov	r0, r1
 800310e:	4611      	mov	r1, r2
 8003110:	461a      	mov	r2, r3
 8003112:	4603      	mov	r3, r0
 8003114:	70fb      	strb	r3, [r7, #3]
 8003116:	460b      	mov	r3, r1
 8003118:	803b      	strh	r3, [r7, #0]
 800311a:	4613      	mov	r3, r2
 800311c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800311e:	2300      	movs	r3, #0
 8003120:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003122:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003126:	2b00      	cmp	r3, #0
 8003128:	da0f      	bge.n	800314a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800312a:	78fb      	ldrb	r3, [r7, #3]
 800312c:	f003 020f 	and.w	r2, r3, #15
 8003130:	4613      	mov	r3, r2
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	4413      	add	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	3338      	adds	r3, #56	; 0x38
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	4413      	add	r3, r2
 800313e:	3304      	adds	r3, #4
 8003140:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2201      	movs	r2, #1
 8003146:	705a      	strb	r2, [r3, #1]
 8003148:	e00f      	b.n	800316a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800314a:	78fb      	ldrb	r3, [r7, #3]
 800314c:	f003 020f 	and.w	r2, r3, #15
 8003150:	4613      	mov	r3, r2
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	4413      	add	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	4413      	add	r3, r2
 8003160:	3304      	adds	r3, #4
 8003162:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800316a:	78fb      	ldrb	r3, [r7, #3]
 800316c:	f003 030f 	and.w	r3, r3, #15
 8003170:	b2da      	uxtb	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003176:	883a      	ldrh	r2, [r7, #0]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	78ba      	ldrb	r2, [r7, #2]
 8003180:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	785b      	ldrb	r3, [r3, #1]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d004      	beq.n	8003194 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	b29a      	uxth	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003194:	78bb      	ldrb	r3, [r7, #2]
 8003196:	2b02      	cmp	r3, #2
 8003198:	d102      	bne.n	80031a0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d101      	bne.n	80031ae <HAL_PCD_EP_Open+0xaa>
 80031aa:	2302      	movs	r3, #2
 80031ac:	e00e      	b.n	80031cc <HAL_PCD_EP_Open+0xc8>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68f9      	ldr	r1, [r7, #12]
 80031bc:	4618      	mov	r0, r3
 80031be:	f002 f957 	bl	8005470 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80031ca:	7afb      	ldrb	r3, [r7, #11]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	460b      	mov	r3, r1
 80031de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	da0f      	bge.n	8003208 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031e8:	78fb      	ldrb	r3, [r7, #3]
 80031ea:	f003 020f 	and.w	r2, r3, #15
 80031ee:	4613      	mov	r3, r2
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	4413      	add	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	3338      	adds	r3, #56	; 0x38
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	4413      	add	r3, r2
 80031fc:	3304      	adds	r3, #4
 80031fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2201      	movs	r2, #1
 8003204:	705a      	strb	r2, [r3, #1]
 8003206:	e00f      	b.n	8003228 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003208:	78fb      	ldrb	r3, [r7, #3]
 800320a:	f003 020f 	and.w	r2, r3, #15
 800320e:	4613      	mov	r3, r2
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	4413      	add	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	4413      	add	r3, r2
 800321e:	3304      	adds	r3, #4
 8003220:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003228:	78fb      	ldrb	r3, [r7, #3]
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	b2da      	uxtb	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800323a:	2b01      	cmp	r3, #1
 800323c:	d101      	bne.n	8003242 <HAL_PCD_EP_Close+0x6e>
 800323e:	2302      	movs	r3, #2
 8003240:	e00e      	b.n	8003260 <HAL_PCD_EP_Close+0x8c>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68f9      	ldr	r1, [r7, #12]
 8003250:	4618      	mov	r0, r3
 8003252:	f002 f995 	bl	8005580 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	607a      	str	r2, [r7, #4]
 8003272:	603b      	str	r3, [r7, #0]
 8003274:	460b      	mov	r3, r1
 8003276:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003278:	7afb      	ldrb	r3, [r7, #11]
 800327a:	f003 020f 	and.w	r2, r3, #15
 800327e:	4613      	mov	r3, r2
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	4413      	add	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	4413      	add	r3, r2
 800328e:	3304      	adds	r3, #4
 8003290:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	2200      	movs	r2, #0
 80032a2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	2200      	movs	r2, #0
 80032a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032aa:	7afb      	ldrb	r3, [r7, #11]
 80032ac:	f003 030f 	and.w	r3, r3, #15
 80032b0:	b2da      	uxtb	r2, r3
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d102      	bne.n	80032c4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032c4:	7afb      	ldrb	r3, [r7, #11]
 80032c6:	f003 030f 	and.w	r3, r3, #15
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d109      	bne.n	80032e2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6818      	ldr	r0, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	461a      	mov	r2, r3
 80032da:	6979      	ldr	r1, [r7, #20]
 80032dc:	f002 fc74 	bl	8005bc8 <USB_EP0StartXfer>
 80032e0:	e008      	b.n	80032f4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6818      	ldr	r0, [r3, #0]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	461a      	mov	r2, r3
 80032ee:	6979      	ldr	r1, [r7, #20]
 80032f0:	f002 fa22 	bl	8005738 <USB_EPStartXfer>
  }

  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3718      	adds	r7, #24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032fe:	b480      	push	{r7}
 8003300:	b083      	sub	sp, #12
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
 8003306:	460b      	mov	r3, r1
 8003308:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800330a:	78fb      	ldrb	r3, [r7, #3]
 800330c:	f003 020f 	and.w	r2, r3, #15
 8003310:	6879      	ldr	r1, [r7, #4]
 8003312:	4613      	mov	r3, r2
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	4413      	add	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	440b      	add	r3, r1
 800331c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003320:	681b      	ldr	r3, [r3, #0]
}
 8003322:	4618      	mov	r0, r3
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b086      	sub	sp, #24
 8003332:	af00      	add	r7, sp, #0
 8003334:	60f8      	str	r0, [r7, #12]
 8003336:	607a      	str	r2, [r7, #4]
 8003338:	603b      	str	r3, [r7, #0]
 800333a:	460b      	mov	r3, r1
 800333c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800333e:	7afb      	ldrb	r3, [r7, #11]
 8003340:	f003 020f 	and.w	r2, r3, #15
 8003344:	4613      	mov	r3, r2
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	4413      	add	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	3338      	adds	r3, #56	; 0x38
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	4413      	add	r3, r2
 8003352:	3304      	adds	r3, #4
 8003354:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	2200      	movs	r2, #0
 8003366:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	2201      	movs	r2, #1
 800336c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800336e:	7afb      	ldrb	r3, [r7, #11]
 8003370:	f003 030f 	and.w	r3, r3, #15
 8003374:	b2da      	uxtb	r2, r3
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d102      	bne.n	8003388 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003388:	7afb      	ldrb	r3, [r7, #11]
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	2b00      	cmp	r3, #0
 8003390:	d109      	bne.n	80033a6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6818      	ldr	r0, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	b2db      	uxtb	r3, r3
 800339c:	461a      	mov	r2, r3
 800339e:	6979      	ldr	r1, [r7, #20]
 80033a0:	f002 fc12 	bl	8005bc8 <USB_EP0StartXfer>
 80033a4:	e008      	b.n	80033b8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6818      	ldr	r0, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	461a      	mov	r2, r3
 80033b2:	6979      	ldr	r1, [r7, #20]
 80033b4:	f002 f9c0 	bl	8005738 <USB_EPStartXfer>
  }

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3718      	adds	r7, #24
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b084      	sub	sp, #16
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
 80033ca:	460b      	mov	r3, r1
 80033cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80033ce:	78fb      	ldrb	r3, [r7, #3]
 80033d0:	f003 020f 	and.w	r2, r3, #15
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d901      	bls.n	80033e0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e050      	b.n	8003482 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	da0f      	bge.n	8003408 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033e8:	78fb      	ldrb	r3, [r7, #3]
 80033ea:	f003 020f 	and.w	r2, r3, #15
 80033ee:	4613      	mov	r3, r2
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	4413      	add	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	3338      	adds	r3, #56	; 0x38
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	4413      	add	r3, r2
 80033fc:	3304      	adds	r3, #4
 80033fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2201      	movs	r2, #1
 8003404:	705a      	strb	r2, [r3, #1]
 8003406:	e00d      	b.n	8003424 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003408:	78fa      	ldrb	r2, [r7, #3]
 800340a:	4613      	mov	r3, r2
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	4413      	add	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	4413      	add	r3, r2
 800341a:	3304      	adds	r3, #4
 800341c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2201      	movs	r2, #1
 8003428:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800342a:	78fb      	ldrb	r3, [r7, #3]
 800342c:	f003 030f 	and.w	r3, r3, #15
 8003430:	b2da      	uxtb	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800343c:	2b01      	cmp	r3, #1
 800343e:	d101      	bne.n	8003444 <HAL_PCD_EP_SetStall+0x82>
 8003440:	2302      	movs	r3, #2
 8003442:	e01e      	b.n	8003482 <HAL_PCD_EP_SetStall+0xc0>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68f9      	ldr	r1, [r7, #12]
 8003452:	4618      	mov	r0, r3
 8003454:	f002 fe50 	bl	80060f8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003458:	78fb      	ldrb	r3, [r7, #3]
 800345a:	f003 030f 	and.w	r3, r3, #15
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10a      	bne.n	8003478 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6818      	ldr	r0, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	b2d9      	uxtb	r1, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003472:	461a      	mov	r2, r3
 8003474:	f003 f840 	bl	80064f8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b084      	sub	sp, #16
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
 8003492:	460b      	mov	r3, r1
 8003494:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003496:	78fb      	ldrb	r3, [r7, #3]
 8003498:	f003 020f 	and.w	r2, r3, #15
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d901      	bls.n	80034a8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e042      	b.n	800352e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80034a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	da0f      	bge.n	80034d0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034b0:	78fb      	ldrb	r3, [r7, #3]
 80034b2:	f003 020f 	and.w	r2, r3, #15
 80034b6:	4613      	mov	r3, r2
 80034b8:	00db      	lsls	r3, r3, #3
 80034ba:	4413      	add	r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	3338      	adds	r3, #56	; 0x38
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	4413      	add	r3, r2
 80034c4:	3304      	adds	r3, #4
 80034c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2201      	movs	r2, #1
 80034cc:	705a      	strb	r2, [r3, #1]
 80034ce:	e00f      	b.n	80034f0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034d0:	78fb      	ldrb	r3, [r7, #3]
 80034d2:	f003 020f 	and.w	r2, r3, #15
 80034d6:	4613      	mov	r3, r2
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	4413      	add	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	4413      	add	r3, r2
 80034e6:	3304      	adds	r3, #4
 80034e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034f6:	78fb      	ldrb	r3, [r7, #3]
 80034f8:	f003 030f 	and.w	r3, r3, #15
 80034fc:	b2da      	uxtb	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003508:	2b01      	cmp	r3, #1
 800350a:	d101      	bne.n	8003510 <HAL_PCD_EP_ClrStall+0x86>
 800350c:	2302      	movs	r3, #2
 800350e:	e00e      	b.n	800352e <HAL_PCD_EP_ClrStall+0xa4>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68f9      	ldr	r1, [r7, #12]
 800351e:	4618      	mov	r0, r3
 8003520:	f002 fe58 	bl	80061d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b084      	sub	sp, #16
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
 800353e:	460b      	mov	r3, r1
 8003540:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003542:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003546:	2b00      	cmp	r3, #0
 8003548:	da0c      	bge.n	8003564 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800354a:	78fb      	ldrb	r3, [r7, #3]
 800354c:	f003 020f 	and.w	r2, r3, #15
 8003550:	4613      	mov	r3, r2
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	4413      	add	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	3338      	adds	r3, #56	; 0x38
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	4413      	add	r3, r2
 800355e:	3304      	adds	r3, #4
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	e00c      	b.n	800357e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003564:	78fb      	ldrb	r3, [r7, #3]
 8003566:	f003 020f 	and.w	r2, r3, #15
 800356a:	4613      	mov	r3, r2
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	4413      	add	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	4413      	add	r3, r2
 800357a:	3304      	adds	r3, #4
 800357c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68f9      	ldr	r1, [r7, #12]
 8003584:	4618      	mov	r0, r3
 8003586:	f002 fc77 	bl	8005e78 <USB_EPStopXfer>
 800358a:	4603      	mov	r3, r0
 800358c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800358e:	7afb      	ldrb	r3, [r7, #11]
}
 8003590:	4618      	mov	r0, r3
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b08a      	sub	sp, #40	; 0x28
 800359c:	af02      	add	r7, sp, #8
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	4613      	mov	r3, r2
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	4413      	add	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	3338      	adds	r3, #56	; 0x38
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	4413      	add	r3, r2
 80035bc:	3304      	adds	r3, #4
 80035be:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6a1a      	ldr	r2, [r3, #32]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d901      	bls.n	80035d0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e06c      	b.n	80036aa <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	699a      	ldr	r2, [r3, #24]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	69fa      	ldr	r2, [r7, #28]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d902      	bls.n	80035ec <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	3303      	adds	r3, #3
 80035f0:	089b      	lsrs	r3, r3, #2
 80035f2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035f4:	e02b      	b.n	800364e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	699a      	ldr	r2, [r3, #24]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	69fa      	ldr	r2, [r7, #28]
 8003608:	429a      	cmp	r2, r3
 800360a:	d902      	bls.n	8003612 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	3303      	adds	r3, #3
 8003616:	089b      	lsrs	r3, r3, #2
 8003618:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6919      	ldr	r1, [r3, #16]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	b2da      	uxtb	r2, r3
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800362a:	b2db      	uxtb	r3, r3
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	4603      	mov	r3, r0
 8003630:	6978      	ldr	r0, [r7, #20]
 8003632:	f002 fccb 	bl	8005fcc <USB_WritePacket>

    ep->xfer_buff  += len;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	691a      	ldr	r2, [r3, #16]
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	441a      	add	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6a1a      	ldr	r2, [r3, #32]
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	441a      	add	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	015a      	lsls	r2, r3, #5
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	4413      	add	r3, r2
 8003656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	b29b      	uxth	r3, r3
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	429a      	cmp	r2, r3
 8003662:	d809      	bhi.n	8003678 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6a1a      	ldr	r2, [r3, #32]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800366c:	429a      	cmp	r2, r3
 800366e:	d203      	bcs.n	8003678 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1be      	bne.n	80035f6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	699a      	ldr	r2, [r3, #24]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	429a      	cmp	r2, r3
 8003682:	d811      	bhi.n	80036a8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	f003 030f 	and.w	r3, r3, #15
 800368a:	2201      	movs	r2, #1
 800368c:	fa02 f303 	lsl.w	r3, r2, r3
 8003690:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003698:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	43db      	mvns	r3, r3
 800369e:	6939      	ldr	r1, [r7, #16]
 80036a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036a4:	4013      	ands	r3, r2
 80036a6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3720      	adds	r7, #32
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
	...

080036b4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b088      	sub	sp, #32
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	333c      	adds	r3, #60	; 0x3c
 80036cc:	3304      	adds	r3, #4
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	015a      	lsls	r2, r3, #5
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	4413      	add	r3, r2
 80036da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d17b      	bne.n	80037e2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	f003 0308 	and.w	r3, r3, #8
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d015      	beq.n	8003720 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	4a61      	ldr	r2, [pc, #388]	; (800387c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	f240 80b9 	bls.w	8003870 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003704:	2b00      	cmp	r3, #0
 8003706:	f000 80b3 	beq.w	8003870 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	015a      	lsls	r2, r3, #5
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	4413      	add	r3, r2
 8003712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003716:	461a      	mov	r2, r3
 8003718:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800371c:	6093      	str	r3, [r2, #8]
 800371e:	e0a7      	b.n	8003870 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	f003 0320 	and.w	r3, r3, #32
 8003726:	2b00      	cmp	r3, #0
 8003728:	d009      	beq.n	800373e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	015a      	lsls	r2, r3, #5
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	4413      	add	r3, r2
 8003732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003736:	461a      	mov	r2, r3
 8003738:	2320      	movs	r3, #32
 800373a:	6093      	str	r3, [r2, #8]
 800373c:	e098      	b.n	8003870 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003744:	2b00      	cmp	r3, #0
 8003746:	f040 8093 	bne.w	8003870 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	4a4b      	ldr	r2, [pc, #300]	; (800387c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d90f      	bls.n	8003772 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00a      	beq.n	8003772 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	015a      	lsls	r2, r3, #5
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	4413      	add	r3, r2
 8003764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003768:	461a      	mov	r2, r3
 800376a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800376e:	6093      	str	r3, [r2, #8]
 8003770:	e07e      	b.n	8003870 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	4613      	mov	r3, r2
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	4413      	add	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	4413      	add	r3, r2
 8003784:	3304      	adds	r3, #4
 8003786:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	69da      	ldr	r2, [r3, #28]
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	0159      	lsls	r1, r3, #5
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	440b      	add	r3, r1
 8003794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800379e:	1ad2      	subs	r2, r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d114      	bne.n	80037d4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d109      	bne.n	80037c6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6818      	ldr	r0, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80037bc:	461a      	mov	r2, r3
 80037be:	2101      	movs	r1, #1
 80037c0:	f002 fe9a 	bl	80064f8 <USB_EP0_OutStart>
 80037c4:	e006      	b.n	80037d4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	691a      	ldr	r2, [r3, #16]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	441a      	add	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	4619      	mov	r1, r3
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f005 f968 	bl	8008ab0 <HAL_PCD_DataOutStageCallback>
 80037e0:	e046      	b.n	8003870 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	4a26      	ldr	r2, [pc, #152]	; (8003880 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d124      	bne.n	8003834 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00a      	beq.n	800380a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	015a      	lsls	r2, r3, #5
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003800:	461a      	mov	r2, r3
 8003802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003806:	6093      	str	r3, [r2, #8]
 8003808:	e032      	b.n	8003870 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	f003 0320 	and.w	r3, r3, #32
 8003810:	2b00      	cmp	r3, #0
 8003812:	d008      	beq.n	8003826 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	015a      	lsls	r2, r3, #5
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	4413      	add	r3, r2
 800381c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003820:	461a      	mov	r2, r3
 8003822:	2320      	movs	r3, #32
 8003824:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	b2db      	uxtb	r3, r3
 800382a:	4619      	mov	r1, r3
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f005 f93f 	bl	8008ab0 <HAL_PCD_DataOutStageCallback>
 8003832:	e01d      	b.n	8003870 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d114      	bne.n	8003864 <PCD_EP_OutXfrComplete_int+0x1b0>
 800383a:	6879      	ldr	r1, [r7, #4]
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	4613      	mov	r3, r2
 8003840:	00db      	lsls	r3, r3, #3
 8003842:	4413      	add	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	440b      	add	r3, r1
 8003848:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d108      	bne.n	8003864 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6818      	ldr	r0, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800385c:	461a      	mov	r2, r3
 800385e:	2100      	movs	r1, #0
 8003860:	f002 fe4a 	bl	80064f8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	b2db      	uxtb	r3, r3
 8003868:	4619      	mov	r1, r3
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f005 f920 	bl	8008ab0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3720      	adds	r7, #32
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	4f54300a 	.word	0x4f54300a
 8003880:	4f54310a 	.word	0x4f54310a

08003884 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	333c      	adds	r3, #60	; 0x3c
 800389c:	3304      	adds	r3, #4
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	015a      	lsls	r2, r3, #5
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	4413      	add	r3, r2
 80038aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	4a15      	ldr	r2, [pc, #84]	; (800390c <PCD_EP_OutSetupPacket_int+0x88>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d90e      	bls.n	80038d8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d009      	beq.n	80038d8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	015a      	lsls	r2, r3, #5
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	4413      	add	r3, r2
 80038cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038d0:	461a      	mov	r2, r3
 80038d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038d6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f005 f8d7 	bl	8008a8c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	4a0a      	ldr	r2, [pc, #40]	; (800390c <PCD_EP_OutSetupPacket_int+0x88>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d90c      	bls.n	8003900 <PCD_EP_OutSetupPacket_int+0x7c>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d108      	bne.n	8003900 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6818      	ldr	r0, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80038f8:	461a      	mov	r2, r3
 80038fa:	2101      	movs	r1, #1
 80038fc:	f002 fdfc 	bl	80064f8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3718      	adds	r7, #24
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	4f54300a 	.word	0x4f54300a

08003910 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	460b      	mov	r3, r1
 800391a:	70fb      	strb	r3, [r7, #3]
 800391c:	4613      	mov	r3, r2
 800391e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003926:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003928:	78fb      	ldrb	r3, [r7, #3]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d107      	bne.n	800393e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800392e:	883b      	ldrh	r3, [r7, #0]
 8003930:	0419      	lsls	r1, r3, #16
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68ba      	ldr	r2, [r7, #8]
 8003938:	430a      	orrs	r2, r1
 800393a:	629a      	str	r2, [r3, #40]	; 0x28
 800393c:	e028      	b.n	8003990 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003944:	0c1b      	lsrs	r3, r3, #16
 8003946:	68ba      	ldr	r2, [r7, #8]
 8003948:	4413      	add	r3, r2
 800394a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800394c:	2300      	movs	r3, #0
 800394e:	73fb      	strb	r3, [r7, #15]
 8003950:	e00d      	b.n	800396e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	7bfb      	ldrb	r3, [r7, #15]
 8003958:	3340      	adds	r3, #64	; 0x40
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	4413      	add	r3, r2
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	0c1b      	lsrs	r3, r3, #16
 8003962:	68ba      	ldr	r2, [r7, #8]
 8003964:	4413      	add	r3, r2
 8003966:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003968:	7bfb      	ldrb	r3, [r7, #15]
 800396a:	3301      	adds	r3, #1
 800396c:	73fb      	strb	r3, [r7, #15]
 800396e:	7bfa      	ldrb	r2, [r7, #15]
 8003970:	78fb      	ldrb	r3, [r7, #3]
 8003972:	3b01      	subs	r3, #1
 8003974:	429a      	cmp	r2, r3
 8003976:	d3ec      	bcc.n	8003952 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003978:	883b      	ldrh	r3, [r7, #0]
 800397a:	0418      	lsls	r0, r3, #16
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6819      	ldr	r1, [r3, #0]
 8003980:	78fb      	ldrb	r3, [r7, #3]
 8003982:	3b01      	subs	r3, #1
 8003984:	68ba      	ldr	r2, [r7, #8]
 8003986:	4302      	orrs	r2, r0
 8003988:	3340      	adds	r3, #64	; 0x40
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	440b      	add	r3, r1
 800398e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3714      	adds	r7, #20
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr

0800399e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800399e:	b480      	push	{r7}
 80039a0:	b083      	sub	sp, #12
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
 80039a6:	460b      	mov	r3, r1
 80039a8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	887a      	ldrh	r2, [r7, #2]
 80039b0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	460b      	mov	r3, r1
 80039ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e267      	b.n	8003eba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d075      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039f6:	4b88      	ldr	r3, [pc, #544]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 030c 	and.w	r3, r3, #12
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	d00c      	beq.n	8003a1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a02:	4b85      	ldr	r3, [pc, #532]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a0a:	2b08      	cmp	r3, #8
 8003a0c:	d112      	bne.n	8003a34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a0e:	4b82      	ldr	r3, [pc, #520]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a1a:	d10b      	bne.n	8003a34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a1c:	4b7e      	ldr	r3, [pc, #504]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d05b      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x108>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d157      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e242      	b.n	8003eba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a3c:	d106      	bne.n	8003a4c <HAL_RCC_OscConfig+0x74>
 8003a3e:	4b76      	ldr	r3, [pc, #472]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a75      	ldr	r2, [pc, #468]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	e01d      	b.n	8003a88 <HAL_RCC_OscConfig+0xb0>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a54:	d10c      	bne.n	8003a70 <HAL_RCC_OscConfig+0x98>
 8003a56:	4b70      	ldr	r3, [pc, #448]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a6f      	ldr	r2, [pc, #444]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003a5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a60:	6013      	str	r3, [r2, #0]
 8003a62:	4b6d      	ldr	r3, [pc, #436]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a6c      	ldr	r2, [pc, #432]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a6c:	6013      	str	r3, [r2, #0]
 8003a6e:	e00b      	b.n	8003a88 <HAL_RCC_OscConfig+0xb0>
 8003a70:	4b69      	ldr	r3, [pc, #420]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a68      	ldr	r2, [pc, #416]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003a76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a7a:	6013      	str	r3, [r2, #0]
 8003a7c:	4b66      	ldr	r3, [pc, #408]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a65      	ldr	r2, [pc, #404]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003a82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d013      	beq.n	8003ab8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a90:	f7fd fbe6 	bl	8001260 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a98:	f7fd fbe2 	bl	8001260 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b64      	cmp	r3, #100	; 0x64
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e207      	b.n	8003eba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aaa:	4b5b      	ldr	r3, [pc, #364]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0f0      	beq.n	8003a98 <HAL_RCC_OscConfig+0xc0>
 8003ab6:	e014      	b.n	8003ae2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab8:	f7fd fbd2 	bl	8001260 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ac0:	f7fd fbce 	bl	8001260 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b64      	cmp	r3, #100	; 0x64
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e1f3      	b.n	8003eba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ad2:	4b51      	ldr	r3, [pc, #324]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1f0      	bne.n	8003ac0 <HAL_RCC_OscConfig+0xe8>
 8003ade:	e000      	b.n	8003ae2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d063      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003aee:	4b4a      	ldr	r3, [pc, #296]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 030c 	and.w	r3, r3, #12
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00b      	beq.n	8003b12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003afa:	4b47      	ldr	r3, [pc, #284]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b02:	2b08      	cmp	r3, #8
 8003b04:	d11c      	bne.n	8003b40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b06:	4b44      	ldr	r3, [pc, #272]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d116      	bne.n	8003b40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b12:	4b41      	ldr	r3, [pc, #260]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d005      	beq.n	8003b2a <HAL_RCC_OscConfig+0x152>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d001      	beq.n	8003b2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e1c7      	b.n	8003eba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b2a:	4b3b      	ldr	r3, [pc, #236]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	4937      	ldr	r1, [pc, #220]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b3e:	e03a      	b.n	8003bb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d020      	beq.n	8003b8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b48:	4b34      	ldr	r3, [pc, #208]	; (8003c1c <HAL_RCC_OscConfig+0x244>)
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4e:	f7fd fb87 	bl	8001260 <HAL_GetTick>
 8003b52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b54:	e008      	b.n	8003b68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b56:	f7fd fb83 	bl	8001260 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e1a8      	b.n	8003eba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b68:	4b2b      	ldr	r3, [pc, #172]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d0f0      	beq.n	8003b56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b74:	4b28      	ldr	r3, [pc, #160]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	4925      	ldr	r1, [pc, #148]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	600b      	str	r3, [r1, #0]
 8003b88:	e015      	b.n	8003bb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b8a:	4b24      	ldr	r3, [pc, #144]	; (8003c1c <HAL_RCC_OscConfig+0x244>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b90:	f7fd fb66 	bl	8001260 <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b98:	f7fd fb62 	bl	8001260 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e187      	b.n	8003eba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003baa:	4b1b      	ldr	r3, [pc, #108]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1f0      	bne.n	8003b98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0308 	and.w	r3, r3, #8
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d036      	beq.n	8003c30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d016      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bca:	4b15      	ldr	r3, [pc, #84]	; (8003c20 <HAL_RCC_OscConfig+0x248>)
 8003bcc:	2201      	movs	r2, #1
 8003bce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd0:	f7fd fb46 	bl	8001260 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bd8:	f7fd fb42 	bl	8001260 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e167      	b.n	8003eba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bea:	4b0b      	ldr	r3, [pc, #44]	; (8003c18 <HAL_RCC_OscConfig+0x240>)
 8003bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0f0      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x200>
 8003bf6:	e01b      	b.n	8003c30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bf8:	4b09      	ldr	r3, [pc, #36]	; (8003c20 <HAL_RCC_OscConfig+0x248>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bfe:	f7fd fb2f 	bl	8001260 <HAL_GetTick>
 8003c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c04:	e00e      	b.n	8003c24 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c06:	f7fd fb2b 	bl	8001260 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d907      	bls.n	8003c24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e150      	b.n	8003eba <HAL_RCC_OscConfig+0x4e2>
 8003c18:	40023800 	.word	0x40023800
 8003c1c:	42470000 	.word	0x42470000
 8003c20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c24:	4b88      	ldr	r3, [pc, #544]	; (8003e48 <HAL_RCC_OscConfig+0x470>)
 8003c26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1ea      	bne.n	8003c06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0304 	and.w	r3, r3, #4
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f000 8097 	beq.w	8003d6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c42:	4b81      	ldr	r3, [pc, #516]	; (8003e48 <HAL_RCC_OscConfig+0x470>)
 8003c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10f      	bne.n	8003c6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c4e:	2300      	movs	r3, #0
 8003c50:	60bb      	str	r3, [r7, #8]
 8003c52:	4b7d      	ldr	r3, [pc, #500]	; (8003e48 <HAL_RCC_OscConfig+0x470>)
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	4a7c      	ldr	r2, [pc, #496]	; (8003e48 <HAL_RCC_OscConfig+0x470>)
 8003c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c5e:	4b7a      	ldr	r3, [pc, #488]	; (8003e48 <HAL_RCC_OscConfig+0x470>)
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c66:	60bb      	str	r3, [r7, #8]
 8003c68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c6e:	4b77      	ldr	r3, [pc, #476]	; (8003e4c <HAL_RCC_OscConfig+0x474>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d118      	bne.n	8003cac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c7a:	4b74      	ldr	r3, [pc, #464]	; (8003e4c <HAL_RCC_OscConfig+0x474>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a73      	ldr	r2, [pc, #460]	; (8003e4c <HAL_RCC_OscConfig+0x474>)
 8003c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c86:	f7fd faeb 	bl	8001260 <HAL_GetTick>
 8003c8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c8c:	e008      	b.n	8003ca0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c8e:	f7fd fae7 	bl	8001260 <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d901      	bls.n	8003ca0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e10c      	b.n	8003eba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca0:	4b6a      	ldr	r3, [pc, #424]	; (8003e4c <HAL_RCC_OscConfig+0x474>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d0f0      	beq.n	8003c8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d106      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x2ea>
 8003cb4:	4b64      	ldr	r3, [pc, #400]	; (8003e48 <HAL_RCC_OscConfig+0x470>)
 8003cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb8:	4a63      	ldr	r2, [pc, #396]	; (8003e48 <HAL_RCC_OscConfig+0x470>)
 8003cba:	f043 0301 	orr.w	r3, r3, #1
 8003cbe:	6713      	str	r3, [r2, #112]	; 0x70
 8003cc0:	e01c      	b.n	8003cfc <HAL_RCC_OscConfig+0x324>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	2b05      	cmp	r3, #5
 8003cc8:	d10c      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x30c>
 8003cca:	4b5f      	ldr	r3, [pc, #380]	; (8003e48 <HAL_RCC_OscConfig+0x470>)
 8003ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cce:	4a5e      	ldr	r2, [pc, #376]	; (8003e48 <HAL_RCC_OscConfig+0x470>)
 8003cd0:	f043 0304 	orr.w	r3, r3, #4
 8003cd4:	6713      	str	r3, [r2, #112]	; 0x70
 8003cd6:	4b5c      	ldr	r3, [pc, #368]	; (8003e48 <HAL_RCC_OscConfig+0x470>)
 8003cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cda:	4a5b      	ldr	r2, [pc, #364]	; (8003e48 <HAL_RCC_OscConfig+0x470>)
 8003cdc:	f043 0301 	orr.w	r3, r3, #1
 8003ce0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ce2:	e00b      	b.n	8003cfc <HAL_RCC_OscConfig+0x324>
 8003ce4:	4b58      	ldr	r3, [pc, #352]	; (8003e48 <HAL_RCC_OscConfig+0x470>)
 8003ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce8:	4a57      	ldr	r2, [pc, #348]	; (8003e48 <HAL_RCC_OscConfig+0x470>)
 8003cea:	f023 0301 	bic.w	r3, r3, #1
 8003cee:	6713      	str	r3, [r2, #112]	; 0x70
 8003cf0:	4b55      	ldr	r3, [pc, #340]	; (8003e48 <HAL_RCC_OscConfig+0x470>)
 8003cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf4:	4a54      	ldr	r2, [pc, #336]	; (8003e48 <HAL_RCC_OscConfig+0x470>)
 8003cf6:	f023 0304 	bic.w	r3, r3, #4
 8003cfa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d015      	beq.n	8003d30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d04:	f7fd faac 	bl	8001260 <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d0a:	e00a      	b.n	8003d22 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d0c:	f7fd faa8 	bl	8001260 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e0cb      	b.n	8003eba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d22:	4b49      	ldr	r3, [pc, #292]	; (8003e48 <HAL_RCC_OscConfig+0x470>)
 8003d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d0ee      	beq.n	8003d0c <HAL_RCC_OscConfig+0x334>
 8003d2e:	e014      	b.n	8003d5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d30:	f7fd fa96 	bl	8001260 <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d36:	e00a      	b.n	8003d4e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d38:	f7fd fa92 	bl	8001260 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e0b5      	b.n	8003eba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d4e:	4b3e      	ldr	r3, [pc, #248]	; (8003e48 <HAL_RCC_OscConfig+0x470>)
 8003d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1ee      	bne.n	8003d38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d5a:	7dfb      	ldrb	r3, [r7, #23]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d105      	bne.n	8003d6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d60:	4b39      	ldr	r3, [pc, #228]	; (8003e48 <HAL_RCC_OscConfig+0x470>)
 8003d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d64:	4a38      	ldr	r2, [pc, #224]	; (8003e48 <HAL_RCC_OscConfig+0x470>)
 8003d66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 80a1 	beq.w	8003eb8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d76:	4b34      	ldr	r3, [pc, #208]	; (8003e48 <HAL_RCC_OscConfig+0x470>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f003 030c 	and.w	r3, r3, #12
 8003d7e:	2b08      	cmp	r3, #8
 8003d80:	d05c      	beq.n	8003e3c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d141      	bne.n	8003e0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d8a:	4b31      	ldr	r3, [pc, #196]	; (8003e50 <HAL_RCC_OscConfig+0x478>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d90:	f7fd fa66 	bl	8001260 <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d98:	f7fd fa62 	bl	8001260 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e087      	b.n	8003eba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003daa:	4b27      	ldr	r3, [pc, #156]	; (8003e48 <HAL_RCC_OscConfig+0x470>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1f0      	bne.n	8003d98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	69da      	ldr	r2, [r3, #28]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc4:	019b      	lsls	r3, r3, #6
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dcc:	085b      	lsrs	r3, r3, #1
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	041b      	lsls	r3, r3, #16
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd8:	061b      	lsls	r3, r3, #24
 8003dda:	491b      	ldr	r1, [pc, #108]	; (8003e48 <HAL_RCC_OscConfig+0x470>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003de0:	4b1b      	ldr	r3, [pc, #108]	; (8003e50 <HAL_RCC_OscConfig+0x478>)
 8003de2:	2201      	movs	r2, #1
 8003de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de6:	f7fd fa3b 	bl	8001260 <HAL_GetTick>
 8003dea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dec:	e008      	b.n	8003e00 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dee:	f7fd fa37 	bl	8001260 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d901      	bls.n	8003e00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e05c      	b.n	8003eba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e00:	4b11      	ldr	r3, [pc, #68]	; (8003e48 <HAL_RCC_OscConfig+0x470>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d0f0      	beq.n	8003dee <HAL_RCC_OscConfig+0x416>
 8003e0c:	e054      	b.n	8003eb8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e0e:	4b10      	ldr	r3, [pc, #64]	; (8003e50 <HAL_RCC_OscConfig+0x478>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e14:	f7fd fa24 	bl	8001260 <HAL_GetTick>
 8003e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e1a:	e008      	b.n	8003e2e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e1c:	f7fd fa20 	bl	8001260 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e045      	b.n	8003eba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e2e:	4b06      	ldr	r3, [pc, #24]	; (8003e48 <HAL_RCC_OscConfig+0x470>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1f0      	bne.n	8003e1c <HAL_RCC_OscConfig+0x444>
 8003e3a:	e03d      	b.n	8003eb8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d107      	bne.n	8003e54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e038      	b.n	8003eba <HAL_RCC_OscConfig+0x4e2>
 8003e48:	40023800 	.word	0x40023800
 8003e4c:	40007000 	.word	0x40007000
 8003e50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e54:	4b1b      	ldr	r3, [pc, #108]	; (8003ec4 <HAL_RCC_OscConfig+0x4ec>)
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d028      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d121      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d11a      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e84:	4013      	ands	r3, r2
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d111      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9a:	085b      	lsrs	r3, r3, #1
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d107      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d001      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e000      	b.n	8003eba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3718      	adds	r7, #24
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	40023800 	.word	0x40023800

08003ec8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d101      	bne.n	8003edc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e0cc      	b.n	8004076 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003edc:	4b68      	ldr	r3, [pc, #416]	; (8004080 <HAL_RCC_ClockConfig+0x1b8>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0307 	and.w	r3, r3, #7
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d90c      	bls.n	8003f04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eea:	4b65      	ldr	r3, [pc, #404]	; (8004080 <HAL_RCC_ClockConfig+0x1b8>)
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	b2d2      	uxtb	r2, r2
 8003ef0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ef2:	4b63      	ldr	r3, [pc, #396]	; (8004080 <HAL_RCC_ClockConfig+0x1b8>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0307 	and.w	r3, r3, #7
 8003efa:	683a      	ldr	r2, [r7, #0]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d001      	beq.n	8003f04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e0b8      	b.n	8004076 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d020      	beq.n	8003f52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0304 	and.w	r3, r3, #4
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d005      	beq.n	8003f28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f1c:	4b59      	ldr	r3, [pc, #356]	; (8004084 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	4a58      	ldr	r2, [pc, #352]	; (8004084 <HAL_RCC_ClockConfig+0x1bc>)
 8003f22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0308 	and.w	r3, r3, #8
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d005      	beq.n	8003f40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f34:	4b53      	ldr	r3, [pc, #332]	; (8004084 <HAL_RCC_ClockConfig+0x1bc>)
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	4a52      	ldr	r2, [pc, #328]	; (8004084 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f40:	4b50      	ldr	r3, [pc, #320]	; (8004084 <HAL_RCC_ClockConfig+0x1bc>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	494d      	ldr	r1, [pc, #308]	; (8004084 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d044      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d107      	bne.n	8003f76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f66:	4b47      	ldr	r3, [pc, #284]	; (8004084 <HAL_RCC_ClockConfig+0x1bc>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d119      	bne.n	8003fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e07f      	b.n	8004076 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d003      	beq.n	8003f86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f82:	2b03      	cmp	r3, #3
 8003f84:	d107      	bne.n	8003f96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f86:	4b3f      	ldr	r3, [pc, #252]	; (8004084 <HAL_RCC_ClockConfig+0x1bc>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d109      	bne.n	8003fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e06f      	b.n	8004076 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f96:	4b3b      	ldr	r3, [pc, #236]	; (8004084 <HAL_RCC_ClockConfig+0x1bc>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e067      	b.n	8004076 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fa6:	4b37      	ldr	r3, [pc, #220]	; (8004084 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f023 0203 	bic.w	r2, r3, #3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	4934      	ldr	r1, [pc, #208]	; (8004084 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fb8:	f7fd f952 	bl	8001260 <HAL_GetTick>
 8003fbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fbe:	e00a      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fc0:	f7fd f94e 	bl	8001260 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e04f      	b.n	8004076 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fd6:	4b2b      	ldr	r3, [pc, #172]	; (8004084 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f003 020c 	and.w	r2, r3, #12
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d1eb      	bne.n	8003fc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fe8:	4b25      	ldr	r3, [pc, #148]	; (8004080 <HAL_RCC_ClockConfig+0x1b8>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0307 	and.w	r3, r3, #7
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d20c      	bcs.n	8004010 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ff6:	4b22      	ldr	r3, [pc, #136]	; (8004080 <HAL_RCC_ClockConfig+0x1b8>)
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	b2d2      	uxtb	r2, r2
 8003ffc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ffe:	4b20      	ldr	r3, [pc, #128]	; (8004080 <HAL_RCC_ClockConfig+0x1b8>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0307 	and.w	r3, r3, #7
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	429a      	cmp	r2, r3
 800400a:	d001      	beq.n	8004010 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e032      	b.n	8004076 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0304 	and.w	r3, r3, #4
 8004018:	2b00      	cmp	r3, #0
 800401a:	d008      	beq.n	800402e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800401c:	4b19      	ldr	r3, [pc, #100]	; (8004084 <HAL_RCC_ClockConfig+0x1bc>)
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	4916      	ldr	r1, [pc, #88]	; (8004084 <HAL_RCC_ClockConfig+0x1bc>)
 800402a:	4313      	orrs	r3, r2
 800402c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0308 	and.w	r3, r3, #8
 8004036:	2b00      	cmp	r3, #0
 8004038:	d009      	beq.n	800404e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800403a:	4b12      	ldr	r3, [pc, #72]	; (8004084 <HAL_RCC_ClockConfig+0x1bc>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	490e      	ldr	r1, [pc, #56]	; (8004084 <HAL_RCC_ClockConfig+0x1bc>)
 800404a:	4313      	orrs	r3, r2
 800404c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800404e:	f000 f821 	bl	8004094 <HAL_RCC_GetSysClockFreq>
 8004052:	4602      	mov	r2, r0
 8004054:	4b0b      	ldr	r3, [pc, #44]	; (8004084 <HAL_RCC_ClockConfig+0x1bc>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	091b      	lsrs	r3, r3, #4
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	490a      	ldr	r1, [pc, #40]	; (8004088 <HAL_RCC_ClockConfig+0x1c0>)
 8004060:	5ccb      	ldrb	r3, [r1, r3]
 8004062:	fa22 f303 	lsr.w	r3, r2, r3
 8004066:	4a09      	ldr	r2, [pc, #36]	; (800408c <HAL_RCC_ClockConfig+0x1c4>)
 8004068:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800406a:	4b09      	ldr	r3, [pc, #36]	; (8004090 <HAL_RCC_ClockConfig+0x1c8>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4618      	mov	r0, r3
 8004070:	f7fd f8b2 	bl	80011d8 <HAL_InitTick>

  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3710      	adds	r7, #16
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	40023c00 	.word	0x40023c00
 8004084:	40023800 	.word	0x40023800
 8004088:	0800924c 	.word	0x0800924c
 800408c:	20000120 	.word	0x20000120
 8004090:	20000124 	.word	0x20000124

08004094 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004094:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004098:	b094      	sub	sp, #80	; 0x50
 800409a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800409c:	2300      	movs	r3, #0
 800409e:	647b      	str	r3, [r7, #68]	; 0x44
 80040a0:	2300      	movs	r3, #0
 80040a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040a4:	2300      	movs	r3, #0
 80040a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040ac:	4b79      	ldr	r3, [pc, #484]	; (8004294 <HAL_RCC_GetSysClockFreq+0x200>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f003 030c 	and.w	r3, r3, #12
 80040b4:	2b08      	cmp	r3, #8
 80040b6:	d00d      	beq.n	80040d4 <HAL_RCC_GetSysClockFreq+0x40>
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	f200 80e1 	bhi.w	8004280 <HAL_RCC_GetSysClockFreq+0x1ec>
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d002      	beq.n	80040c8 <HAL_RCC_GetSysClockFreq+0x34>
 80040c2:	2b04      	cmp	r3, #4
 80040c4:	d003      	beq.n	80040ce <HAL_RCC_GetSysClockFreq+0x3a>
 80040c6:	e0db      	b.n	8004280 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040c8:	4b73      	ldr	r3, [pc, #460]	; (8004298 <HAL_RCC_GetSysClockFreq+0x204>)
 80040ca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80040cc:	e0db      	b.n	8004286 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040ce:	4b73      	ldr	r3, [pc, #460]	; (800429c <HAL_RCC_GetSysClockFreq+0x208>)
 80040d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040d2:	e0d8      	b.n	8004286 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040d4:	4b6f      	ldr	r3, [pc, #444]	; (8004294 <HAL_RCC_GetSysClockFreq+0x200>)
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040dc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040de:	4b6d      	ldr	r3, [pc, #436]	; (8004294 <HAL_RCC_GetSysClockFreq+0x200>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d063      	beq.n	80041b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040ea:	4b6a      	ldr	r3, [pc, #424]	; (8004294 <HAL_RCC_GetSysClockFreq+0x200>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	099b      	lsrs	r3, r3, #6
 80040f0:	2200      	movs	r2, #0
 80040f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80040f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80040f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040fc:	633b      	str	r3, [r7, #48]	; 0x30
 80040fe:	2300      	movs	r3, #0
 8004100:	637b      	str	r3, [r7, #52]	; 0x34
 8004102:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004106:	4622      	mov	r2, r4
 8004108:	462b      	mov	r3, r5
 800410a:	f04f 0000 	mov.w	r0, #0
 800410e:	f04f 0100 	mov.w	r1, #0
 8004112:	0159      	lsls	r1, r3, #5
 8004114:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004118:	0150      	lsls	r0, r2, #5
 800411a:	4602      	mov	r2, r0
 800411c:	460b      	mov	r3, r1
 800411e:	4621      	mov	r1, r4
 8004120:	1a51      	subs	r1, r2, r1
 8004122:	6139      	str	r1, [r7, #16]
 8004124:	4629      	mov	r1, r5
 8004126:	eb63 0301 	sbc.w	r3, r3, r1
 800412a:	617b      	str	r3, [r7, #20]
 800412c:	f04f 0200 	mov.w	r2, #0
 8004130:	f04f 0300 	mov.w	r3, #0
 8004134:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004138:	4659      	mov	r1, fp
 800413a:	018b      	lsls	r3, r1, #6
 800413c:	4651      	mov	r1, sl
 800413e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004142:	4651      	mov	r1, sl
 8004144:	018a      	lsls	r2, r1, #6
 8004146:	4651      	mov	r1, sl
 8004148:	ebb2 0801 	subs.w	r8, r2, r1
 800414c:	4659      	mov	r1, fp
 800414e:	eb63 0901 	sbc.w	r9, r3, r1
 8004152:	f04f 0200 	mov.w	r2, #0
 8004156:	f04f 0300 	mov.w	r3, #0
 800415a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800415e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004162:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004166:	4690      	mov	r8, r2
 8004168:	4699      	mov	r9, r3
 800416a:	4623      	mov	r3, r4
 800416c:	eb18 0303 	adds.w	r3, r8, r3
 8004170:	60bb      	str	r3, [r7, #8]
 8004172:	462b      	mov	r3, r5
 8004174:	eb49 0303 	adc.w	r3, r9, r3
 8004178:	60fb      	str	r3, [r7, #12]
 800417a:	f04f 0200 	mov.w	r2, #0
 800417e:	f04f 0300 	mov.w	r3, #0
 8004182:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004186:	4629      	mov	r1, r5
 8004188:	024b      	lsls	r3, r1, #9
 800418a:	4621      	mov	r1, r4
 800418c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004190:	4621      	mov	r1, r4
 8004192:	024a      	lsls	r2, r1, #9
 8004194:	4610      	mov	r0, r2
 8004196:	4619      	mov	r1, r3
 8004198:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800419a:	2200      	movs	r2, #0
 800419c:	62bb      	str	r3, [r7, #40]	; 0x28
 800419e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041a4:	f7fc f822 	bl	80001ec <__aeabi_uldivmod>
 80041a8:	4602      	mov	r2, r0
 80041aa:	460b      	mov	r3, r1
 80041ac:	4613      	mov	r3, r2
 80041ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041b0:	e058      	b.n	8004264 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041b2:	4b38      	ldr	r3, [pc, #224]	; (8004294 <HAL_RCC_GetSysClockFreq+0x200>)
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	099b      	lsrs	r3, r3, #6
 80041b8:	2200      	movs	r2, #0
 80041ba:	4618      	mov	r0, r3
 80041bc:	4611      	mov	r1, r2
 80041be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041c2:	623b      	str	r3, [r7, #32]
 80041c4:	2300      	movs	r3, #0
 80041c6:	627b      	str	r3, [r7, #36]	; 0x24
 80041c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80041cc:	4642      	mov	r2, r8
 80041ce:	464b      	mov	r3, r9
 80041d0:	f04f 0000 	mov.w	r0, #0
 80041d4:	f04f 0100 	mov.w	r1, #0
 80041d8:	0159      	lsls	r1, r3, #5
 80041da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041de:	0150      	lsls	r0, r2, #5
 80041e0:	4602      	mov	r2, r0
 80041e2:	460b      	mov	r3, r1
 80041e4:	4641      	mov	r1, r8
 80041e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80041ea:	4649      	mov	r1, r9
 80041ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80041f0:	f04f 0200 	mov.w	r2, #0
 80041f4:	f04f 0300 	mov.w	r3, #0
 80041f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80041fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004200:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004204:	ebb2 040a 	subs.w	r4, r2, sl
 8004208:	eb63 050b 	sbc.w	r5, r3, fp
 800420c:	f04f 0200 	mov.w	r2, #0
 8004210:	f04f 0300 	mov.w	r3, #0
 8004214:	00eb      	lsls	r3, r5, #3
 8004216:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800421a:	00e2      	lsls	r2, r4, #3
 800421c:	4614      	mov	r4, r2
 800421e:	461d      	mov	r5, r3
 8004220:	4643      	mov	r3, r8
 8004222:	18e3      	adds	r3, r4, r3
 8004224:	603b      	str	r3, [r7, #0]
 8004226:	464b      	mov	r3, r9
 8004228:	eb45 0303 	adc.w	r3, r5, r3
 800422c:	607b      	str	r3, [r7, #4]
 800422e:	f04f 0200 	mov.w	r2, #0
 8004232:	f04f 0300 	mov.w	r3, #0
 8004236:	e9d7 4500 	ldrd	r4, r5, [r7]
 800423a:	4629      	mov	r1, r5
 800423c:	028b      	lsls	r3, r1, #10
 800423e:	4621      	mov	r1, r4
 8004240:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004244:	4621      	mov	r1, r4
 8004246:	028a      	lsls	r2, r1, #10
 8004248:	4610      	mov	r0, r2
 800424a:	4619      	mov	r1, r3
 800424c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800424e:	2200      	movs	r2, #0
 8004250:	61bb      	str	r3, [r7, #24]
 8004252:	61fa      	str	r2, [r7, #28]
 8004254:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004258:	f7fb ffc8 	bl	80001ec <__aeabi_uldivmod>
 800425c:	4602      	mov	r2, r0
 800425e:	460b      	mov	r3, r1
 8004260:	4613      	mov	r3, r2
 8004262:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004264:	4b0b      	ldr	r3, [pc, #44]	; (8004294 <HAL_RCC_GetSysClockFreq+0x200>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	0c1b      	lsrs	r3, r3, #16
 800426a:	f003 0303 	and.w	r3, r3, #3
 800426e:	3301      	adds	r3, #1
 8004270:	005b      	lsls	r3, r3, #1
 8004272:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004274:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004276:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004278:	fbb2 f3f3 	udiv	r3, r2, r3
 800427c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800427e:	e002      	b.n	8004286 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004280:	4b05      	ldr	r3, [pc, #20]	; (8004298 <HAL_RCC_GetSysClockFreq+0x204>)
 8004282:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004284:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004286:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004288:	4618      	mov	r0, r3
 800428a:	3750      	adds	r7, #80	; 0x50
 800428c:	46bd      	mov	sp, r7
 800428e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004292:	bf00      	nop
 8004294:	40023800 	.word	0x40023800
 8004298:	00f42400 	.word	0x00f42400
 800429c:	007a1200 	.word	0x007a1200

080042a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042a0:	b480      	push	{r7}
 80042a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042a4:	4b03      	ldr	r3, [pc, #12]	; (80042b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80042a6:	681b      	ldr	r3, [r3, #0]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	20000120 	.word	0x20000120

080042b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042bc:	f7ff fff0 	bl	80042a0 <HAL_RCC_GetHCLKFreq>
 80042c0:	4602      	mov	r2, r0
 80042c2:	4b05      	ldr	r3, [pc, #20]	; (80042d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	0a9b      	lsrs	r3, r3, #10
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	4903      	ldr	r1, [pc, #12]	; (80042dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80042ce:	5ccb      	ldrb	r3, [r1, r3]
 80042d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	40023800 	.word	0x40023800
 80042dc:	0800925c 	.word	0x0800925c

080042e0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042e8:	2300      	movs	r3, #0
 80042ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80042ec:	2300      	movs	r3, #0
 80042ee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d105      	bne.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004304:	2b00      	cmp	r3, #0
 8004306:	d035      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004308:	4b62      	ldr	r3, [pc, #392]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800430a:	2200      	movs	r2, #0
 800430c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800430e:	f7fc ffa7 	bl	8001260 <HAL_GetTick>
 8004312:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004314:	e008      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004316:	f7fc ffa3 	bl	8001260 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	2b02      	cmp	r3, #2
 8004322:	d901      	bls.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e0b0      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004328:	4b5b      	ldr	r3, [pc, #364]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1f0      	bne.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	019a      	lsls	r2, r3, #6
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	071b      	lsls	r3, r3, #28
 8004340:	4955      	ldr	r1, [pc, #340]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004342:	4313      	orrs	r3, r2
 8004344:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004348:	4b52      	ldr	r3, [pc, #328]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800434a:	2201      	movs	r2, #1
 800434c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800434e:	f7fc ff87 	bl	8001260 <HAL_GetTick>
 8004352:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004354:	e008      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004356:	f7fc ff83 	bl	8001260 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d901      	bls.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e090      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004368:	4b4b      	ldr	r3, [pc, #300]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d0f0      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0302 	and.w	r3, r3, #2
 800437c:	2b00      	cmp	r3, #0
 800437e:	f000 8083 	beq.w	8004488 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004382:	2300      	movs	r3, #0
 8004384:	60fb      	str	r3, [r7, #12]
 8004386:	4b44      	ldr	r3, [pc, #272]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	4a43      	ldr	r2, [pc, #268]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800438c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004390:	6413      	str	r3, [r2, #64]	; 0x40
 8004392:	4b41      	ldr	r3, [pc, #260]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800439a:	60fb      	str	r3, [r7, #12]
 800439c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800439e:	4b3f      	ldr	r3, [pc, #252]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a3e      	ldr	r2, [pc, #248]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043a8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80043aa:	f7fc ff59 	bl	8001260 <HAL_GetTick>
 80043ae:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043b0:	e008      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80043b2:	f7fc ff55 	bl	8001260 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d901      	bls.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e062      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043c4:	4b35      	ldr	r3, [pc, #212]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d0f0      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043d0:	4b31      	ldr	r3, [pc, #196]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043d8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d02f      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d028      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043ee:	4b2a      	ldr	r3, [pc, #168]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043f6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043f8:	4b29      	ldr	r3, [pc, #164]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80043fa:	2201      	movs	r2, #1
 80043fc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043fe:	4b28      	ldr	r3, [pc, #160]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004400:	2200      	movs	r2, #0
 8004402:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004404:	4a24      	ldr	r2, [pc, #144]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800440a:	4b23      	ldr	r3, [pc, #140]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800440c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	2b01      	cmp	r3, #1
 8004414:	d114      	bne.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004416:	f7fc ff23 	bl	8001260 <HAL_GetTick>
 800441a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800441c:	e00a      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800441e:	f7fc ff1f 	bl	8001260 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	f241 3288 	movw	r2, #5000	; 0x1388
 800442c:	4293      	cmp	r3, r2
 800442e:	d901      	bls.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e02a      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004434:	4b18      	ldr	r3, [pc, #96]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d0ee      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004448:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800444c:	d10d      	bne.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800444e:	4b12      	ldr	r3, [pc, #72]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800445e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004462:	490d      	ldr	r1, [pc, #52]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004464:	4313      	orrs	r3, r2
 8004466:	608b      	str	r3, [r1, #8]
 8004468:	e005      	b.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800446a:	4b0b      	ldr	r3, [pc, #44]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	4a0a      	ldr	r2, [pc, #40]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004470:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004474:	6093      	str	r3, [r2, #8]
 8004476:	4b08      	ldr	r3, [pc, #32]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004478:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004482:	4905      	ldr	r1, [pc, #20]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004484:	4313      	orrs	r3, r2
 8004486:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3718      	adds	r7, #24
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	42470068 	.word	0x42470068
 8004498:	40023800 	.word	0x40023800
 800449c:	40007000 	.word	0x40007000
 80044a0:	42470e40 	.word	0x42470e40

080044a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b087      	sub	sp, #28
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80044ac:	2300      	movs	r3, #0
 80044ae:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80044b0:	2300      	movs	r3, #0
 80044b2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80044b4:	2300      	movs	r3, #0
 80044b6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80044b8:	2300      	movs	r3, #0
 80044ba:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d13e      	bne.n	8004540 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80044c2:	4b23      	ldr	r3, [pc, #140]	; (8004550 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044ca:	60fb      	str	r3, [r7, #12]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d005      	beq.n	80044de <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d12f      	bne.n	8004538 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80044d8:	4b1e      	ldr	r3, [pc, #120]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80044da:	617b      	str	r3, [r7, #20]
          break;
 80044dc:	e02f      	b.n	800453e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80044de:	4b1c      	ldr	r3, [pc, #112]	; (8004550 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044ea:	d108      	bne.n	80044fe <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80044ec:	4b18      	ldr	r3, [pc, #96]	; (8004550 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044f4:	4a18      	ldr	r2, [pc, #96]	; (8004558 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80044f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044fa:	613b      	str	r3, [r7, #16]
 80044fc:	e007      	b.n	800450e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80044fe:	4b14      	ldr	r3, [pc, #80]	; (8004550 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004506:	4a15      	ldr	r2, [pc, #84]	; (800455c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004508:	fbb2 f3f3 	udiv	r3, r2, r3
 800450c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800450e:	4b10      	ldr	r3, [pc, #64]	; (8004550 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004510:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004514:	099b      	lsrs	r3, r3, #6
 8004516:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	fb02 f303 	mul.w	r3, r2, r3
 8004520:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004522:	4b0b      	ldr	r3, [pc, #44]	; (8004550 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004524:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004528:	0f1b      	lsrs	r3, r3, #28
 800452a:	f003 0307 	and.w	r3, r3, #7
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	fbb2 f3f3 	udiv	r3, r2, r3
 8004534:	617b      	str	r3, [r7, #20]
          break;
 8004536:	e002      	b.n	800453e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004538:	2300      	movs	r3, #0
 800453a:	617b      	str	r3, [r7, #20]
          break;
 800453c:	bf00      	nop
        }
      }
      break;
 800453e:	bf00      	nop
    }
  }
  return frequency;
 8004540:	697b      	ldr	r3, [r7, #20]
}
 8004542:	4618      	mov	r0, r3
 8004544:	371c      	adds	r7, #28
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	40023800 	.word	0x40023800
 8004554:	00bb8000 	.word	0x00bb8000
 8004558:	007a1200 	.word	0x007a1200
 800455c:	00f42400 	.word	0x00f42400

08004560 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e07b      	b.n	800466a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004576:	2b00      	cmp	r3, #0
 8004578:	d108      	bne.n	800458c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004582:	d009      	beq.n	8004598 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	61da      	str	r2, [r3, #28]
 800458a:	e005      	b.n	8004598 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d106      	bne.n	80045b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7fc fce0 	bl	8000f78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2202      	movs	r2, #2
 80045bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80045e0:	431a      	orrs	r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045ea:	431a      	orrs	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	431a      	orrs	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	431a      	orrs	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004608:	431a      	orrs	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004612:	431a      	orrs	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800461c:	ea42 0103 	orr.w	r1, r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004624:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	430a      	orrs	r2, r1
 800462e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	0c1b      	lsrs	r3, r3, #16
 8004636:	f003 0104 	and.w	r1, r3, #4
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463e:	f003 0210 	and.w	r2, r3, #16
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	430a      	orrs	r2, r1
 8004648:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	69da      	ldr	r2, [r3, #28]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004658:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	b082      	sub	sp, #8
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e041      	b.n	8004708 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b00      	cmp	r3, #0
 800468e:	d106      	bne.n	800469e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f7fc fcb5 	bl	8001008 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2202      	movs	r2, #2
 80046a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	3304      	adds	r3, #4
 80046ae:	4619      	mov	r1, r3
 80046b0:	4610      	mov	r0, r2
 80046b2:	f000 fa35 	bl	8004b20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3708      	adds	r7, #8
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b01      	cmp	r3, #1
 8004722:	d001      	beq.n	8004728 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e046      	b.n	80047b6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2202      	movs	r2, #2
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a23      	ldr	r2, [pc, #140]	; (80047c4 <HAL_TIM_Base_Start+0xb4>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d022      	beq.n	8004780 <HAL_TIM_Base_Start+0x70>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004742:	d01d      	beq.n	8004780 <HAL_TIM_Base_Start+0x70>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a1f      	ldr	r2, [pc, #124]	; (80047c8 <HAL_TIM_Base_Start+0xb8>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d018      	beq.n	8004780 <HAL_TIM_Base_Start+0x70>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a1e      	ldr	r2, [pc, #120]	; (80047cc <HAL_TIM_Base_Start+0xbc>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d013      	beq.n	8004780 <HAL_TIM_Base_Start+0x70>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a1c      	ldr	r2, [pc, #112]	; (80047d0 <HAL_TIM_Base_Start+0xc0>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d00e      	beq.n	8004780 <HAL_TIM_Base_Start+0x70>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a1b      	ldr	r2, [pc, #108]	; (80047d4 <HAL_TIM_Base_Start+0xc4>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d009      	beq.n	8004780 <HAL_TIM_Base_Start+0x70>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a19      	ldr	r2, [pc, #100]	; (80047d8 <HAL_TIM_Base_Start+0xc8>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d004      	beq.n	8004780 <HAL_TIM_Base_Start+0x70>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a18      	ldr	r2, [pc, #96]	; (80047dc <HAL_TIM_Base_Start+0xcc>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d111      	bne.n	80047a4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f003 0307 	and.w	r3, r3, #7
 800478a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2b06      	cmp	r3, #6
 8004790:	d010      	beq.n	80047b4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f042 0201 	orr.w	r2, r2, #1
 80047a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047a2:	e007      	b.n	80047b4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f042 0201 	orr.w	r2, r2, #1
 80047b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3714      	adds	r7, #20
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	40010000 	.word	0x40010000
 80047c8:	40000400 	.word	0x40000400
 80047cc:	40000800 	.word	0x40000800
 80047d0:	40000c00 	.word	0x40000c00
 80047d4:	40010400 	.word	0x40010400
 80047d8:	40014000 	.word	0x40014000
 80047dc:	40001800 	.word	0x40001800

080047e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d001      	beq.n	80047f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e04e      	b.n	8004896 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68da      	ldr	r2, [r3, #12]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f042 0201 	orr.w	r2, r2, #1
 800480e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a23      	ldr	r2, [pc, #140]	; (80048a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d022      	beq.n	8004860 <HAL_TIM_Base_Start_IT+0x80>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004822:	d01d      	beq.n	8004860 <HAL_TIM_Base_Start_IT+0x80>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a1f      	ldr	r2, [pc, #124]	; (80048a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d018      	beq.n	8004860 <HAL_TIM_Base_Start_IT+0x80>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a1e      	ldr	r2, [pc, #120]	; (80048ac <HAL_TIM_Base_Start_IT+0xcc>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d013      	beq.n	8004860 <HAL_TIM_Base_Start_IT+0x80>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a1c      	ldr	r2, [pc, #112]	; (80048b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d00e      	beq.n	8004860 <HAL_TIM_Base_Start_IT+0x80>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a1b      	ldr	r2, [pc, #108]	; (80048b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d009      	beq.n	8004860 <HAL_TIM_Base_Start_IT+0x80>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a19      	ldr	r2, [pc, #100]	; (80048b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d004      	beq.n	8004860 <HAL_TIM_Base_Start_IT+0x80>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a18      	ldr	r2, [pc, #96]	; (80048bc <HAL_TIM_Base_Start_IT+0xdc>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d111      	bne.n	8004884 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f003 0307 	and.w	r3, r3, #7
 800486a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2b06      	cmp	r3, #6
 8004870:	d010      	beq.n	8004894 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f042 0201 	orr.w	r2, r2, #1
 8004880:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004882:	e007      	b.n	8004894 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f042 0201 	orr.w	r2, r2, #1
 8004892:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3714      	adds	r7, #20
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	40010000 	.word	0x40010000
 80048a8:	40000400 	.word	0x40000400
 80048ac:	40000800 	.word	0x40000800
 80048b0:	40000c00 	.word	0x40000c00
 80048b4:	40010400 	.word	0x40010400
 80048b8:	40014000 	.word	0x40014000
 80048bc:	40001800 	.word	0x40001800

080048c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d122      	bne.n	800491c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f003 0302 	and.w	r3, r3, #2
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d11b      	bne.n	800491c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f06f 0202 	mvn.w	r2, #2
 80048ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	f003 0303 	and.w	r3, r3, #3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f8ee 	bl	8004ae4 <HAL_TIM_IC_CaptureCallback>
 8004908:	e005      	b.n	8004916 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f8e0 	bl	8004ad0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 f8f1 	bl	8004af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	f003 0304 	and.w	r3, r3, #4
 8004926:	2b04      	cmp	r3, #4
 8004928:	d122      	bne.n	8004970 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	f003 0304 	and.w	r3, r3, #4
 8004934:	2b04      	cmp	r3, #4
 8004936:	d11b      	bne.n	8004970 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f06f 0204 	mvn.w	r2, #4
 8004940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2202      	movs	r2, #2
 8004946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 f8c4 	bl	8004ae4 <HAL_TIM_IC_CaptureCallback>
 800495c:	e005      	b.n	800496a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 f8b6 	bl	8004ad0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 f8c7 	bl	8004af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	f003 0308 	and.w	r3, r3, #8
 800497a:	2b08      	cmp	r3, #8
 800497c:	d122      	bne.n	80049c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	f003 0308 	and.w	r3, r3, #8
 8004988:	2b08      	cmp	r3, #8
 800498a:	d11b      	bne.n	80049c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f06f 0208 	mvn.w	r2, #8
 8004994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2204      	movs	r2, #4
 800499a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	69db      	ldr	r3, [r3, #28]
 80049a2:	f003 0303 	and.w	r3, r3, #3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 f89a 	bl	8004ae4 <HAL_TIM_IC_CaptureCallback>
 80049b0:	e005      	b.n	80049be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f88c 	bl	8004ad0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 f89d 	bl	8004af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	f003 0310 	and.w	r3, r3, #16
 80049ce:	2b10      	cmp	r3, #16
 80049d0:	d122      	bne.n	8004a18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	f003 0310 	and.w	r3, r3, #16
 80049dc:	2b10      	cmp	r3, #16
 80049de:	d11b      	bne.n	8004a18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f06f 0210 	mvn.w	r2, #16
 80049e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2208      	movs	r2, #8
 80049ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	69db      	ldr	r3, [r3, #28]
 80049f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d003      	beq.n	8004a06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f870 	bl	8004ae4 <HAL_TIM_IC_CaptureCallback>
 8004a04:	e005      	b.n	8004a12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f862 	bl	8004ad0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 f873 	bl	8004af8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d10e      	bne.n	8004a44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d107      	bne.n	8004a44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f06f 0201 	mvn.w	r2, #1
 8004a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7fc f990 	bl	8000d64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a4e:	2b80      	cmp	r3, #128	; 0x80
 8004a50:	d10e      	bne.n	8004a70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a5c:	2b80      	cmp	r3, #128	; 0x80
 8004a5e:	d107      	bne.n	8004a70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f97e 	bl	8004d6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a7a:	2b40      	cmp	r3, #64	; 0x40
 8004a7c:	d10e      	bne.n	8004a9c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a88:	2b40      	cmp	r3, #64	; 0x40
 8004a8a:	d107      	bne.n	8004a9c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f838 	bl	8004b0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	f003 0320 	and.w	r3, r3, #32
 8004aa6:	2b20      	cmp	r3, #32
 8004aa8:	d10e      	bne.n	8004ac8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	f003 0320 	and.w	r3, r3, #32
 8004ab4:	2b20      	cmp	r3, #32
 8004ab6:	d107      	bne.n	8004ac8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f06f 0220 	mvn.w	r2, #32
 8004ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f948 	bl	8004d58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ac8:	bf00      	nop
 8004aca:	3708      	adds	r7, #8
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a40      	ldr	r2, [pc, #256]	; (8004c34 <TIM_Base_SetConfig+0x114>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d013      	beq.n	8004b60 <TIM_Base_SetConfig+0x40>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b3e:	d00f      	beq.n	8004b60 <TIM_Base_SetConfig+0x40>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a3d      	ldr	r2, [pc, #244]	; (8004c38 <TIM_Base_SetConfig+0x118>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d00b      	beq.n	8004b60 <TIM_Base_SetConfig+0x40>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a3c      	ldr	r2, [pc, #240]	; (8004c3c <TIM_Base_SetConfig+0x11c>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d007      	beq.n	8004b60 <TIM_Base_SetConfig+0x40>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a3b      	ldr	r2, [pc, #236]	; (8004c40 <TIM_Base_SetConfig+0x120>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d003      	beq.n	8004b60 <TIM_Base_SetConfig+0x40>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a3a      	ldr	r2, [pc, #232]	; (8004c44 <TIM_Base_SetConfig+0x124>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d108      	bne.n	8004b72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a2f      	ldr	r2, [pc, #188]	; (8004c34 <TIM_Base_SetConfig+0x114>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d02b      	beq.n	8004bd2 <TIM_Base_SetConfig+0xb2>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b80:	d027      	beq.n	8004bd2 <TIM_Base_SetConfig+0xb2>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a2c      	ldr	r2, [pc, #176]	; (8004c38 <TIM_Base_SetConfig+0x118>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d023      	beq.n	8004bd2 <TIM_Base_SetConfig+0xb2>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a2b      	ldr	r2, [pc, #172]	; (8004c3c <TIM_Base_SetConfig+0x11c>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d01f      	beq.n	8004bd2 <TIM_Base_SetConfig+0xb2>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a2a      	ldr	r2, [pc, #168]	; (8004c40 <TIM_Base_SetConfig+0x120>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d01b      	beq.n	8004bd2 <TIM_Base_SetConfig+0xb2>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a29      	ldr	r2, [pc, #164]	; (8004c44 <TIM_Base_SetConfig+0x124>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d017      	beq.n	8004bd2 <TIM_Base_SetConfig+0xb2>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a28      	ldr	r2, [pc, #160]	; (8004c48 <TIM_Base_SetConfig+0x128>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d013      	beq.n	8004bd2 <TIM_Base_SetConfig+0xb2>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a27      	ldr	r2, [pc, #156]	; (8004c4c <TIM_Base_SetConfig+0x12c>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d00f      	beq.n	8004bd2 <TIM_Base_SetConfig+0xb2>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a26      	ldr	r2, [pc, #152]	; (8004c50 <TIM_Base_SetConfig+0x130>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d00b      	beq.n	8004bd2 <TIM_Base_SetConfig+0xb2>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a25      	ldr	r2, [pc, #148]	; (8004c54 <TIM_Base_SetConfig+0x134>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d007      	beq.n	8004bd2 <TIM_Base_SetConfig+0xb2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a24      	ldr	r2, [pc, #144]	; (8004c58 <TIM_Base_SetConfig+0x138>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d003      	beq.n	8004bd2 <TIM_Base_SetConfig+0xb2>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a23      	ldr	r2, [pc, #140]	; (8004c5c <TIM_Base_SetConfig+0x13c>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d108      	bne.n	8004be4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	689a      	ldr	r2, [r3, #8]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a0a      	ldr	r2, [pc, #40]	; (8004c34 <TIM_Base_SetConfig+0x114>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d003      	beq.n	8004c18 <TIM_Base_SetConfig+0xf8>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a0c      	ldr	r2, [pc, #48]	; (8004c44 <TIM_Base_SetConfig+0x124>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d103      	bne.n	8004c20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	691a      	ldr	r2, [r3, #16]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	615a      	str	r2, [r3, #20]
}
 8004c26:	bf00      	nop
 8004c28:	3714      	adds	r7, #20
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	40010000 	.word	0x40010000
 8004c38:	40000400 	.word	0x40000400
 8004c3c:	40000800 	.word	0x40000800
 8004c40:	40000c00 	.word	0x40000c00
 8004c44:	40010400 	.word	0x40010400
 8004c48:	40014000 	.word	0x40014000
 8004c4c:	40014400 	.word	0x40014400
 8004c50:	40014800 	.word	0x40014800
 8004c54:	40001800 	.word	0x40001800
 8004c58:	40001c00 	.word	0x40001c00
 8004c5c:	40002000 	.word	0x40002000

08004c60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d101      	bne.n	8004c78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c74:	2302      	movs	r3, #2
 8004c76:	e05a      	b.n	8004d2e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2202      	movs	r2, #2
 8004c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a21      	ldr	r2, [pc, #132]	; (8004d3c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d022      	beq.n	8004d02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cc4:	d01d      	beq.n	8004d02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a1d      	ldr	r2, [pc, #116]	; (8004d40 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d018      	beq.n	8004d02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a1b      	ldr	r2, [pc, #108]	; (8004d44 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d013      	beq.n	8004d02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a1a      	ldr	r2, [pc, #104]	; (8004d48 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d00e      	beq.n	8004d02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a18      	ldr	r2, [pc, #96]	; (8004d4c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d009      	beq.n	8004d02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a17      	ldr	r2, [pc, #92]	; (8004d50 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d004      	beq.n	8004d02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a15      	ldr	r2, [pc, #84]	; (8004d54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d10c      	bne.n	8004d1c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68ba      	ldr	r2, [r7, #8]
 8004d1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3714      	adds	r7, #20
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	40010000 	.word	0x40010000
 8004d40:	40000400 	.word	0x40000400
 8004d44:	40000800 	.word	0x40000800
 8004d48:	40000c00 	.word	0x40000c00
 8004d4c:	40010400 	.word	0x40010400
 8004d50:	40014000 	.word	0x40014000
 8004d54:	40001800 	.word	0x40001800

08004d58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d80:	b084      	sub	sp, #16
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b084      	sub	sp, #16
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
 8004d8a:	f107 001c 	add.w	r0, r7, #28
 8004d8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d122      	bne.n	8004dde <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004dac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004dc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d105      	bne.n	8004dd2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f001 fbee 	bl	80065b4 <USB_CoreReset>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	73fb      	strb	r3, [r7, #15]
 8004ddc:	e01a      	b.n	8004e14 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f001 fbe2 	bl	80065b4 <USB_CoreReset>
 8004df0:	4603      	mov	r3, r0
 8004df2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004df4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d106      	bne.n	8004e08 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	639a      	str	r2, [r3, #56]	; 0x38
 8004e06:	e005      	b.n	8004e14 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d10b      	bne.n	8004e32 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f043 0206 	orr.w	r2, r3, #6
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f043 0220 	orr.w	r2, r3, #32
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3710      	adds	r7, #16
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e3e:	b004      	add	sp, #16
 8004e40:	4770      	bx	lr
	...

08004e44 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b087      	sub	sp, #28
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	4613      	mov	r3, r2
 8004e50:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004e52:	79fb      	ldrb	r3, [r7, #7]
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d165      	bne.n	8004f24 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	4a41      	ldr	r2, [pc, #260]	; (8004f60 <USB_SetTurnaroundTime+0x11c>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d906      	bls.n	8004e6e <USB_SetTurnaroundTime+0x2a>
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	4a40      	ldr	r2, [pc, #256]	; (8004f64 <USB_SetTurnaroundTime+0x120>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d202      	bcs.n	8004e6e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004e68:	230f      	movs	r3, #15
 8004e6a:	617b      	str	r3, [r7, #20]
 8004e6c:	e062      	b.n	8004f34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	4a3c      	ldr	r2, [pc, #240]	; (8004f64 <USB_SetTurnaroundTime+0x120>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d306      	bcc.n	8004e84 <USB_SetTurnaroundTime+0x40>
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	4a3b      	ldr	r2, [pc, #236]	; (8004f68 <USB_SetTurnaroundTime+0x124>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d202      	bcs.n	8004e84 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004e7e:	230e      	movs	r3, #14
 8004e80:	617b      	str	r3, [r7, #20]
 8004e82:	e057      	b.n	8004f34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	4a38      	ldr	r2, [pc, #224]	; (8004f68 <USB_SetTurnaroundTime+0x124>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d306      	bcc.n	8004e9a <USB_SetTurnaroundTime+0x56>
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	4a37      	ldr	r2, [pc, #220]	; (8004f6c <USB_SetTurnaroundTime+0x128>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d202      	bcs.n	8004e9a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004e94:	230d      	movs	r3, #13
 8004e96:	617b      	str	r3, [r7, #20]
 8004e98:	e04c      	b.n	8004f34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	4a33      	ldr	r2, [pc, #204]	; (8004f6c <USB_SetTurnaroundTime+0x128>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d306      	bcc.n	8004eb0 <USB_SetTurnaroundTime+0x6c>
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	4a32      	ldr	r2, [pc, #200]	; (8004f70 <USB_SetTurnaroundTime+0x12c>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d802      	bhi.n	8004eb0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004eaa:	230c      	movs	r3, #12
 8004eac:	617b      	str	r3, [r7, #20]
 8004eae:	e041      	b.n	8004f34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	4a2f      	ldr	r2, [pc, #188]	; (8004f70 <USB_SetTurnaroundTime+0x12c>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d906      	bls.n	8004ec6 <USB_SetTurnaroundTime+0x82>
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	4a2e      	ldr	r2, [pc, #184]	; (8004f74 <USB_SetTurnaroundTime+0x130>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d802      	bhi.n	8004ec6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004ec0:	230b      	movs	r3, #11
 8004ec2:	617b      	str	r3, [r7, #20]
 8004ec4:	e036      	b.n	8004f34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	4a2a      	ldr	r2, [pc, #168]	; (8004f74 <USB_SetTurnaroundTime+0x130>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d906      	bls.n	8004edc <USB_SetTurnaroundTime+0x98>
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	4a29      	ldr	r2, [pc, #164]	; (8004f78 <USB_SetTurnaroundTime+0x134>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d802      	bhi.n	8004edc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004ed6:	230a      	movs	r3, #10
 8004ed8:	617b      	str	r3, [r7, #20]
 8004eda:	e02b      	b.n	8004f34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	4a26      	ldr	r2, [pc, #152]	; (8004f78 <USB_SetTurnaroundTime+0x134>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d906      	bls.n	8004ef2 <USB_SetTurnaroundTime+0xae>
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	4a25      	ldr	r2, [pc, #148]	; (8004f7c <USB_SetTurnaroundTime+0x138>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d202      	bcs.n	8004ef2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004eec:	2309      	movs	r3, #9
 8004eee:	617b      	str	r3, [r7, #20]
 8004ef0:	e020      	b.n	8004f34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	4a21      	ldr	r2, [pc, #132]	; (8004f7c <USB_SetTurnaroundTime+0x138>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d306      	bcc.n	8004f08 <USB_SetTurnaroundTime+0xc4>
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	4a20      	ldr	r2, [pc, #128]	; (8004f80 <USB_SetTurnaroundTime+0x13c>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d802      	bhi.n	8004f08 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004f02:	2308      	movs	r3, #8
 8004f04:	617b      	str	r3, [r7, #20]
 8004f06:	e015      	b.n	8004f34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	4a1d      	ldr	r2, [pc, #116]	; (8004f80 <USB_SetTurnaroundTime+0x13c>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d906      	bls.n	8004f1e <USB_SetTurnaroundTime+0xda>
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	4a1c      	ldr	r2, [pc, #112]	; (8004f84 <USB_SetTurnaroundTime+0x140>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d202      	bcs.n	8004f1e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004f18:	2307      	movs	r3, #7
 8004f1a:	617b      	str	r3, [r7, #20]
 8004f1c:	e00a      	b.n	8004f34 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004f1e:	2306      	movs	r3, #6
 8004f20:	617b      	str	r3, [r7, #20]
 8004f22:	e007      	b.n	8004f34 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004f24:	79fb      	ldrb	r3, [r7, #7]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d102      	bne.n	8004f30 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004f2a:	2309      	movs	r3, #9
 8004f2c:	617b      	str	r3, [r7, #20]
 8004f2e:	e001      	b.n	8004f34 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004f30:	2309      	movs	r3, #9
 8004f32:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	68da      	ldr	r2, [r3, #12]
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	029b      	lsls	r3, r3, #10
 8004f48:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004f4c:	431a      	orrs	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	371c      	adds	r7, #28
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr
 8004f60:	00d8acbf 	.word	0x00d8acbf
 8004f64:	00e4e1c0 	.word	0x00e4e1c0
 8004f68:	00f42400 	.word	0x00f42400
 8004f6c:	01067380 	.word	0x01067380
 8004f70:	011a499f 	.word	0x011a499f
 8004f74:	01312cff 	.word	0x01312cff
 8004f78:	014ca43f 	.word	0x014ca43f
 8004f7c:	016e3600 	.word	0x016e3600
 8004f80:	01a6ab1f 	.word	0x01a6ab1f
 8004f84:	01e84800 	.word	0x01e84800

08004f88 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f043 0201 	orr.w	r2, r3, #1
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	370c      	adds	r7, #12
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004faa:	b480      	push	{r7}
 8004fac:	b083      	sub	sp, #12
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f023 0201 	bic.w	r2, r3, #1
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004fe8:	78fb      	ldrb	r3, [r7, #3]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d115      	bne.n	800501a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004ffa:	2001      	movs	r0, #1
 8004ffc:	f7fc f93c 	bl	8001278 <HAL_Delay>
      ms++;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	3301      	adds	r3, #1
 8005004:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f001 fa45 	bl	8006496 <USB_GetMode>
 800500c:	4603      	mov	r3, r0
 800500e:	2b01      	cmp	r3, #1
 8005010:	d01e      	beq.n	8005050 <USB_SetCurrentMode+0x84>
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2b31      	cmp	r3, #49	; 0x31
 8005016:	d9f0      	bls.n	8004ffa <USB_SetCurrentMode+0x2e>
 8005018:	e01a      	b.n	8005050 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800501a:	78fb      	ldrb	r3, [r7, #3]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d115      	bne.n	800504c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800502c:	2001      	movs	r0, #1
 800502e:	f7fc f923 	bl	8001278 <HAL_Delay>
      ms++;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	3301      	adds	r3, #1
 8005036:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f001 fa2c 	bl	8006496 <USB_GetMode>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d005      	beq.n	8005050 <USB_SetCurrentMode+0x84>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2b31      	cmp	r3, #49	; 0x31
 8005048:	d9f0      	bls.n	800502c <USB_SetCurrentMode+0x60>
 800504a:	e001      	b.n	8005050 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e005      	b.n	800505c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2b32      	cmp	r3, #50	; 0x32
 8005054:	d101      	bne.n	800505a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e000      	b.n	800505c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005064:	b084      	sub	sp, #16
 8005066:	b580      	push	{r7, lr}
 8005068:	b086      	sub	sp, #24
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
 800506e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005072:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005076:	2300      	movs	r3, #0
 8005078:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800507e:	2300      	movs	r3, #0
 8005080:	613b      	str	r3, [r7, #16]
 8005082:	e009      	b.n	8005098 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	3340      	adds	r3, #64	; 0x40
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4413      	add	r3, r2
 800508e:	2200      	movs	r2, #0
 8005090:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	3301      	adds	r3, #1
 8005096:	613b      	str	r3, [r7, #16]
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	2b0e      	cmp	r3, #14
 800509c:	d9f2      	bls.n	8005084 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800509e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d11c      	bne.n	80050de <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050b2:	f043 0302 	orr.w	r3, r3, #2
 80050b6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	639a      	str	r2, [r3, #56]	; 0x38
 80050dc:	e00b      	b.n	80050f6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80050fc:	461a      	mov	r2, r3
 80050fe:	2300      	movs	r3, #0
 8005100:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005108:	4619      	mov	r1, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005110:	461a      	mov	r2, r3
 8005112:	680b      	ldr	r3, [r1, #0]
 8005114:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005118:	2b01      	cmp	r3, #1
 800511a:	d10c      	bne.n	8005136 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800511c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800511e:	2b00      	cmp	r3, #0
 8005120:	d104      	bne.n	800512c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005122:	2100      	movs	r1, #0
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 f965 	bl	80053f4 <USB_SetDevSpeed>
 800512a:	e008      	b.n	800513e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800512c:	2101      	movs	r1, #1
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f960 	bl	80053f4 <USB_SetDevSpeed>
 8005134:	e003      	b.n	800513e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005136:	2103      	movs	r1, #3
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 f95b 	bl	80053f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800513e:	2110      	movs	r1, #16
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 f8f3 	bl	800532c <USB_FlushTxFifo>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d001      	beq.n	8005150 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 f91f 	bl	8005394 <USB_FlushRxFifo>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d001      	beq.n	8005160 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005166:	461a      	mov	r2, r3
 8005168:	2300      	movs	r3, #0
 800516a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005172:	461a      	mov	r2, r3
 8005174:	2300      	movs	r3, #0
 8005176:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800517e:	461a      	mov	r2, r3
 8005180:	2300      	movs	r3, #0
 8005182:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005184:	2300      	movs	r3, #0
 8005186:	613b      	str	r3, [r7, #16]
 8005188:	e043      	b.n	8005212 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	015a      	lsls	r2, r3, #5
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	4413      	add	r3, r2
 8005192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800519c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051a0:	d118      	bne.n	80051d4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10a      	bne.n	80051be <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	015a      	lsls	r2, r3, #5
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	4413      	add	r3, r2
 80051b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b4:	461a      	mov	r2, r3
 80051b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80051ba:	6013      	str	r3, [r2, #0]
 80051bc:	e013      	b.n	80051e6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	015a      	lsls	r2, r3, #5
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	4413      	add	r3, r2
 80051c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ca:	461a      	mov	r2, r3
 80051cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051d0:	6013      	str	r3, [r2, #0]
 80051d2:	e008      	b.n	80051e6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e0:	461a      	mov	r2, r3
 80051e2:	2300      	movs	r3, #0
 80051e4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	015a      	lsls	r2, r3, #5
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	4413      	add	r3, r2
 80051ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f2:	461a      	mov	r2, r3
 80051f4:	2300      	movs	r3, #0
 80051f6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	015a      	lsls	r2, r3, #5
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4413      	add	r3, r2
 8005200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005204:	461a      	mov	r2, r3
 8005206:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800520a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	3301      	adds	r3, #1
 8005210:	613b      	str	r3, [r7, #16]
 8005212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	429a      	cmp	r2, r3
 8005218:	d3b7      	bcc.n	800518a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800521a:	2300      	movs	r3, #0
 800521c:	613b      	str	r3, [r7, #16]
 800521e:	e043      	b.n	80052a8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	015a      	lsls	r2, r3, #5
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	4413      	add	r3, r2
 8005228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005232:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005236:	d118      	bne.n	800526a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10a      	bne.n	8005254 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	015a      	lsls	r2, r3, #5
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	4413      	add	r3, r2
 8005246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800524a:	461a      	mov	r2, r3
 800524c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005250:	6013      	str	r3, [r2, #0]
 8005252:	e013      	b.n	800527c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	015a      	lsls	r2, r3, #5
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	4413      	add	r3, r2
 800525c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005260:	461a      	mov	r2, r3
 8005262:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005266:	6013      	str	r3, [r2, #0]
 8005268:	e008      	b.n	800527c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	015a      	lsls	r2, r3, #5
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	4413      	add	r3, r2
 8005272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005276:	461a      	mov	r2, r3
 8005278:	2300      	movs	r3, #0
 800527a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	015a      	lsls	r2, r3, #5
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4413      	add	r3, r2
 8005284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005288:	461a      	mov	r2, r3
 800528a:	2300      	movs	r3, #0
 800528c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	015a      	lsls	r2, r3, #5
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	4413      	add	r3, r2
 8005296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800529a:	461a      	mov	r2, r3
 800529c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	3301      	adds	r3, #1
 80052a6:	613b      	str	r3, [r7, #16]
 80052a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d3b7      	bcc.n	8005220 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052c2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80052d0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80052d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d105      	bne.n	80052e4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	f043 0210 	orr.w	r2, r3, #16
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	699a      	ldr	r2, [r3, #24]
 80052e8:	4b0f      	ldr	r3, [pc, #60]	; (8005328 <USB_DevInit+0x2c4>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80052f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d005      	beq.n	8005302 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	f043 0208 	orr.w	r2, r3, #8
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005304:	2b01      	cmp	r3, #1
 8005306:	d107      	bne.n	8005318 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005310:	f043 0304 	orr.w	r3, r3, #4
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005318:	7dfb      	ldrb	r3, [r7, #23]
}
 800531a:	4618      	mov	r0, r3
 800531c:	3718      	adds	r7, #24
 800531e:	46bd      	mov	sp, r7
 8005320:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005324:	b004      	add	sp, #16
 8005326:	4770      	bx	lr
 8005328:	803c3800 	.word	0x803c3800

0800532c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005336:	2300      	movs	r3, #0
 8005338:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	3301      	adds	r3, #1
 800533e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	4a13      	ldr	r2, [pc, #76]	; (8005390 <USB_FlushTxFifo+0x64>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d901      	bls.n	800534c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e01b      	b.n	8005384 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	2b00      	cmp	r3, #0
 8005352:	daf2      	bge.n	800533a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005354:	2300      	movs	r3, #0
 8005356:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	019b      	lsls	r3, r3, #6
 800535c:	f043 0220 	orr.w	r2, r3, #32
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	3301      	adds	r3, #1
 8005368:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	4a08      	ldr	r2, [pc, #32]	; (8005390 <USB_FlushTxFifo+0x64>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d901      	bls.n	8005376 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e006      	b.n	8005384 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	f003 0320 	and.w	r3, r3, #32
 800537e:	2b20      	cmp	r3, #32
 8005380:	d0f0      	beq.n	8005364 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3714      	adds	r7, #20
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr
 8005390:	00030d40 	.word	0x00030d40

08005394 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800539c:	2300      	movs	r3, #0
 800539e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	3301      	adds	r3, #1
 80053a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	4a11      	ldr	r2, [pc, #68]	; (80053f0 <USB_FlushRxFifo+0x5c>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d901      	bls.n	80053b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e018      	b.n	80053e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	daf2      	bge.n	80053a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80053ba:	2300      	movs	r3, #0
 80053bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2210      	movs	r2, #16
 80053c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	3301      	adds	r3, #1
 80053c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	4a08      	ldr	r2, [pc, #32]	; (80053f0 <USB_FlushRxFifo+0x5c>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d901      	bls.n	80053d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e006      	b.n	80053e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	f003 0310 	and.w	r3, r3, #16
 80053de:	2b10      	cmp	r3, #16
 80053e0:	d0f0      	beq.n	80053c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3714      	adds	r7, #20
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr
 80053f0:	00030d40 	.word	0x00030d40

080053f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	460b      	mov	r3, r1
 80053fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	78fb      	ldrb	r3, [r7, #3]
 800540e:	68f9      	ldr	r1, [r7, #12]
 8005410:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005414:	4313      	orrs	r3, r2
 8005416:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3714      	adds	r7, #20
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr

08005426 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005426:	b480      	push	{r7}
 8005428:	b087      	sub	sp, #28
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f003 0306 	and.w	r3, r3, #6
 800543e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d102      	bne.n	800544c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005446:	2300      	movs	r3, #0
 8005448:	75fb      	strb	r3, [r7, #23]
 800544a:	e00a      	b.n	8005462 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2b02      	cmp	r3, #2
 8005450:	d002      	beq.n	8005458 <USB_GetDevSpeed+0x32>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2b06      	cmp	r3, #6
 8005456:	d102      	bne.n	800545e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005458:	2302      	movs	r3, #2
 800545a:	75fb      	strb	r3, [r7, #23]
 800545c:	e001      	b.n	8005462 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800545e:	230f      	movs	r3, #15
 8005460:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005462:	7dfb      	ldrb	r3, [r7, #23]
}
 8005464:	4618      	mov	r0, r3
 8005466:	371c      	adds	r7, #28
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	785b      	ldrb	r3, [r3, #1]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d13a      	bne.n	8005502 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005492:	69da      	ldr	r2, [r3, #28]
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	f003 030f 	and.w	r3, r3, #15
 800549c:	2101      	movs	r1, #1
 800549e:	fa01 f303 	lsl.w	r3, r1, r3
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	68f9      	ldr	r1, [r7, #12]
 80054a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054aa:	4313      	orrs	r3, r2
 80054ac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	015a      	lsls	r2, r3, #5
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	4413      	add	r3, r2
 80054b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d155      	bne.n	8005570 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	015a      	lsls	r2, r3, #5
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	4413      	add	r3, r2
 80054cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	791b      	ldrb	r3, [r3, #4]
 80054de:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054e0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	059b      	lsls	r3, r3, #22
 80054e6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054e8:	4313      	orrs	r3, r2
 80054ea:	68ba      	ldr	r2, [r7, #8]
 80054ec:	0151      	lsls	r1, r2, #5
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	440a      	add	r2, r1
 80054f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054fe:	6013      	str	r3, [r2, #0]
 8005500:	e036      	b.n	8005570 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005508:	69da      	ldr	r2, [r3, #28]
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	f003 030f 	and.w	r3, r3, #15
 8005512:	2101      	movs	r1, #1
 8005514:	fa01 f303 	lsl.w	r3, r1, r3
 8005518:	041b      	lsls	r3, r3, #16
 800551a:	68f9      	ldr	r1, [r7, #12]
 800551c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005520:	4313      	orrs	r3, r2
 8005522:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	015a      	lsls	r2, r3, #5
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	4413      	add	r3, r2
 800552c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d11a      	bne.n	8005570 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	015a      	lsls	r2, r3, #5
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	4413      	add	r3, r2
 8005542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	791b      	ldrb	r3, [r3, #4]
 8005554:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005556:	430b      	orrs	r3, r1
 8005558:	4313      	orrs	r3, r2
 800555a:	68ba      	ldr	r2, [r7, #8]
 800555c:	0151      	lsls	r1, r2, #5
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	440a      	add	r2, r1
 8005562:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800556a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800556e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3714      	adds	r7, #20
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
	...

08005580 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	785b      	ldrb	r3, [r3, #1]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d161      	bne.n	8005660 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	015a      	lsls	r2, r3, #5
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	4413      	add	r3, r2
 80055a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055b2:	d11f      	bne.n	80055f4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	015a      	lsls	r2, r3, #5
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	4413      	add	r3, r2
 80055bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	0151      	lsls	r1, r2, #5
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	440a      	add	r2, r1
 80055ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055d2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	015a      	lsls	r2, r3, #5
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	4413      	add	r3, r2
 80055dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	0151      	lsls	r1, r2, #5
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	440a      	add	r2, r1
 80055ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	f003 030f 	and.w	r3, r3, #15
 8005604:	2101      	movs	r1, #1
 8005606:	fa01 f303 	lsl.w	r3, r1, r3
 800560a:	b29b      	uxth	r3, r3
 800560c:	43db      	mvns	r3, r3
 800560e:	68f9      	ldr	r1, [r7, #12]
 8005610:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005614:	4013      	ands	r3, r2
 8005616:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800561e:	69da      	ldr	r2, [r3, #28]
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	f003 030f 	and.w	r3, r3, #15
 8005628:	2101      	movs	r1, #1
 800562a:	fa01 f303 	lsl.w	r3, r1, r3
 800562e:	b29b      	uxth	r3, r3
 8005630:	43db      	mvns	r3, r3
 8005632:	68f9      	ldr	r1, [r7, #12]
 8005634:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005638:	4013      	ands	r3, r2
 800563a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	015a      	lsls	r2, r3, #5
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	4413      	add	r3, r2
 8005644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	0159      	lsls	r1, r3, #5
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	440b      	add	r3, r1
 8005652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005656:	4619      	mov	r1, r3
 8005658:	4b35      	ldr	r3, [pc, #212]	; (8005730 <USB_DeactivateEndpoint+0x1b0>)
 800565a:	4013      	ands	r3, r2
 800565c:	600b      	str	r3, [r1, #0]
 800565e:	e060      	b.n	8005722 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	015a      	lsls	r2, r3, #5
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	4413      	add	r3, r2
 8005668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005672:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005676:	d11f      	bne.n	80056b8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	015a      	lsls	r2, r3, #5
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	4413      	add	r3, r2
 8005680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68ba      	ldr	r2, [r7, #8]
 8005688:	0151      	lsls	r1, r2, #5
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	440a      	add	r2, r1
 800568e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005692:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005696:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	015a      	lsls	r2, r3, #5
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	4413      	add	r3, r2
 80056a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	0151      	lsls	r1, r2, #5
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	440a      	add	r2, r1
 80056ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	f003 030f 	and.w	r3, r3, #15
 80056c8:	2101      	movs	r1, #1
 80056ca:	fa01 f303 	lsl.w	r3, r1, r3
 80056ce:	041b      	lsls	r3, r3, #16
 80056d0:	43db      	mvns	r3, r3
 80056d2:	68f9      	ldr	r1, [r7, #12]
 80056d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056d8:	4013      	ands	r3, r2
 80056da:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e2:	69da      	ldr	r2, [r3, #28]
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	f003 030f 	and.w	r3, r3, #15
 80056ec:	2101      	movs	r1, #1
 80056ee:	fa01 f303 	lsl.w	r3, r1, r3
 80056f2:	041b      	lsls	r3, r3, #16
 80056f4:	43db      	mvns	r3, r3
 80056f6:	68f9      	ldr	r1, [r7, #12]
 80056f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056fc:	4013      	ands	r3, r2
 80056fe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	015a      	lsls	r2, r3, #5
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	4413      	add	r3, r2
 8005708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	0159      	lsls	r1, r3, #5
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	440b      	add	r3, r1
 8005716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800571a:	4619      	mov	r1, r3
 800571c:	4b05      	ldr	r3, [pc, #20]	; (8005734 <USB_DeactivateEndpoint+0x1b4>)
 800571e:	4013      	ands	r3, r2
 8005720:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3714      	adds	r7, #20
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr
 8005730:	ec337800 	.word	0xec337800
 8005734:	eff37800 	.word	0xeff37800

08005738 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b08a      	sub	sp, #40	; 0x28
 800573c:	af02      	add	r7, sp, #8
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	4613      	mov	r3, r2
 8005744:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	785b      	ldrb	r3, [r3, #1]
 8005754:	2b01      	cmp	r3, #1
 8005756:	f040 815c 	bne.w	8005a12 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d132      	bne.n	80057c8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	015a      	lsls	r2, r3, #5
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	4413      	add	r3, r2
 800576a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	69ba      	ldr	r2, [r7, #24]
 8005772:	0151      	lsls	r1, r2, #5
 8005774:	69fa      	ldr	r2, [r7, #28]
 8005776:	440a      	add	r2, r1
 8005778:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800577c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005780:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005784:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	015a      	lsls	r2, r3, #5
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	4413      	add	r3, r2
 800578e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	69ba      	ldr	r2, [r7, #24]
 8005796:	0151      	lsls	r1, r2, #5
 8005798:	69fa      	ldr	r2, [r7, #28]
 800579a:	440a      	add	r2, r1
 800579c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	015a      	lsls	r2, r3, #5
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	4413      	add	r3, r2
 80057ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	69ba      	ldr	r2, [r7, #24]
 80057b6:	0151      	lsls	r1, r2, #5
 80057b8:	69fa      	ldr	r2, [r7, #28]
 80057ba:	440a      	add	r2, r1
 80057bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057c0:	0cdb      	lsrs	r3, r3, #19
 80057c2:	04db      	lsls	r3, r3, #19
 80057c4:	6113      	str	r3, [r2, #16]
 80057c6:	e074      	b.n	80058b2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	015a      	lsls	r2, r3, #5
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	4413      	add	r3, r2
 80057d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	69ba      	ldr	r2, [r7, #24]
 80057d8:	0151      	lsls	r1, r2, #5
 80057da:	69fa      	ldr	r2, [r7, #28]
 80057dc:	440a      	add	r2, r1
 80057de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057e2:	0cdb      	lsrs	r3, r3, #19
 80057e4:	04db      	lsls	r3, r3, #19
 80057e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	015a      	lsls	r2, r3, #5
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	4413      	add	r3, r2
 80057f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	69ba      	ldr	r2, [r7, #24]
 80057f8:	0151      	lsls	r1, r2, #5
 80057fa:	69fa      	ldr	r2, [r7, #28]
 80057fc:	440a      	add	r2, r1
 80057fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005802:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005806:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800580a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	4413      	add	r3, r2
 8005814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005818:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	6999      	ldr	r1, [r3, #24]
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	440b      	add	r3, r1
 8005824:	1e59      	subs	r1, r3, #1
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	fbb1 f3f3 	udiv	r3, r1, r3
 800582e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005830:	4b9d      	ldr	r3, [pc, #628]	; (8005aa8 <USB_EPStartXfer+0x370>)
 8005832:	400b      	ands	r3, r1
 8005834:	69b9      	ldr	r1, [r7, #24]
 8005836:	0148      	lsls	r0, r1, #5
 8005838:	69f9      	ldr	r1, [r7, #28]
 800583a:	4401      	add	r1, r0
 800583c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005840:	4313      	orrs	r3, r2
 8005842:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	015a      	lsls	r2, r3, #5
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	4413      	add	r3, r2
 800584c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005850:	691a      	ldr	r2, [r3, #16]
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800585a:	69b9      	ldr	r1, [r7, #24]
 800585c:	0148      	lsls	r0, r1, #5
 800585e:	69f9      	ldr	r1, [r7, #28]
 8005860:	4401      	add	r1, r0
 8005862:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005866:	4313      	orrs	r3, r2
 8005868:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	791b      	ldrb	r3, [r3, #4]
 800586e:	2b01      	cmp	r3, #1
 8005870:	d11f      	bne.n	80058b2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	015a      	lsls	r2, r3, #5
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	4413      	add	r3, r2
 800587a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	0151      	lsls	r1, r2, #5
 8005884:	69fa      	ldr	r2, [r7, #28]
 8005886:	440a      	add	r2, r1
 8005888:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800588c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005890:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	015a      	lsls	r2, r3, #5
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	4413      	add	r3, r2
 800589a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	69ba      	ldr	r2, [r7, #24]
 80058a2:	0151      	lsls	r1, r2, #5
 80058a4:	69fa      	ldr	r2, [r7, #28]
 80058a6:	440a      	add	r2, r1
 80058a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058b0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80058b2:	79fb      	ldrb	r3, [r7, #7]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d14b      	bne.n	8005950 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	695b      	ldr	r3, [r3, #20]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d009      	beq.n	80058d4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	015a      	lsls	r2, r3, #5
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	4413      	add	r3, r2
 80058c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058cc:	461a      	mov	r2, r3
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	791b      	ldrb	r3, [r3, #4]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d128      	bne.n	800592e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d110      	bne.n	800590e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	015a      	lsls	r2, r3, #5
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	4413      	add	r3, r2
 80058f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	69ba      	ldr	r2, [r7, #24]
 80058fc:	0151      	lsls	r1, r2, #5
 80058fe:	69fa      	ldr	r2, [r7, #28]
 8005900:	440a      	add	r2, r1
 8005902:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005906:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800590a:	6013      	str	r3, [r2, #0]
 800590c:	e00f      	b.n	800592e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	015a      	lsls	r2, r3, #5
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	4413      	add	r3, r2
 8005916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	0151      	lsls	r1, r2, #5
 8005920:	69fa      	ldr	r2, [r7, #28]
 8005922:	440a      	add	r2, r1
 8005924:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800592c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	015a      	lsls	r2, r3, #5
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	4413      	add	r3, r2
 8005936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	69ba      	ldr	r2, [r7, #24]
 800593e:	0151      	lsls	r1, r2, #5
 8005940:	69fa      	ldr	r2, [r7, #28]
 8005942:	440a      	add	r2, r1
 8005944:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005948:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800594c:	6013      	str	r3, [r2, #0]
 800594e:	e133      	b.n	8005bb8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	015a      	lsls	r2, r3, #5
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	4413      	add	r3, r2
 8005958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	69ba      	ldr	r2, [r7, #24]
 8005960:	0151      	lsls	r1, r2, #5
 8005962:	69fa      	ldr	r2, [r7, #28]
 8005964:	440a      	add	r2, r1
 8005966:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800596a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800596e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	791b      	ldrb	r3, [r3, #4]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d015      	beq.n	80059a4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	2b00      	cmp	r3, #0
 800597e:	f000 811b 	beq.w	8005bb8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005988:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	f003 030f 	and.w	r3, r3, #15
 8005992:	2101      	movs	r1, #1
 8005994:	fa01 f303 	lsl.w	r3, r1, r3
 8005998:	69f9      	ldr	r1, [r7, #28]
 800599a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800599e:	4313      	orrs	r3, r2
 80059a0:	634b      	str	r3, [r1, #52]	; 0x34
 80059a2:	e109      	b.n	8005bb8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d110      	bne.n	80059d6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	015a      	lsls	r2, r3, #5
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	4413      	add	r3, r2
 80059bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	69ba      	ldr	r2, [r7, #24]
 80059c4:	0151      	lsls	r1, r2, #5
 80059c6:	69fa      	ldr	r2, [r7, #28]
 80059c8:	440a      	add	r2, r1
 80059ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80059d2:	6013      	str	r3, [r2, #0]
 80059d4:	e00f      	b.n	80059f6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	015a      	lsls	r2, r3, #5
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	4413      	add	r3, r2
 80059de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	69ba      	ldr	r2, [r7, #24]
 80059e6:	0151      	lsls	r1, r2, #5
 80059e8:	69fa      	ldr	r2, [r7, #28]
 80059ea:	440a      	add	r2, r1
 80059ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059f4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	6919      	ldr	r1, [r3, #16]
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	781a      	ldrb	r2, [r3, #0]
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	b298      	uxth	r0, r3
 8005a04:	79fb      	ldrb	r3, [r7, #7]
 8005a06:	9300      	str	r3, [sp, #0]
 8005a08:	4603      	mov	r3, r0
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f000 fade 	bl	8005fcc <USB_WritePacket>
 8005a10:	e0d2      	b.n	8005bb8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	015a      	lsls	r2, r3, #5
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	4413      	add	r3, r2
 8005a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	69ba      	ldr	r2, [r7, #24]
 8005a22:	0151      	lsls	r1, r2, #5
 8005a24:	69fa      	ldr	r2, [r7, #28]
 8005a26:	440a      	add	r2, r1
 8005a28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a2c:	0cdb      	lsrs	r3, r3, #19
 8005a2e:	04db      	lsls	r3, r3, #19
 8005a30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	015a      	lsls	r2, r3, #5
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	4413      	add	r3, r2
 8005a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	69ba      	ldr	r2, [r7, #24]
 8005a42:	0151      	lsls	r1, r2, #5
 8005a44:	69fa      	ldr	r2, [r7, #28]
 8005a46:	440a      	add	r2, r1
 8005a48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a4c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a50:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a54:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d126      	bne.n	8005aac <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	015a      	lsls	r2, r3, #5
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	4413      	add	r3, r2
 8005a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a6a:	691a      	ldr	r2, [r3, #16]
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a74:	69b9      	ldr	r1, [r7, #24]
 8005a76:	0148      	lsls	r0, r1, #5
 8005a78:	69f9      	ldr	r1, [r7, #28]
 8005a7a:	4401      	add	r1, r0
 8005a7c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a80:	4313      	orrs	r3, r2
 8005a82:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	015a      	lsls	r2, r3, #5
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	69ba      	ldr	r2, [r7, #24]
 8005a94:	0151      	lsls	r1, r2, #5
 8005a96:	69fa      	ldr	r2, [r7, #28]
 8005a98:	440a      	add	r2, r1
 8005a9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005aa2:	6113      	str	r3, [r2, #16]
 8005aa4:	e03a      	b.n	8005b1c <USB_EPStartXfer+0x3e4>
 8005aa6:	bf00      	nop
 8005aa8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	699a      	ldr	r2, [r3, #24]
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	1e5a      	subs	r2, r3, #1
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ac0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	8afa      	ldrh	r2, [r7, #22]
 8005ac8:	fb03 f202 	mul.w	r2, r3, r2
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	015a      	lsls	r2, r3, #5
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005adc:	691a      	ldr	r2, [r3, #16]
 8005ade:	8afb      	ldrh	r3, [r7, #22]
 8005ae0:	04d9      	lsls	r1, r3, #19
 8005ae2:	4b38      	ldr	r3, [pc, #224]	; (8005bc4 <USB_EPStartXfer+0x48c>)
 8005ae4:	400b      	ands	r3, r1
 8005ae6:	69b9      	ldr	r1, [r7, #24]
 8005ae8:	0148      	lsls	r0, r1, #5
 8005aea:	69f9      	ldr	r1, [r7, #28]
 8005aec:	4401      	add	r1, r0
 8005aee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005af2:	4313      	orrs	r3, r2
 8005af4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	015a      	lsls	r2, r3, #5
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	4413      	add	r3, r2
 8005afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b02:	691a      	ldr	r2, [r3, #16]
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	69db      	ldr	r3, [r3, #28]
 8005b08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b0c:	69b9      	ldr	r1, [r7, #24]
 8005b0e:	0148      	lsls	r0, r1, #5
 8005b10:	69f9      	ldr	r1, [r7, #28]
 8005b12:	4401      	add	r1, r0
 8005b14:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005b1c:	79fb      	ldrb	r3, [r7, #7]
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d10d      	bne.n	8005b3e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d009      	beq.n	8005b3e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	6919      	ldr	r1, [r3, #16]
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	015a      	lsls	r2, r3, #5
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	4413      	add	r3, r2
 8005b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b3a:	460a      	mov	r2, r1
 8005b3c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	791b      	ldrb	r3, [r3, #4]
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d128      	bne.n	8005b98 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d110      	bne.n	8005b78 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	015a      	lsls	r2, r3, #5
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	69ba      	ldr	r2, [r7, #24]
 8005b66:	0151      	lsls	r1, r2, #5
 8005b68:	69fa      	ldr	r2, [r7, #28]
 8005b6a:	440a      	add	r2, r1
 8005b6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b74:	6013      	str	r3, [r2, #0]
 8005b76:	e00f      	b.n	8005b98 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	015a      	lsls	r2, r3, #5
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	4413      	add	r3, r2
 8005b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	69ba      	ldr	r2, [r7, #24]
 8005b88:	0151      	lsls	r1, r2, #5
 8005b8a:	69fa      	ldr	r2, [r7, #28]
 8005b8c:	440a      	add	r2, r1
 8005b8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b96:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	015a      	lsls	r2, r3, #5
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	69ba      	ldr	r2, [r7, #24]
 8005ba8:	0151      	lsls	r1, r2, #5
 8005baa:	69fa      	ldr	r2, [r7, #28]
 8005bac:	440a      	add	r2, r1
 8005bae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bb2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bb6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3720      	adds	r7, #32
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	1ff80000 	.word	0x1ff80000

08005bc8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b087      	sub	sp, #28
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	785b      	ldrb	r3, [r3, #1]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	f040 80ce 	bne.w	8005d86 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d132      	bne.n	8005c58 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	015a      	lsls	r2, r3, #5
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	0151      	lsls	r1, r2, #5
 8005c04:	697a      	ldr	r2, [r7, #20]
 8005c06:	440a      	add	r2, r1
 8005c08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c0c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c10:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	015a      	lsls	r2, r3, #5
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	693a      	ldr	r2, [r7, #16]
 8005c26:	0151      	lsls	r1, r2, #5
 8005c28:	697a      	ldr	r2, [r7, #20]
 8005c2a:	440a      	add	r2, r1
 8005c2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	015a      	lsls	r2, r3, #5
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	693a      	ldr	r2, [r7, #16]
 8005c46:	0151      	lsls	r1, r2, #5
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	440a      	add	r2, r1
 8005c4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c50:	0cdb      	lsrs	r3, r3, #19
 8005c52:	04db      	lsls	r3, r3, #19
 8005c54:	6113      	str	r3, [r2, #16]
 8005c56:	e04e      	b.n	8005cf6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	015a      	lsls	r2, r3, #5
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	0151      	lsls	r1, r2, #5
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	440a      	add	r2, r1
 8005c6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c72:	0cdb      	lsrs	r3, r3, #19
 8005c74:	04db      	lsls	r3, r3, #19
 8005c76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	015a      	lsls	r2, r3, #5
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	0151      	lsls	r1, r2, #5
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	440a      	add	r2, r1
 8005c8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c92:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c96:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c9a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	699a      	ldr	r2, [r3, #24]
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d903      	bls.n	8005cb0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	68da      	ldr	r2, [r3, #12]
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	015a      	lsls	r2, r3, #5
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	0151      	lsls	r1, r2, #5
 8005cc2:	697a      	ldr	r2, [r7, #20]
 8005cc4:	440a      	add	r2, r1
 8005cc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	015a      	lsls	r2, r3, #5
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cdc:	691a      	ldr	r2, [r3, #16]
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	699b      	ldr	r3, [r3, #24]
 8005ce2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ce6:	6939      	ldr	r1, [r7, #16]
 8005ce8:	0148      	lsls	r0, r1, #5
 8005cea:	6979      	ldr	r1, [r7, #20]
 8005cec:	4401      	add	r1, r0
 8005cee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005cf6:	79fb      	ldrb	r3, [r7, #7]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d11e      	bne.n	8005d3a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	695b      	ldr	r3, [r3, #20]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d009      	beq.n	8005d18 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	015a      	lsls	r2, r3, #5
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d10:	461a      	mov	r2, r3
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	015a      	lsls	r2, r3, #5
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	4413      	add	r3, r2
 8005d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	0151      	lsls	r1, r2, #5
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	440a      	add	r2, r1
 8005d2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d36:	6013      	str	r3, [r2, #0]
 8005d38:	e097      	b.n	8005e6a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	015a      	lsls	r2, r3, #5
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	693a      	ldr	r2, [r7, #16]
 8005d4a:	0151      	lsls	r1, r2, #5
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	440a      	add	r2, r1
 8005d50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d54:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d58:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	699b      	ldr	r3, [r3, #24]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	f000 8083 	beq.w	8005e6a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	f003 030f 	and.w	r3, r3, #15
 8005d74:	2101      	movs	r1, #1
 8005d76:	fa01 f303 	lsl.w	r3, r1, r3
 8005d7a:	6979      	ldr	r1, [r7, #20]
 8005d7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d80:	4313      	orrs	r3, r2
 8005d82:	634b      	str	r3, [r1, #52]	; 0x34
 8005d84:	e071      	b.n	8005e6a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	015a      	lsls	r2, r3, #5
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	0151      	lsls	r1, r2, #5
 8005d98:	697a      	ldr	r2, [r7, #20]
 8005d9a:	440a      	add	r2, r1
 8005d9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005da0:	0cdb      	lsrs	r3, r3, #19
 8005da2:	04db      	lsls	r3, r3, #19
 8005da4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	015a      	lsls	r2, r3, #5
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	4413      	add	r3, r2
 8005dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	0151      	lsls	r1, r2, #5
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	440a      	add	r2, r1
 8005dbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dc0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005dc4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005dc8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d003      	beq.n	8005dda <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	68da      	ldr	r2, [r3, #12]
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	68da      	ldr	r2, [r3, #12]
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	015a      	lsls	r2, r3, #5
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	4413      	add	r3, r2
 8005dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	693a      	ldr	r2, [r7, #16]
 8005df2:	0151      	lsls	r1, r2, #5
 8005df4:	697a      	ldr	r2, [r7, #20]
 8005df6:	440a      	add	r2, r1
 8005df8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dfc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	015a      	lsls	r2, r3, #5
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	4413      	add	r3, r2
 8005e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e0e:	691a      	ldr	r2, [r3, #16]
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	69db      	ldr	r3, [r3, #28]
 8005e14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e18:	6939      	ldr	r1, [r7, #16]
 8005e1a:	0148      	lsls	r0, r1, #5
 8005e1c:	6979      	ldr	r1, [r7, #20]
 8005e1e:	4401      	add	r1, r0
 8005e20:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e24:	4313      	orrs	r3, r2
 8005e26:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005e28:	79fb      	ldrb	r3, [r7, #7]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d10d      	bne.n	8005e4a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d009      	beq.n	8005e4a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	6919      	ldr	r1, [r3, #16]
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	015a      	lsls	r2, r3, #5
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	4413      	add	r3, r2
 8005e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e46:	460a      	mov	r2, r1
 8005e48:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	015a      	lsls	r2, r3, #5
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	4413      	add	r3, r2
 8005e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	0151      	lsls	r1, r2, #5
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	440a      	add	r2, r1
 8005e60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e64:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e68:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	371c      	adds	r7, #28
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b087      	sub	sp, #28
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005e82:	2300      	movs	r3, #0
 8005e84:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e86:	2300      	movs	r3, #0
 8005e88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	785b      	ldrb	r3, [r3, #1]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d14a      	bne.n	8005f2c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	015a      	lsls	r2, r3, #5
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005eaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005eae:	f040 8086 	bne.w	8005fbe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	015a      	lsls	r2, r3, #5
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	4413      	add	r3, r2
 8005ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	683a      	ldr	r2, [r7, #0]
 8005ec4:	7812      	ldrb	r2, [r2, #0]
 8005ec6:	0151      	lsls	r1, r2, #5
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	440a      	add	r2, r1
 8005ecc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ed0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ed4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	015a      	lsls	r2, r3, #5
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	4413      	add	r3, r2
 8005ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	683a      	ldr	r2, [r7, #0]
 8005ee8:	7812      	ldrb	r2, [r2, #0]
 8005eea:	0151      	lsls	r1, r2, #5
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	440a      	add	r2, r1
 8005ef0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ef4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ef8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	3301      	adds	r3, #1
 8005efe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f242 7210 	movw	r2, #10000	; 0x2710
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d902      	bls.n	8005f10 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	75fb      	strb	r3, [r7, #23]
          break;
 8005f0e:	e056      	b.n	8005fbe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	015a      	lsls	r2, r3, #5
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	4413      	add	r3, r2
 8005f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f28:	d0e7      	beq.n	8005efa <USB_EPStopXfer+0x82>
 8005f2a:	e048      	b.n	8005fbe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	015a      	lsls	r2, r3, #5
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	4413      	add	r3, r2
 8005f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f44:	d13b      	bne.n	8005fbe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	015a      	lsls	r2, r3, #5
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	4413      	add	r3, r2
 8005f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	683a      	ldr	r2, [r7, #0]
 8005f58:	7812      	ldrb	r2, [r2, #0]
 8005f5a:	0151      	lsls	r1, r2, #5
 8005f5c:	693a      	ldr	r2, [r7, #16]
 8005f5e:	440a      	add	r2, r1
 8005f60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f64:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f68:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	015a      	lsls	r2, r3, #5
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	4413      	add	r3, r2
 8005f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	683a      	ldr	r2, [r7, #0]
 8005f7c:	7812      	ldrb	r2, [r2, #0]
 8005f7e:	0151      	lsls	r1, r2, #5
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	440a      	add	r2, r1
 8005f84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f8c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	3301      	adds	r3, #1
 8005f92:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f242 7210 	movw	r2, #10000	; 0x2710
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d902      	bls.n	8005fa4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	75fb      	strb	r3, [r7, #23]
          break;
 8005fa2:	e00c      	b.n	8005fbe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	015a      	lsls	r2, r3, #5
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	4413      	add	r3, r2
 8005fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fbc:	d0e7      	beq.n	8005f8e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005fbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	371c      	adds	r7, #28
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b089      	sub	sp, #36	; 0x24
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	4611      	mov	r1, r2
 8005fd8:	461a      	mov	r2, r3
 8005fda:	460b      	mov	r3, r1
 8005fdc:	71fb      	strb	r3, [r7, #7]
 8005fde:	4613      	mov	r3, r2
 8005fe0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005fea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d123      	bne.n	800603a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005ff2:	88bb      	ldrh	r3, [r7, #4]
 8005ff4:	3303      	adds	r3, #3
 8005ff6:	089b      	lsrs	r3, r3, #2
 8005ff8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	61bb      	str	r3, [r7, #24]
 8005ffe:	e018      	b.n	8006032 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006000:	79fb      	ldrb	r3, [r7, #7]
 8006002:	031a      	lsls	r2, r3, #12
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	4413      	add	r3, r2
 8006008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800600c:	461a      	mov	r2, r3
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	3301      	adds	r3, #1
 8006018:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	3301      	adds	r3, #1
 800601e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	3301      	adds	r3, #1
 8006024:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	3301      	adds	r3, #1
 800602a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	3301      	adds	r3, #1
 8006030:	61bb      	str	r3, [r7, #24]
 8006032:	69ba      	ldr	r2, [r7, #24]
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	429a      	cmp	r2, r3
 8006038:	d3e2      	bcc.n	8006000 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800603a:	2300      	movs	r3, #0
}
 800603c:	4618      	mov	r0, r3
 800603e:	3724      	adds	r7, #36	; 0x24
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006048:	b480      	push	{r7}
 800604a:	b08b      	sub	sp, #44	; 0x2c
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	4613      	mov	r3, r2
 8006054:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800605e:	88fb      	ldrh	r3, [r7, #6]
 8006060:	089b      	lsrs	r3, r3, #2
 8006062:	b29b      	uxth	r3, r3
 8006064:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006066:	88fb      	ldrh	r3, [r7, #6]
 8006068:	f003 0303 	and.w	r3, r3, #3
 800606c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800606e:	2300      	movs	r3, #0
 8006070:	623b      	str	r3, [r7, #32]
 8006072:	e014      	b.n	800609e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006082:	3301      	adds	r3, #1
 8006084:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006088:	3301      	adds	r3, #1
 800608a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800608c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608e:	3301      	adds	r3, #1
 8006090:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006094:	3301      	adds	r3, #1
 8006096:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006098:	6a3b      	ldr	r3, [r7, #32]
 800609a:	3301      	adds	r3, #1
 800609c:	623b      	str	r3, [r7, #32]
 800609e:	6a3a      	ldr	r2, [r7, #32]
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d3e6      	bcc.n	8006074 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80060a6:	8bfb      	ldrh	r3, [r7, #30]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d01e      	beq.n	80060ea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80060ac:	2300      	movs	r3, #0
 80060ae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060b6:	461a      	mov	r2, r3
 80060b8:	f107 0310 	add.w	r3, r7, #16
 80060bc:	6812      	ldr	r2, [r2, #0]
 80060be:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80060c0:	693a      	ldr	r2, [r7, #16]
 80060c2:	6a3b      	ldr	r3, [r7, #32]
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	00db      	lsls	r3, r3, #3
 80060c8:	fa22 f303 	lsr.w	r3, r2, r3
 80060cc:	b2da      	uxtb	r2, r3
 80060ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d0:	701a      	strb	r2, [r3, #0]
      i++;
 80060d2:	6a3b      	ldr	r3, [r7, #32]
 80060d4:	3301      	adds	r3, #1
 80060d6:	623b      	str	r3, [r7, #32]
      pDest++;
 80060d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060da:	3301      	adds	r3, #1
 80060dc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80060de:	8bfb      	ldrh	r3, [r7, #30]
 80060e0:	3b01      	subs	r3, #1
 80060e2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80060e4:	8bfb      	ldrh	r3, [r7, #30]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d1ea      	bne.n	80060c0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80060ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	372c      	adds	r7, #44	; 0x2c
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	785b      	ldrb	r3, [r3, #1]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d12c      	bne.n	800616e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	015a      	lsls	r2, r3, #5
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	4413      	add	r3, r2
 800611c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	db12      	blt.n	800614c <USB_EPSetStall+0x54>
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d00f      	beq.n	800614c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	015a      	lsls	r2, r3, #5
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	4413      	add	r3, r2
 8006134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	0151      	lsls	r1, r2, #5
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	440a      	add	r2, r1
 8006142:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006146:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800614a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	015a      	lsls	r2, r3, #5
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	4413      	add	r3, r2
 8006154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68ba      	ldr	r2, [r7, #8]
 800615c:	0151      	lsls	r1, r2, #5
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	440a      	add	r2, r1
 8006162:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006166:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800616a:	6013      	str	r3, [r2, #0]
 800616c:	e02b      	b.n	80061c6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	015a      	lsls	r2, r3, #5
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	4413      	add	r3, r2
 8006176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	db12      	blt.n	80061a6 <USB_EPSetStall+0xae>
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00f      	beq.n	80061a6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	015a      	lsls	r2, r3, #5
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	4413      	add	r3, r2
 800618e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68ba      	ldr	r2, [r7, #8]
 8006196:	0151      	lsls	r1, r2, #5
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	440a      	add	r2, r1
 800619c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80061a4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	015a      	lsls	r2, r3, #5
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	4413      	add	r3, r2
 80061ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68ba      	ldr	r2, [r7, #8]
 80061b6:	0151      	lsls	r1, r2, #5
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	440a      	add	r2, r1
 80061bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80061c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3714      	adds	r7, #20
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	785b      	ldrb	r3, [r3, #1]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d128      	bne.n	8006242 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	015a      	lsls	r2, r3, #5
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	4413      	add	r3, r2
 80061f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	0151      	lsls	r1, r2, #5
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	440a      	add	r2, r1
 8006206:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800620a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800620e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	791b      	ldrb	r3, [r3, #4]
 8006214:	2b03      	cmp	r3, #3
 8006216:	d003      	beq.n	8006220 <USB_EPClearStall+0x4c>
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	791b      	ldrb	r3, [r3, #4]
 800621c:	2b02      	cmp	r3, #2
 800621e:	d138      	bne.n	8006292 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	015a      	lsls	r2, r3, #5
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	4413      	add	r3, r2
 8006228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68ba      	ldr	r2, [r7, #8]
 8006230:	0151      	lsls	r1, r2, #5
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	440a      	add	r2, r1
 8006236:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800623a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800623e:	6013      	str	r3, [r2, #0]
 8006240:	e027      	b.n	8006292 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	015a      	lsls	r2, r3, #5
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	4413      	add	r3, r2
 800624a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68ba      	ldr	r2, [r7, #8]
 8006252:	0151      	lsls	r1, r2, #5
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	440a      	add	r2, r1
 8006258:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800625c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006260:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	791b      	ldrb	r3, [r3, #4]
 8006266:	2b03      	cmp	r3, #3
 8006268:	d003      	beq.n	8006272 <USB_EPClearStall+0x9e>
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	791b      	ldrb	r3, [r3, #4]
 800626e:	2b02      	cmp	r3, #2
 8006270:	d10f      	bne.n	8006292 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	015a      	lsls	r2, r3, #5
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	4413      	add	r3, r2
 800627a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68ba      	ldr	r2, [r7, #8]
 8006282:	0151      	lsls	r1, r2, #5
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	440a      	add	r2, r1
 8006288:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800628c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006290:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006292:	2300      	movs	r3, #0
}
 8006294:	4618      	mov	r0, r3
 8006296:	3714      	adds	r7, #20
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	460b      	mov	r3, r1
 80062aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062be:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80062c2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	78fb      	ldrb	r3, [r7, #3]
 80062ce:	011b      	lsls	r3, r3, #4
 80062d0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80062d4:	68f9      	ldr	r1, [r7, #12]
 80062d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062da:	4313      	orrs	r3, r2
 80062dc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3714      	adds	r7, #20
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006306:	f023 0303 	bic.w	r3, r3, #3
 800630a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800631a:	f023 0302 	bic.w	r3, r3, #2
 800631e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3714      	adds	r7, #20
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr

0800632e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800632e:	b480      	push	{r7}
 8006330:	b085      	sub	sp, #20
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006348:	f023 0303 	bic.w	r3, r3, #3
 800634c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800635c:	f043 0302 	orr.w	r3, r3, #2
 8006360:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3714      	adds	r7, #20
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006370:	b480      	push	{r7}
 8006372:	b085      	sub	sp, #20
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	695b      	ldr	r3, [r3, #20]
 800637c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	699b      	ldr	r3, [r3, #24]
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	4013      	ands	r3, r2
 8006386:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006388:	68fb      	ldr	r3, [r7, #12]
}
 800638a:	4618      	mov	r0, r3
 800638c:	3714      	adds	r7, #20
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr

08006396 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006396:	b480      	push	{r7}
 8006398:	b085      	sub	sp, #20
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063b2:	69db      	ldr	r3, [r3, #28]
 80063b4:	68ba      	ldr	r2, [r7, #8]
 80063b6:	4013      	ands	r3, r2
 80063b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	0c1b      	lsrs	r3, r3, #16
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3714      	adds	r7, #20
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr

080063ca <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80063ca:	b480      	push	{r7}
 80063cc:	b085      	sub	sp, #20
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063e6:	69db      	ldr	r3, [r3, #28]
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	4013      	ands	r3, r2
 80063ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	b29b      	uxth	r3, r3
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3714      	adds	r7, #20
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr

080063fe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80063fe:	b480      	push	{r7}
 8006400:	b085      	sub	sp, #20
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
 8006406:	460b      	mov	r3, r1
 8006408:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800640e:	78fb      	ldrb	r3, [r7, #3]
 8006410:	015a      	lsls	r2, r3, #5
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	4413      	add	r3, r2
 8006416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006424:	695b      	ldr	r3, [r3, #20]
 8006426:	68ba      	ldr	r2, [r7, #8]
 8006428:	4013      	ands	r3, r2
 800642a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800642c:	68bb      	ldr	r3, [r7, #8]
}
 800642e:	4618      	mov	r0, r3
 8006430:	3714      	adds	r7, #20
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr

0800643a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800643a:	b480      	push	{r7}
 800643c:	b087      	sub	sp, #28
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
 8006442:	460b      	mov	r3, r1
 8006444:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800645a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800645c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800645e:	78fb      	ldrb	r3, [r7, #3]
 8006460:	f003 030f 	and.w	r3, r3, #15
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	fa22 f303 	lsr.w	r3, r2, r3
 800646a:	01db      	lsls	r3, r3, #7
 800646c:	b2db      	uxtb	r3, r3
 800646e:	693a      	ldr	r2, [r7, #16]
 8006470:	4313      	orrs	r3, r2
 8006472:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006474:	78fb      	ldrb	r3, [r7, #3]
 8006476:	015a      	lsls	r2, r3, #5
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	4413      	add	r3, r2
 800647c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	693a      	ldr	r2, [r7, #16]
 8006484:	4013      	ands	r3, r2
 8006486:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006488:	68bb      	ldr	r3, [r7, #8]
}
 800648a:	4618      	mov	r0, r3
 800648c:	371c      	adds	r7, #28
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr

08006496 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006496:	b480      	push	{r7}
 8006498:	b083      	sub	sp, #12
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	695b      	ldr	r3, [r3, #20]
 80064a2:	f003 0301 	and.w	r3, r3, #1
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	370c      	adds	r7, #12
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr

080064b2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80064b2:	b480      	push	{r7}
 80064b4:	b085      	sub	sp, #20
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064cc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80064d0:	f023 0307 	bic.w	r3, r3, #7
 80064d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3714      	adds	r7, #20
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b087      	sub	sp, #28
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	460b      	mov	r3, r1
 8006502:	607a      	str	r2, [r7, #4]
 8006504:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	333c      	adds	r3, #60	; 0x3c
 800650e:	3304      	adds	r3, #4
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	4a26      	ldr	r2, [pc, #152]	; (80065b0 <USB_EP0_OutStart+0xb8>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d90a      	bls.n	8006532 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006528:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800652c:	d101      	bne.n	8006532 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800652e:	2300      	movs	r3, #0
 8006530:	e037      	b.n	80065a2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006538:	461a      	mov	r2, r3
 800653a:	2300      	movs	r3, #0
 800653c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	697a      	ldr	r2, [r7, #20]
 8006548:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800654c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006550:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006560:	f043 0318 	orr.w	r3, r3, #24
 8006564:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006574:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006578:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800657a:	7afb      	ldrb	r3, [r7, #11]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d10f      	bne.n	80065a0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006586:	461a      	mov	r2, r3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	697a      	ldr	r2, [r7, #20]
 8006596:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800659a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800659e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	371c      	adds	r7, #28
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	4f54300a 	.word	0x4f54300a

080065b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065bc:	2300      	movs	r3, #0
 80065be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	3301      	adds	r3, #1
 80065c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	4a13      	ldr	r2, [pc, #76]	; (8006618 <USB_CoreReset+0x64>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d901      	bls.n	80065d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e01b      	b.n	800660a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	daf2      	bge.n	80065c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80065da:	2300      	movs	r3, #0
 80065dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	f043 0201 	orr.w	r2, r3, #1
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	3301      	adds	r3, #1
 80065ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	4a09      	ldr	r2, [pc, #36]	; (8006618 <USB_CoreReset+0x64>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d901      	bls.n	80065fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e006      	b.n	800660a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	f003 0301 	and.w	r3, r3, #1
 8006604:	2b01      	cmp	r3, #1
 8006606:	d0f0      	beq.n	80065ea <USB_CoreReset+0x36>

  return HAL_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	3714      	adds	r7, #20
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr
 8006616:	bf00      	nop
 8006618:	00030d40 	.word	0x00030d40

0800661c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	460b      	mov	r3, r1
 8006626:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006628:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800662c:	f002 fcaa 	bl	8008f84 <USBD_static_malloc>
 8006630:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d109      	bne.n	800664c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	32b0      	adds	r2, #176	; 0xb0
 8006642:	2100      	movs	r1, #0
 8006644:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006648:	2302      	movs	r3, #2
 800664a:	e0d4      	b.n	80067f6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800664c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006650:	2100      	movs	r1, #0
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f002 fcfe 	bl	8009054 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	32b0      	adds	r2, #176	; 0xb0
 8006662:	68f9      	ldr	r1, [r7, #12]
 8006664:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	32b0      	adds	r2, #176	; 0xb0
 8006672:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	7c1b      	ldrb	r3, [r3, #16]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d138      	bne.n	80066f6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006684:	4b5e      	ldr	r3, [pc, #376]	; (8006800 <USBD_CDC_Init+0x1e4>)
 8006686:	7819      	ldrb	r1, [r3, #0]
 8006688:	f44f 7300 	mov.w	r3, #512	; 0x200
 800668c:	2202      	movs	r2, #2
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f002 fb55 	bl	8008d3e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006694:	4b5a      	ldr	r3, [pc, #360]	; (8006800 <USBD_CDC_Init+0x1e4>)
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	f003 020f 	and.w	r2, r3, #15
 800669c:	6879      	ldr	r1, [r7, #4]
 800669e:	4613      	mov	r3, r2
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	4413      	add	r3, r2
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	440b      	add	r3, r1
 80066a8:	3324      	adds	r3, #36	; 0x24
 80066aa:	2201      	movs	r2, #1
 80066ac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80066ae:	4b55      	ldr	r3, [pc, #340]	; (8006804 <USBD_CDC_Init+0x1e8>)
 80066b0:	7819      	ldrb	r1, [r3, #0]
 80066b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066b6:	2202      	movs	r2, #2
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f002 fb40 	bl	8008d3e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80066be:	4b51      	ldr	r3, [pc, #324]	; (8006804 <USBD_CDC_Init+0x1e8>)
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	f003 020f 	and.w	r2, r3, #15
 80066c6:	6879      	ldr	r1, [r7, #4]
 80066c8:	4613      	mov	r3, r2
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	4413      	add	r3, r2
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	440b      	add	r3, r1
 80066d2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80066d6:	2201      	movs	r2, #1
 80066d8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80066da:	4b4b      	ldr	r3, [pc, #300]	; (8006808 <USBD_CDC_Init+0x1ec>)
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	f003 020f 	and.w	r2, r3, #15
 80066e2:	6879      	ldr	r1, [r7, #4]
 80066e4:	4613      	mov	r3, r2
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	4413      	add	r3, r2
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	440b      	add	r3, r1
 80066ee:	3326      	adds	r3, #38	; 0x26
 80066f0:	2210      	movs	r2, #16
 80066f2:	801a      	strh	r2, [r3, #0]
 80066f4:	e035      	b.n	8006762 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80066f6:	4b42      	ldr	r3, [pc, #264]	; (8006800 <USBD_CDC_Init+0x1e4>)
 80066f8:	7819      	ldrb	r1, [r3, #0]
 80066fa:	2340      	movs	r3, #64	; 0x40
 80066fc:	2202      	movs	r2, #2
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f002 fb1d 	bl	8008d3e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006704:	4b3e      	ldr	r3, [pc, #248]	; (8006800 <USBD_CDC_Init+0x1e4>)
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	f003 020f 	and.w	r2, r3, #15
 800670c:	6879      	ldr	r1, [r7, #4]
 800670e:	4613      	mov	r3, r2
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	4413      	add	r3, r2
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	440b      	add	r3, r1
 8006718:	3324      	adds	r3, #36	; 0x24
 800671a:	2201      	movs	r2, #1
 800671c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800671e:	4b39      	ldr	r3, [pc, #228]	; (8006804 <USBD_CDC_Init+0x1e8>)
 8006720:	7819      	ldrb	r1, [r3, #0]
 8006722:	2340      	movs	r3, #64	; 0x40
 8006724:	2202      	movs	r2, #2
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f002 fb09 	bl	8008d3e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800672c:	4b35      	ldr	r3, [pc, #212]	; (8006804 <USBD_CDC_Init+0x1e8>)
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	f003 020f 	and.w	r2, r3, #15
 8006734:	6879      	ldr	r1, [r7, #4]
 8006736:	4613      	mov	r3, r2
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	4413      	add	r3, r2
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	440b      	add	r3, r1
 8006740:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006744:	2201      	movs	r2, #1
 8006746:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006748:	4b2f      	ldr	r3, [pc, #188]	; (8006808 <USBD_CDC_Init+0x1ec>)
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	f003 020f 	and.w	r2, r3, #15
 8006750:	6879      	ldr	r1, [r7, #4]
 8006752:	4613      	mov	r3, r2
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	4413      	add	r3, r2
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	440b      	add	r3, r1
 800675c:	3326      	adds	r3, #38	; 0x26
 800675e:	2210      	movs	r2, #16
 8006760:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006762:	4b29      	ldr	r3, [pc, #164]	; (8006808 <USBD_CDC_Init+0x1ec>)
 8006764:	7819      	ldrb	r1, [r3, #0]
 8006766:	2308      	movs	r3, #8
 8006768:	2203      	movs	r2, #3
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f002 fae7 	bl	8008d3e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006770:	4b25      	ldr	r3, [pc, #148]	; (8006808 <USBD_CDC_Init+0x1ec>)
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	f003 020f 	and.w	r2, r3, #15
 8006778:	6879      	ldr	r1, [r7, #4]
 800677a:	4613      	mov	r3, r2
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	4413      	add	r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	440b      	add	r3, r1
 8006784:	3324      	adds	r3, #36	; 0x24
 8006786:	2201      	movs	r2, #1
 8006788:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2200      	movs	r2, #0
 800678e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	33b0      	adds	r3, #176	; 0xb0
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	4413      	add	r3, r2
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d101      	bne.n	80067c4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80067c0:	2302      	movs	r3, #2
 80067c2:	e018      	b.n	80067f6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	7c1b      	ldrb	r3, [r3, #16]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d10a      	bne.n	80067e2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80067cc:	4b0d      	ldr	r3, [pc, #52]	; (8006804 <USBD_CDC_Init+0x1e8>)
 80067ce:	7819      	ldrb	r1, [r3, #0]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f002 fb9e 	bl	8008f1c <USBD_LL_PrepareReceive>
 80067e0:	e008      	b.n	80067f4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80067e2:	4b08      	ldr	r3, [pc, #32]	; (8006804 <USBD_CDC_Init+0x1e8>)
 80067e4:	7819      	ldrb	r1, [r3, #0]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80067ec:	2340      	movs	r3, #64	; 0x40
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f002 fb94 	bl	8008f1c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3710      	adds	r7, #16
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	200001b3 	.word	0x200001b3
 8006804:	200001b4 	.word	0x200001b4
 8006808:	200001b5 	.word	0x200001b5

0800680c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	460b      	mov	r3, r1
 8006816:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006818:	4b3a      	ldr	r3, [pc, #232]	; (8006904 <USBD_CDC_DeInit+0xf8>)
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	4619      	mov	r1, r3
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f002 fab3 	bl	8008d8a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006824:	4b37      	ldr	r3, [pc, #220]	; (8006904 <USBD_CDC_DeInit+0xf8>)
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	f003 020f 	and.w	r2, r3, #15
 800682c:	6879      	ldr	r1, [r7, #4]
 800682e:	4613      	mov	r3, r2
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	4413      	add	r3, r2
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	440b      	add	r3, r1
 8006838:	3324      	adds	r3, #36	; 0x24
 800683a:	2200      	movs	r2, #0
 800683c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800683e:	4b32      	ldr	r3, [pc, #200]	; (8006908 <USBD_CDC_DeInit+0xfc>)
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	4619      	mov	r1, r3
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f002 faa0 	bl	8008d8a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800684a:	4b2f      	ldr	r3, [pc, #188]	; (8006908 <USBD_CDC_DeInit+0xfc>)
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	f003 020f 	and.w	r2, r3, #15
 8006852:	6879      	ldr	r1, [r7, #4]
 8006854:	4613      	mov	r3, r2
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	4413      	add	r3, r2
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	440b      	add	r3, r1
 800685e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006862:	2200      	movs	r2, #0
 8006864:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006866:	4b29      	ldr	r3, [pc, #164]	; (800690c <USBD_CDC_DeInit+0x100>)
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	4619      	mov	r1, r3
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f002 fa8c 	bl	8008d8a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006872:	4b26      	ldr	r3, [pc, #152]	; (800690c <USBD_CDC_DeInit+0x100>)
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	f003 020f 	and.w	r2, r3, #15
 800687a:	6879      	ldr	r1, [r7, #4]
 800687c:	4613      	mov	r3, r2
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	4413      	add	r3, r2
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	440b      	add	r3, r1
 8006886:	3324      	adds	r3, #36	; 0x24
 8006888:	2200      	movs	r2, #0
 800688a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800688c:	4b1f      	ldr	r3, [pc, #124]	; (800690c <USBD_CDC_DeInit+0x100>)
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	f003 020f 	and.w	r2, r3, #15
 8006894:	6879      	ldr	r1, [r7, #4]
 8006896:	4613      	mov	r3, r2
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	4413      	add	r3, r2
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	440b      	add	r3, r1
 80068a0:	3326      	adds	r3, #38	; 0x26
 80068a2:	2200      	movs	r2, #0
 80068a4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	32b0      	adds	r2, #176	; 0xb0
 80068b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d01f      	beq.n	80068f8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	33b0      	adds	r3, #176	; 0xb0
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	4413      	add	r3, r2
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	32b0      	adds	r2, #176	; 0xb0
 80068d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068da:	4618      	mov	r0, r3
 80068dc:	f002 fb60 	bl	8008fa0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	32b0      	adds	r2, #176	; 0xb0
 80068ea:	2100      	movs	r1, #0
 80068ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3708      	adds	r7, #8
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	200001b3 	.word	0x200001b3
 8006908:	200001b4 	.word	0x200001b4
 800690c:	200001b5 	.word	0x200001b5

08006910 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b086      	sub	sp, #24
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	32b0      	adds	r2, #176	; 0xb0
 8006924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006928:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800692a:	2300      	movs	r3, #0
 800692c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800692e:	2300      	movs	r3, #0
 8006930:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006932:	2300      	movs	r3, #0
 8006934:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d101      	bne.n	8006940 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800693c:	2303      	movs	r3, #3
 800693e:	e0bf      	b.n	8006ac0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006948:	2b00      	cmp	r3, #0
 800694a:	d050      	beq.n	80069ee <USBD_CDC_Setup+0xde>
 800694c:	2b20      	cmp	r3, #32
 800694e:	f040 80af 	bne.w	8006ab0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	88db      	ldrh	r3, [r3, #6]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d03a      	beq.n	80069d0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	b25b      	sxtb	r3, r3
 8006960:	2b00      	cmp	r3, #0
 8006962:	da1b      	bge.n	800699c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	33b0      	adds	r3, #176	; 0xb0
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	4413      	add	r3, r2
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	683a      	ldr	r2, [r7, #0]
 8006978:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800697a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800697c:	683a      	ldr	r2, [r7, #0]
 800697e:	88d2      	ldrh	r2, [r2, #6]
 8006980:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	88db      	ldrh	r3, [r3, #6]
 8006986:	2b07      	cmp	r3, #7
 8006988:	bf28      	it	cs
 800698a:	2307      	movcs	r3, #7
 800698c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	89fa      	ldrh	r2, [r7, #14]
 8006992:	4619      	mov	r1, r3
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f001 fd89 	bl	80084ac <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800699a:	e090      	b.n	8006abe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	785a      	ldrb	r2, [r3, #1]
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	88db      	ldrh	r3, [r3, #6]
 80069aa:	2b3f      	cmp	r3, #63	; 0x3f
 80069ac:	d803      	bhi.n	80069b6 <USBD_CDC_Setup+0xa6>
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	88db      	ldrh	r3, [r3, #6]
 80069b2:	b2da      	uxtb	r2, r3
 80069b4:	e000      	b.n	80069b8 <USBD_CDC_Setup+0xa8>
 80069b6:	2240      	movs	r2, #64	; 0x40
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80069be:	6939      	ldr	r1, [r7, #16]
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80069c6:	461a      	mov	r2, r3
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f001 fd9b 	bl	8008504 <USBD_CtlPrepareRx>
      break;
 80069ce:	e076      	b.n	8006abe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	33b0      	adds	r3, #176	; 0xb0
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	4413      	add	r3, r2
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	683a      	ldr	r2, [r7, #0]
 80069e4:	7850      	ldrb	r0, [r2, #1]
 80069e6:	2200      	movs	r2, #0
 80069e8:	6839      	ldr	r1, [r7, #0]
 80069ea:	4798      	blx	r3
      break;
 80069ec:	e067      	b.n	8006abe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	785b      	ldrb	r3, [r3, #1]
 80069f2:	2b0b      	cmp	r3, #11
 80069f4:	d851      	bhi.n	8006a9a <USBD_CDC_Setup+0x18a>
 80069f6:	a201      	add	r2, pc, #4	; (adr r2, 80069fc <USBD_CDC_Setup+0xec>)
 80069f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fc:	08006a2d 	.word	0x08006a2d
 8006a00:	08006aa9 	.word	0x08006aa9
 8006a04:	08006a9b 	.word	0x08006a9b
 8006a08:	08006a9b 	.word	0x08006a9b
 8006a0c:	08006a9b 	.word	0x08006a9b
 8006a10:	08006a9b 	.word	0x08006a9b
 8006a14:	08006a9b 	.word	0x08006a9b
 8006a18:	08006a9b 	.word	0x08006a9b
 8006a1c:	08006a9b 	.word	0x08006a9b
 8006a20:	08006a9b 	.word	0x08006a9b
 8006a24:	08006a57 	.word	0x08006a57
 8006a28:	08006a81 	.word	0x08006a81
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	2b03      	cmp	r3, #3
 8006a36:	d107      	bne.n	8006a48 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006a38:	f107 030a 	add.w	r3, r7, #10
 8006a3c:	2202      	movs	r2, #2
 8006a3e:	4619      	mov	r1, r3
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f001 fd33 	bl	80084ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a46:	e032      	b.n	8006aae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006a48:	6839      	ldr	r1, [r7, #0]
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f001 fcbd 	bl	80083ca <USBD_CtlError>
            ret = USBD_FAIL;
 8006a50:	2303      	movs	r3, #3
 8006a52:	75fb      	strb	r3, [r7, #23]
          break;
 8006a54:	e02b      	b.n	8006aae <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	2b03      	cmp	r3, #3
 8006a60:	d107      	bne.n	8006a72 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006a62:	f107 030d 	add.w	r3, r7, #13
 8006a66:	2201      	movs	r2, #1
 8006a68:	4619      	mov	r1, r3
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f001 fd1e 	bl	80084ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a70:	e01d      	b.n	8006aae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006a72:	6839      	ldr	r1, [r7, #0]
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f001 fca8 	bl	80083ca <USBD_CtlError>
            ret = USBD_FAIL;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	75fb      	strb	r3, [r7, #23]
          break;
 8006a7e:	e016      	b.n	8006aae <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	2b03      	cmp	r3, #3
 8006a8a:	d00f      	beq.n	8006aac <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006a8c:	6839      	ldr	r1, [r7, #0]
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f001 fc9b 	bl	80083ca <USBD_CtlError>
            ret = USBD_FAIL;
 8006a94:	2303      	movs	r3, #3
 8006a96:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006a98:	e008      	b.n	8006aac <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006a9a:	6839      	ldr	r1, [r7, #0]
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f001 fc94 	bl	80083ca <USBD_CtlError>
          ret = USBD_FAIL;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	75fb      	strb	r3, [r7, #23]
          break;
 8006aa6:	e002      	b.n	8006aae <USBD_CDC_Setup+0x19e>
          break;
 8006aa8:	bf00      	nop
 8006aaa:	e008      	b.n	8006abe <USBD_CDC_Setup+0x1ae>
          break;
 8006aac:	bf00      	nop
      }
      break;
 8006aae:	e006      	b.n	8006abe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006ab0:	6839      	ldr	r1, [r7, #0]
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f001 fc89 	bl	80083ca <USBD_CtlError>
      ret = USBD_FAIL;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	75fb      	strb	r3, [r7, #23]
      break;
 8006abc:	bf00      	nop
  }

  return (uint8_t)ret;
 8006abe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3718      	adds	r7, #24
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006ada:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	32b0      	adds	r2, #176	; 0xb0
 8006ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d101      	bne.n	8006af2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006aee:	2303      	movs	r3, #3
 8006af0:	e065      	b.n	8006bbe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	32b0      	adds	r2, #176	; 0xb0
 8006afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b00:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006b02:	78fb      	ldrb	r3, [r7, #3]
 8006b04:	f003 020f 	and.w	r2, r3, #15
 8006b08:	6879      	ldr	r1, [r7, #4]
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	4413      	add	r3, r2
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	440b      	add	r3, r1
 8006b14:	3318      	adds	r3, #24
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d02f      	beq.n	8006b7c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006b1c:	78fb      	ldrb	r3, [r7, #3]
 8006b1e:	f003 020f 	and.w	r2, r3, #15
 8006b22:	6879      	ldr	r1, [r7, #4]
 8006b24:	4613      	mov	r3, r2
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	4413      	add	r3, r2
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	440b      	add	r3, r1
 8006b2e:	3318      	adds	r3, #24
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	78fb      	ldrb	r3, [r7, #3]
 8006b34:	f003 010f 	and.w	r1, r3, #15
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	00db      	lsls	r3, r3, #3
 8006b3e:	440b      	add	r3, r1
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	4403      	add	r3, r0
 8006b44:	3348      	adds	r3, #72	; 0x48
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	fbb2 f1f3 	udiv	r1, r2, r3
 8006b4c:	fb01 f303 	mul.w	r3, r1, r3
 8006b50:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d112      	bne.n	8006b7c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006b56:	78fb      	ldrb	r3, [r7, #3]
 8006b58:	f003 020f 	and.w	r2, r3, #15
 8006b5c:	6879      	ldr	r1, [r7, #4]
 8006b5e:	4613      	mov	r3, r2
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	4413      	add	r3, r2
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	440b      	add	r3, r1
 8006b68:	3318      	adds	r3, #24
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006b6e:	78f9      	ldrb	r1, [r7, #3]
 8006b70:	2300      	movs	r3, #0
 8006b72:	2200      	movs	r2, #0
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f002 f9b0 	bl	8008eda <USBD_LL_Transmit>
 8006b7a:	e01f      	b.n	8006bbc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	33b0      	adds	r3, #176	; 0xb0
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	4413      	add	r3, r2
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d010      	beq.n	8006bbc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	33b0      	adds	r3, #176	; 0xb0
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	4413      	add	r3, r2
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	691b      	ldr	r3, [r3, #16]
 8006bac:	68ba      	ldr	r2, [r7, #8]
 8006bae:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006bb2:	68ba      	ldr	r2, [r7, #8]
 8006bb4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006bb8:	78fa      	ldrb	r2, [r7, #3]
 8006bba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006bbc:	2300      	movs	r3, #0
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3710      	adds	r7, #16
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b084      	sub	sp, #16
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
 8006bce:	460b      	mov	r3, r1
 8006bd0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	32b0      	adds	r2, #176	; 0xb0
 8006bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006be0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	32b0      	adds	r2, #176	; 0xb0
 8006bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d101      	bne.n	8006bf8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	e01a      	b.n	8006c2e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006bf8:	78fb      	ldrb	r3, [r7, #3]
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f002 f9ae 	bl	8008f5e <USBD_LL_GetRxDataSize>
 8006c02:	4602      	mov	r2, r0
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	33b0      	adds	r3, #176	; 0xb0
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4413      	add	r3, r2
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006c28:	4611      	mov	r1, r2
 8006c2a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3710      	adds	r7, #16
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b084      	sub	sp, #16
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	32b0      	adds	r2, #176	; 0xb0
 8006c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c4c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d101      	bne.n	8006c58 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006c54:	2303      	movs	r3, #3
 8006c56:	e025      	b.n	8006ca4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	33b0      	adds	r3, #176	; 0xb0
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	4413      	add	r3, r2
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d01a      	beq.n	8006ca2 <USBD_CDC_EP0_RxReady+0x6c>
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006c72:	2bff      	cmp	r3, #255	; 0xff
 8006c74:	d015      	beq.n	8006ca2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	33b0      	adds	r3, #176	; 0xb0
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	4413      	add	r3, r2
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006c8e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006c96:	b292      	uxth	r2, r2
 8006c98:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	22ff      	movs	r2, #255	; 0xff
 8006c9e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006ca2:	2300      	movs	r3, #0
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3710      	adds	r7, #16
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b086      	sub	sp, #24
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006cb4:	2182      	movs	r1, #130	; 0x82
 8006cb6:	4818      	ldr	r0, [pc, #96]	; (8006d18 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006cb8:	f000 fd4f 	bl	800775a <USBD_GetEpDesc>
 8006cbc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006cbe:	2101      	movs	r1, #1
 8006cc0:	4815      	ldr	r0, [pc, #84]	; (8006d18 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006cc2:	f000 fd4a 	bl	800775a <USBD_GetEpDesc>
 8006cc6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006cc8:	2181      	movs	r1, #129	; 0x81
 8006cca:	4813      	ldr	r0, [pc, #76]	; (8006d18 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006ccc:	f000 fd45 	bl	800775a <USBD_GetEpDesc>
 8006cd0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d002      	beq.n	8006cde <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	2210      	movs	r2, #16
 8006cdc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d006      	beq.n	8006cf2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cec:	711a      	strb	r2, [r3, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d006      	beq.n	8006d06 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d00:	711a      	strb	r2, [r3, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2243      	movs	r2, #67	; 0x43
 8006d0a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006d0c:	4b02      	ldr	r3, [pc, #8]	; (8006d18 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3718      	adds	r7, #24
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	20000170 	.word	0x20000170

08006d1c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b086      	sub	sp, #24
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006d24:	2182      	movs	r1, #130	; 0x82
 8006d26:	4818      	ldr	r0, [pc, #96]	; (8006d88 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d28:	f000 fd17 	bl	800775a <USBD_GetEpDesc>
 8006d2c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d2e:	2101      	movs	r1, #1
 8006d30:	4815      	ldr	r0, [pc, #84]	; (8006d88 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d32:	f000 fd12 	bl	800775a <USBD_GetEpDesc>
 8006d36:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d38:	2181      	movs	r1, #129	; 0x81
 8006d3a:	4813      	ldr	r0, [pc, #76]	; (8006d88 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d3c:	f000 fd0d 	bl	800775a <USBD_GetEpDesc>
 8006d40:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d002      	beq.n	8006d4e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	2210      	movs	r2, #16
 8006d4c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d006      	beq.n	8006d62 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	2200      	movs	r2, #0
 8006d58:	711a      	strb	r2, [r3, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f042 0202 	orr.w	r2, r2, #2
 8006d60:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d006      	beq.n	8006d76 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	711a      	strb	r2, [r3, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f042 0202 	orr.w	r2, r2, #2
 8006d74:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2243      	movs	r2, #67	; 0x43
 8006d7a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006d7c:	4b02      	ldr	r3, [pc, #8]	; (8006d88 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3718      	adds	r7, #24
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	20000170 	.word	0x20000170

08006d8c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b086      	sub	sp, #24
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006d94:	2182      	movs	r1, #130	; 0x82
 8006d96:	4818      	ldr	r0, [pc, #96]	; (8006df8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d98:	f000 fcdf 	bl	800775a <USBD_GetEpDesc>
 8006d9c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d9e:	2101      	movs	r1, #1
 8006da0:	4815      	ldr	r0, [pc, #84]	; (8006df8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006da2:	f000 fcda 	bl	800775a <USBD_GetEpDesc>
 8006da6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006da8:	2181      	movs	r1, #129	; 0x81
 8006daa:	4813      	ldr	r0, [pc, #76]	; (8006df8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006dac:	f000 fcd5 	bl	800775a <USBD_GetEpDesc>
 8006db0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d002      	beq.n	8006dbe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	2210      	movs	r2, #16
 8006dbc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d006      	beq.n	8006dd2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006dcc:	711a      	strb	r2, [r3, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d006      	beq.n	8006de6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006de0:	711a      	strb	r2, [r3, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2243      	movs	r2, #67	; 0x43
 8006dea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006dec:	4b02      	ldr	r3, [pc, #8]	; (8006df8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3718      	adds	r7, #24
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	20000170 	.word	0x20000170

08006dfc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	220a      	movs	r2, #10
 8006e08:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006e0a:	4b03      	ldr	r3, [pc, #12]	; (8006e18 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr
 8006e18:	2000012c 	.word	0x2000012c

08006e1c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d101      	bne.n	8006e30 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	e009      	b.n	8006e44 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	33b0      	adds	r3, #176	; 0xb0
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	4413      	add	r3, r2
 8006e3e:	683a      	ldr	r2, [r7, #0]
 8006e40:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b087      	sub	sp, #28
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	32b0      	adds	r2, #176	; 0xb0
 8006e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e6a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d101      	bne.n	8006e76 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006e72:	2303      	movs	r3, #3
 8006e74:	e008      	b.n	8006e88 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	68ba      	ldr	r2, [r7, #8]
 8006e7a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	371c      	adds	r7, #28
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	32b0      	adds	r2, #176	; 0xb0
 8006ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d101      	bne.n	8006eb8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	e004      	b.n	8006ec2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	683a      	ldr	r2, [r7, #0]
 8006ebc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3714      	adds	r7, #20
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
	...

08006ed0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	32b0      	adds	r2, #176	; 0xb0
 8006ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ee6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	32b0      	adds	r2, #176	; 0xb0
 8006ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d101      	bne.n	8006f02 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006efe:	2303      	movs	r3, #3
 8006f00:	e025      	b.n	8006f4e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d11f      	bne.n	8006f4c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006f14:	4b10      	ldr	r3, [pc, #64]	; (8006f58 <USBD_CDC_TransmitPacket+0x88>)
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	f003 020f 	and.w	r2, r3, #15
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	4613      	mov	r3, r2
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	4413      	add	r3, r2
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	4403      	add	r3, r0
 8006f2e:	3318      	adds	r3, #24
 8006f30:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006f32:	4b09      	ldr	r3, [pc, #36]	; (8006f58 <USBD_CDC_TransmitPacket+0x88>)
 8006f34:	7819      	ldrb	r1, [r3, #0]
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f001 ffc9 	bl	8008eda <USBD_LL_Transmit>

    ret = USBD_OK;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	200001b3 	.word	0x200001b3

08006f5c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	32b0      	adds	r2, #176	; 0xb0
 8006f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f72:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	32b0      	adds	r2, #176	; 0xb0
 8006f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d101      	bne.n	8006f8a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006f86:	2303      	movs	r3, #3
 8006f88:	e018      	b.n	8006fbc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	7c1b      	ldrb	r3, [r3, #16]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d10a      	bne.n	8006fa8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f92:	4b0c      	ldr	r3, [pc, #48]	; (8006fc4 <USBD_CDC_ReceivePacket+0x68>)
 8006f94:	7819      	ldrb	r1, [r3, #0]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f001 ffbb 	bl	8008f1c <USBD_LL_PrepareReceive>
 8006fa6:	e008      	b.n	8006fba <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006fa8:	4b06      	ldr	r3, [pc, #24]	; (8006fc4 <USBD_CDC_ReceivePacket+0x68>)
 8006faa:	7819      	ldrb	r1, [r3, #0]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006fb2:	2340      	movs	r3, #64	; 0x40
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f001 ffb1 	bl	8008f1c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3710      	adds	r7, #16
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}
 8006fc4:	200001b4 	.word	0x200001b4

08006fc8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b086      	sub	sp, #24
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d101      	bne.n	8006fe0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	e01f      	b.n	8007020 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d003      	beq.n	8007006 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2201      	movs	r2, #1
 800700a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	79fa      	ldrb	r2, [r7, #7]
 8007012:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	f001 fe2b 	bl	8008c70 <USBD_LL_Init>
 800701a:	4603      	mov	r3, r0
 800701c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800701e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007020:	4618      	mov	r0, r3
 8007022:	3718      	adds	r7, #24
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007032:	2300      	movs	r3, #0
 8007034:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d101      	bne.n	8007040 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800703c:	2303      	movs	r3, #3
 800703e:	e025      	b.n	800708c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	683a      	ldr	r2, [r7, #0]
 8007044:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	32ae      	adds	r2, #174	; 0xae
 8007052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007058:	2b00      	cmp	r3, #0
 800705a:	d00f      	beq.n	800707c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	32ae      	adds	r2, #174	; 0xae
 8007066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800706a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706c:	f107 020e 	add.w	r2, r7, #14
 8007070:	4610      	mov	r0, r2
 8007072:	4798      	blx	r3
 8007074:	4602      	mov	r2, r0
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007082:	1c5a      	adds	r2, r3, #1
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	3710      	adds	r7, #16
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f001 fe33 	bl	8008d08 <USBD_LL_Start>
 80070a2:	4603      	mov	r3, r0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3708      	adds	r7, #8
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80070b4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	370c      	adds	r7, #12
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr

080070c2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b084      	sub	sp, #16
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
 80070ca:	460b      	mov	r3, r1
 80070cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80070ce:	2300      	movs	r3, #0
 80070d0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d009      	beq.n	80070f0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	78fa      	ldrb	r2, [r7, #3]
 80070e6:	4611      	mov	r1, r2
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	4798      	blx	r3
 80070ec:	4603      	mov	r3, r0
 80070ee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80070f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3710      	adds	r7, #16
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}

080070fa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b084      	sub	sp, #16
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
 8007102:	460b      	mov	r3, r1
 8007104:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007106:	2300      	movs	r3, #0
 8007108:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	78fa      	ldrb	r2, [r7, #3]
 8007114:	4611      	mov	r1, r2
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	4798      	blx	r3
 800711a:	4603      	mov	r3, r0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d001      	beq.n	8007124 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007120:	2303      	movs	r3, #3
 8007122:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007124:	7bfb      	ldrb	r3, [r7, #15]
}
 8007126:	4618      	mov	r0, r3
 8007128:	3710      	adds	r7, #16
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b084      	sub	sp, #16
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
 8007136:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800713e:	6839      	ldr	r1, [r7, #0]
 8007140:	4618      	mov	r0, r3
 8007142:	f001 f908 	bl	8008356 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2201      	movs	r2, #1
 800714a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007154:	461a      	mov	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007162:	f003 031f 	and.w	r3, r3, #31
 8007166:	2b02      	cmp	r3, #2
 8007168:	d01a      	beq.n	80071a0 <USBD_LL_SetupStage+0x72>
 800716a:	2b02      	cmp	r3, #2
 800716c:	d822      	bhi.n	80071b4 <USBD_LL_SetupStage+0x86>
 800716e:	2b00      	cmp	r3, #0
 8007170:	d002      	beq.n	8007178 <USBD_LL_SetupStage+0x4a>
 8007172:	2b01      	cmp	r3, #1
 8007174:	d00a      	beq.n	800718c <USBD_LL_SetupStage+0x5e>
 8007176:	e01d      	b.n	80071b4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800717e:	4619      	mov	r1, r3
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 fb5f 	bl	8007844 <USBD_StdDevReq>
 8007186:	4603      	mov	r3, r0
 8007188:	73fb      	strb	r3, [r7, #15]
      break;
 800718a:	e020      	b.n	80071ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007192:	4619      	mov	r1, r3
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 fbc7 	bl	8007928 <USBD_StdItfReq>
 800719a:	4603      	mov	r3, r0
 800719c:	73fb      	strb	r3, [r7, #15]
      break;
 800719e:	e016      	b.n	80071ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80071a6:	4619      	mov	r1, r3
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 fc29 	bl	8007a00 <USBD_StdEPReq>
 80071ae:	4603      	mov	r3, r0
 80071b0:	73fb      	strb	r3, [r7, #15]
      break;
 80071b2:	e00c      	b.n	80071ce <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80071ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	4619      	mov	r1, r3
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f001 fe00 	bl	8008dc8 <USBD_LL_StallEP>
 80071c8:	4603      	mov	r3, r0
 80071ca:	73fb      	strb	r3, [r7, #15]
      break;
 80071cc:	bf00      	nop
  }

  return ret;
 80071ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b086      	sub	sp, #24
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	460b      	mov	r3, r1
 80071e2:	607a      	str	r2, [r7, #4]
 80071e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80071e6:	2300      	movs	r3, #0
 80071e8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80071ea:	7afb      	ldrb	r3, [r7, #11]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d16e      	bne.n	80072ce <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80071f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80071fe:	2b03      	cmp	r3, #3
 8007200:	f040 8098 	bne.w	8007334 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	689a      	ldr	r2, [r3, #8]
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	429a      	cmp	r2, r3
 800720e:	d913      	bls.n	8007238 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	689a      	ldr	r2, [r3, #8]
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	1ad2      	subs	r2, r2, r3
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	68da      	ldr	r2, [r3, #12]
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	4293      	cmp	r3, r2
 8007228:	bf28      	it	cs
 800722a:	4613      	movcs	r3, r2
 800722c:	461a      	mov	r2, r3
 800722e:	6879      	ldr	r1, [r7, #4]
 8007230:	68f8      	ldr	r0, [r7, #12]
 8007232:	f001 f984 	bl	800853e <USBD_CtlContinueRx>
 8007236:	e07d      	b.n	8007334 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800723e:	f003 031f 	and.w	r3, r3, #31
 8007242:	2b02      	cmp	r3, #2
 8007244:	d014      	beq.n	8007270 <USBD_LL_DataOutStage+0x98>
 8007246:	2b02      	cmp	r3, #2
 8007248:	d81d      	bhi.n	8007286 <USBD_LL_DataOutStage+0xae>
 800724a:	2b00      	cmp	r3, #0
 800724c:	d002      	beq.n	8007254 <USBD_LL_DataOutStage+0x7c>
 800724e:	2b01      	cmp	r3, #1
 8007250:	d003      	beq.n	800725a <USBD_LL_DataOutStage+0x82>
 8007252:	e018      	b.n	8007286 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007254:	2300      	movs	r3, #0
 8007256:	75bb      	strb	r3, [r7, #22]
            break;
 8007258:	e018      	b.n	800728c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007260:	b2db      	uxtb	r3, r3
 8007262:	4619      	mov	r1, r3
 8007264:	68f8      	ldr	r0, [r7, #12]
 8007266:	f000 fa5e 	bl	8007726 <USBD_CoreFindIF>
 800726a:	4603      	mov	r3, r0
 800726c:	75bb      	strb	r3, [r7, #22]
            break;
 800726e:	e00d      	b.n	800728c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007276:	b2db      	uxtb	r3, r3
 8007278:	4619      	mov	r1, r3
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	f000 fa60 	bl	8007740 <USBD_CoreFindEP>
 8007280:	4603      	mov	r3, r0
 8007282:	75bb      	strb	r3, [r7, #22]
            break;
 8007284:	e002      	b.n	800728c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007286:	2300      	movs	r3, #0
 8007288:	75bb      	strb	r3, [r7, #22]
            break;
 800728a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800728c:	7dbb      	ldrb	r3, [r7, #22]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d119      	bne.n	80072c6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007298:	b2db      	uxtb	r3, r3
 800729a:	2b03      	cmp	r3, #3
 800729c:	d113      	bne.n	80072c6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800729e:	7dba      	ldrb	r2, [r7, #22]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	32ae      	adds	r2, #174	; 0xae
 80072a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d00b      	beq.n	80072c6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80072ae:	7dba      	ldrb	r2, [r7, #22]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80072b6:	7dba      	ldrb	r2, [r7, #22]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	32ae      	adds	r2, #174	; 0xae
 80072bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	68f8      	ldr	r0, [r7, #12]
 80072c4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80072c6:	68f8      	ldr	r0, [r7, #12]
 80072c8:	f001 f94a 	bl	8008560 <USBD_CtlSendStatus>
 80072cc:	e032      	b.n	8007334 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80072ce:	7afb      	ldrb	r3, [r7, #11]
 80072d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	4619      	mov	r1, r3
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	f000 fa31 	bl	8007740 <USBD_CoreFindEP>
 80072de:	4603      	mov	r3, r0
 80072e0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072e2:	7dbb      	ldrb	r3, [r7, #22]
 80072e4:	2bff      	cmp	r3, #255	; 0xff
 80072e6:	d025      	beq.n	8007334 <USBD_LL_DataOutStage+0x15c>
 80072e8:	7dbb      	ldrb	r3, [r7, #22]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d122      	bne.n	8007334 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	2b03      	cmp	r3, #3
 80072f8:	d117      	bne.n	800732a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80072fa:	7dba      	ldrb	r2, [r7, #22]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	32ae      	adds	r2, #174	; 0xae
 8007300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d00f      	beq.n	800732a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800730a:	7dba      	ldrb	r2, [r7, #22]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007312:	7dba      	ldrb	r2, [r7, #22]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	32ae      	adds	r2, #174	; 0xae
 8007318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800731c:	699b      	ldr	r3, [r3, #24]
 800731e:	7afa      	ldrb	r2, [r7, #11]
 8007320:	4611      	mov	r1, r2
 8007322:	68f8      	ldr	r0, [r7, #12]
 8007324:	4798      	blx	r3
 8007326:	4603      	mov	r3, r0
 8007328:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800732a:	7dfb      	ldrb	r3, [r7, #23]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d001      	beq.n	8007334 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007330:	7dfb      	ldrb	r3, [r7, #23]
 8007332:	e000      	b.n	8007336 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007334:	2300      	movs	r3, #0
}
 8007336:	4618      	mov	r0, r3
 8007338:	3718      	adds	r7, #24
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b086      	sub	sp, #24
 8007342:	af00      	add	r7, sp, #0
 8007344:	60f8      	str	r0, [r7, #12]
 8007346:	460b      	mov	r3, r1
 8007348:	607a      	str	r2, [r7, #4]
 800734a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800734c:	7afb      	ldrb	r3, [r7, #11]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d16f      	bne.n	8007432 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	3314      	adds	r3, #20
 8007356:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800735e:	2b02      	cmp	r3, #2
 8007360:	d15a      	bne.n	8007418 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	689a      	ldr	r2, [r3, #8]
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	429a      	cmp	r2, r3
 800736c:	d914      	bls.n	8007398 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	689a      	ldr	r2, [r3, #8]
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	1ad2      	subs	r2, r2, r3
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	461a      	mov	r2, r3
 8007382:	6879      	ldr	r1, [r7, #4]
 8007384:	68f8      	ldr	r0, [r7, #12]
 8007386:	f001 f8ac 	bl	80084e2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800738a:	2300      	movs	r3, #0
 800738c:	2200      	movs	r2, #0
 800738e:	2100      	movs	r1, #0
 8007390:	68f8      	ldr	r0, [r7, #12]
 8007392:	f001 fdc3 	bl	8008f1c <USBD_LL_PrepareReceive>
 8007396:	e03f      	b.n	8007418 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	68da      	ldr	r2, [r3, #12]
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d11c      	bne.n	80073de <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	685a      	ldr	r2, [r3, #4]
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d316      	bcc.n	80073de <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	685a      	ldr	r2, [r3, #4]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d20f      	bcs.n	80073de <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80073be:	2200      	movs	r2, #0
 80073c0:	2100      	movs	r1, #0
 80073c2:	68f8      	ldr	r0, [r7, #12]
 80073c4:	f001 f88d 	bl	80084e2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073d0:	2300      	movs	r3, #0
 80073d2:	2200      	movs	r2, #0
 80073d4:	2100      	movs	r1, #0
 80073d6:	68f8      	ldr	r0, [r7, #12]
 80073d8:	f001 fda0 	bl	8008f1c <USBD_LL_PrepareReceive>
 80073dc:	e01c      	b.n	8007418 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	2b03      	cmp	r3, #3
 80073e8:	d10f      	bne.n	800740a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d009      	beq.n	800740a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	68f8      	ldr	r0, [r7, #12]
 8007408:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800740a:	2180      	movs	r1, #128	; 0x80
 800740c:	68f8      	ldr	r0, [r7, #12]
 800740e:	f001 fcdb 	bl	8008dc8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007412:	68f8      	ldr	r0, [r7, #12]
 8007414:	f001 f8b7 	bl	8008586 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800741e:	2b00      	cmp	r3, #0
 8007420:	d03a      	beq.n	8007498 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007422:	68f8      	ldr	r0, [r7, #12]
 8007424:	f7ff fe42 	bl	80070ac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2200      	movs	r2, #0
 800742c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007430:	e032      	b.n	8007498 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007432:	7afb      	ldrb	r3, [r7, #11]
 8007434:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007438:	b2db      	uxtb	r3, r3
 800743a:	4619      	mov	r1, r3
 800743c:	68f8      	ldr	r0, [r7, #12]
 800743e:	f000 f97f 	bl	8007740 <USBD_CoreFindEP>
 8007442:	4603      	mov	r3, r0
 8007444:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007446:	7dfb      	ldrb	r3, [r7, #23]
 8007448:	2bff      	cmp	r3, #255	; 0xff
 800744a:	d025      	beq.n	8007498 <USBD_LL_DataInStage+0x15a>
 800744c:	7dfb      	ldrb	r3, [r7, #23]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d122      	bne.n	8007498 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007458:	b2db      	uxtb	r3, r3
 800745a:	2b03      	cmp	r3, #3
 800745c:	d11c      	bne.n	8007498 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800745e:	7dfa      	ldrb	r2, [r7, #23]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	32ae      	adds	r2, #174	; 0xae
 8007464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007468:	695b      	ldr	r3, [r3, #20]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d014      	beq.n	8007498 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800746e:	7dfa      	ldrb	r2, [r7, #23]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007476:	7dfa      	ldrb	r2, [r7, #23]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	32ae      	adds	r2, #174	; 0xae
 800747c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007480:	695b      	ldr	r3, [r3, #20]
 8007482:	7afa      	ldrb	r2, [r7, #11]
 8007484:	4611      	mov	r1, r2
 8007486:	68f8      	ldr	r0, [r7, #12]
 8007488:	4798      	blx	r3
 800748a:	4603      	mov	r3, r0
 800748c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800748e:	7dbb      	ldrb	r3, [r7, #22]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d001      	beq.n	8007498 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007494:	7dbb      	ldrb	r3, [r7, #22]
 8007496:	e000      	b.n	800749a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3718      	adds	r7, #24
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b084      	sub	sp, #16
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80074aa:	2300      	movs	r3, #0
 80074ac:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2201      	movs	r2, #1
 80074b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d014      	beq.n	8007508 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d00e      	beq.n	8007508 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	6852      	ldr	r2, [r2, #4]
 80074f6:	b2d2      	uxtb	r2, r2
 80074f8:	4611      	mov	r1, r2
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	4798      	blx	r3
 80074fe:	4603      	mov	r3, r0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d001      	beq.n	8007508 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007504:	2303      	movs	r3, #3
 8007506:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007508:	2340      	movs	r3, #64	; 0x40
 800750a:	2200      	movs	r2, #0
 800750c:	2100      	movs	r1, #0
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f001 fc15 	bl	8008d3e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2201      	movs	r2, #1
 8007518:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2240      	movs	r2, #64	; 0x40
 8007520:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007524:	2340      	movs	r3, #64	; 0x40
 8007526:	2200      	movs	r2, #0
 8007528:	2180      	movs	r1, #128	; 0x80
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f001 fc07 	bl	8008d3e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2201      	movs	r2, #1
 8007534:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2240      	movs	r2, #64	; 0x40
 800753a:	621a      	str	r2, [r3, #32]

  return ret;
 800753c:	7bfb      	ldrb	r3, [r7, #15]
}
 800753e:	4618      	mov	r0, r3
 8007540:	3710      	adds	r7, #16
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007546:	b480      	push	{r7}
 8007548:	b083      	sub	sp, #12
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
 800754e:	460b      	mov	r3, r1
 8007550:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	78fa      	ldrb	r2, [r7, #3]
 8007556:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	370c      	adds	r7, #12
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr

08007566 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007566:	b480      	push	{r7}
 8007568:	b083      	sub	sp, #12
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007574:	b2da      	uxtb	r2, r3
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2204      	movs	r2, #4
 8007580:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	370c      	adds	r7, #12
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr

08007592 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007592:	b480      	push	{r7}
 8007594:	b083      	sub	sp, #12
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	2b04      	cmp	r3, #4
 80075a4:	d106      	bne.n	80075b4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80075ac:	b2da      	uxtb	r2, r3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	370c      	adds	r7, #12
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr

080075c2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b082      	sub	sp, #8
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	2b03      	cmp	r3, #3
 80075d4:	d110      	bne.n	80075f8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00b      	beq.n	80075f8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075e6:	69db      	ldr	r3, [r3, #28]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d005      	beq.n	80075f8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075f2:	69db      	ldr	r3, [r3, #28]
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3708      	adds	r7, #8
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}

08007602 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007602:	b580      	push	{r7, lr}
 8007604:	b082      	sub	sp, #8
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
 800760a:	460b      	mov	r3, r1
 800760c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	32ae      	adds	r2, #174	; 0xae
 8007618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d101      	bne.n	8007624 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007620:	2303      	movs	r3, #3
 8007622:	e01c      	b.n	800765e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800762a:	b2db      	uxtb	r3, r3
 800762c:	2b03      	cmp	r3, #3
 800762e:	d115      	bne.n	800765c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	32ae      	adds	r2, #174	; 0xae
 800763a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800763e:	6a1b      	ldr	r3, [r3, #32]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00b      	beq.n	800765c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	32ae      	adds	r2, #174	; 0xae
 800764e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007652:	6a1b      	ldr	r3, [r3, #32]
 8007654:	78fa      	ldrb	r2, [r7, #3]
 8007656:	4611      	mov	r1, r2
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	3708      	adds	r7, #8
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007666:	b580      	push	{r7, lr}
 8007668:	b082      	sub	sp, #8
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
 800766e:	460b      	mov	r3, r1
 8007670:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	32ae      	adds	r2, #174	; 0xae
 800767c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d101      	bne.n	8007688 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007684:	2303      	movs	r3, #3
 8007686:	e01c      	b.n	80076c2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800768e:	b2db      	uxtb	r3, r3
 8007690:	2b03      	cmp	r3, #3
 8007692:	d115      	bne.n	80076c0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	32ae      	adds	r2, #174	; 0xae
 800769e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d00b      	beq.n	80076c0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	32ae      	adds	r2, #174	; 0xae
 80076b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b8:	78fa      	ldrb	r2, [r7, #3]
 80076ba:	4611      	mov	r1, r2
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3708      	adds	r7, #8
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80076ca:	b480      	push	{r7}
 80076cc:	b083      	sub	sp, #12
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80076d2:	2300      	movs	r3, #0
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80076e8:	2300      	movs	r3, #0
 80076ea:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00e      	beq.n	800771c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	6852      	ldr	r2, [r2, #4]
 800770a:	b2d2      	uxtb	r2, r2
 800770c:	4611      	mov	r1, r2
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	4798      	blx	r3
 8007712:	4603      	mov	r3, r0
 8007714:	2b00      	cmp	r3, #0
 8007716:	d001      	beq.n	800771c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007718:	2303      	movs	r3, #3
 800771a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800771c:	7bfb      	ldrb	r3, [r7, #15]
}
 800771e:	4618      	mov	r0, r3
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007726:	b480      	push	{r7}
 8007728:	b083      	sub	sp, #12
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
 800772e:	460b      	mov	r3, r1
 8007730:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007732:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007734:	4618      	mov	r0, r3
 8007736:	370c      	adds	r7, #12
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	460b      	mov	r3, r1
 800774a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800774c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800774e:	4618      	mov	r0, r3
 8007750:	370c      	adds	r7, #12
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr

0800775a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800775a:	b580      	push	{r7, lr}
 800775c:	b086      	sub	sp, #24
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
 8007762:	460b      	mov	r3, r1
 8007764:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800776e:	2300      	movs	r3, #0
 8007770:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	885b      	ldrh	r3, [r3, #2]
 8007776:	b29a      	uxth	r2, r3
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	b29b      	uxth	r3, r3
 800777e:	429a      	cmp	r2, r3
 8007780:	d920      	bls.n	80077c4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	b29b      	uxth	r3, r3
 8007788:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800778a:	e013      	b.n	80077b4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800778c:	f107 030a 	add.w	r3, r7, #10
 8007790:	4619      	mov	r1, r3
 8007792:	6978      	ldr	r0, [r7, #20]
 8007794:	f000 f81b 	bl	80077ce <USBD_GetNextDesc>
 8007798:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	785b      	ldrb	r3, [r3, #1]
 800779e:	2b05      	cmp	r3, #5
 80077a0:	d108      	bne.n	80077b4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	789b      	ldrb	r3, [r3, #2]
 80077aa:	78fa      	ldrb	r2, [r7, #3]
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d008      	beq.n	80077c2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80077b0:	2300      	movs	r3, #0
 80077b2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	885b      	ldrh	r3, [r3, #2]
 80077b8:	b29a      	uxth	r2, r3
 80077ba:	897b      	ldrh	r3, [r7, #10]
 80077bc:	429a      	cmp	r2, r3
 80077be:	d8e5      	bhi.n	800778c <USBD_GetEpDesc+0x32>
 80077c0:	e000      	b.n	80077c4 <USBD_GetEpDesc+0x6a>
          break;
 80077c2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80077c4:	693b      	ldr	r3, [r7, #16]
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3718      	adds	r7, #24
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}

080077ce <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80077ce:	b480      	push	{r7}
 80077d0:	b085      	sub	sp, #20
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
 80077d6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	881a      	ldrh	r2, [r3, #0]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	4413      	add	r3, r2
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	461a      	mov	r2, r3
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4413      	add	r3, r2
 80077f8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80077fa:	68fb      	ldr	r3, [r7, #12]
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3714      	adds	r7, #20
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007808:	b480      	push	{r7}
 800780a:	b087      	sub	sp, #28
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	3301      	adds	r3, #1
 800781e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007826:	8a3b      	ldrh	r3, [r7, #16]
 8007828:	021b      	lsls	r3, r3, #8
 800782a:	b21a      	sxth	r2, r3
 800782c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007830:	4313      	orrs	r3, r2
 8007832:	b21b      	sxth	r3, r3
 8007834:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007836:	89fb      	ldrh	r3, [r7, #14]
}
 8007838:	4618      	mov	r0, r3
 800783a:	371c      	adds	r7, #28
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800784e:	2300      	movs	r3, #0
 8007850:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800785a:	2b40      	cmp	r3, #64	; 0x40
 800785c:	d005      	beq.n	800786a <USBD_StdDevReq+0x26>
 800785e:	2b40      	cmp	r3, #64	; 0x40
 8007860:	d857      	bhi.n	8007912 <USBD_StdDevReq+0xce>
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00f      	beq.n	8007886 <USBD_StdDevReq+0x42>
 8007866:	2b20      	cmp	r3, #32
 8007868:	d153      	bne.n	8007912 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	32ae      	adds	r2, #174	; 0xae
 8007874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	6839      	ldr	r1, [r7, #0]
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	4798      	blx	r3
 8007880:	4603      	mov	r3, r0
 8007882:	73fb      	strb	r3, [r7, #15]
      break;
 8007884:	e04a      	b.n	800791c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	785b      	ldrb	r3, [r3, #1]
 800788a:	2b09      	cmp	r3, #9
 800788c:	d83b      	bhi.n	8007906 <USBD_StdDevReq+0xc2>
 800788e:	a201      	add	r2, pc, #4	; (adr r2, 8007894 <USBD_StdDevReq+0x50>)
 8007890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007894:	080078e9 	.word	0x080078e9
 8007898:	080078fd 	.word	0x080078fd
 800789c:	08007907 	.word	0x08007907
 80078a0:	080078f3 	.word	0x080078f3
 80078a4:	08007907 	.word	0x08007907
 80078a8:	080078c7 	.word	0x080078c7
 80078ac:	080078bd 	.word	0x080078bd
 80078b0:	08007907 	.word	0x08007907
 80078b4:	080078df 	.word	0x080078df
 80078b8:	080078d1 	.word	0x080078d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80078bc:	6839      	ldr	r1, [r7, #0]
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 fa3c 	bl	8007d3c <USBD_GetDescriptor>
          break;
 80078c4:	e024      	b.n	8007910 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80078c6:	6839      	ldr	r1, [r7, #0]
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 fba1 	bl	8008010 <USBD_SetAddress>
          break;
 80078ce:	e01f      	b.n	8007910 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80078d0:	6839      	ldr	r1, [r7, #0]
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 fbe0 	bl	8008098 <USBD_SetConfig>
 80078d8:	4603      	mov	r3, r0
 80078da:	73fb      	strb	r3, [r7, #15]
          break;
 80078dc:	e018      	b.n	8007910 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80078de:	6839      	ldr	r1, [r7, #0]
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 fc83 	bl	80081ec <USBD_GetConfig>
          break;
 80078e6:	e013      	b.n	8007910 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80078e8:	6839      	ldr	r1, [r7, #0]
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 fcb4 	bl	8008258 <USBD_GetStatus>
          break;
 80078f0:	e00e      	b.n	8007910 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80078f2:	6839      	ldr	r1, [r7, #0]
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 fce3 	bl	80082c0 <USBD_SetFeature>
          break;
 80078fa:	e009      	b.n	8007910 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80078fc:	6839      	ldr	r1, [r7, #0]
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 fd07 	bl	8008312 <USBD_ClrFeature>
          break;
 8007904:	e004      	b.n	8007910 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007906:	6839      	ldr	r1, [r7, #0]
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 fd5e 	bl	80083ca <USBD_CtlError>
          break;
 800790e:	bf00      	nop
      }
      break;
 8007910:	e004      	b.n	800791c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007912:	6839      	ldr	r1, [r7, #0]
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 fd58 	bl	80083ca <USBD_CtlError>
      break;
 800791a:	bf00      	nop
  }

  return ret;
 800791c:	7bfb      	ldrb	r3, [r7, #15]
}
 800791e:	4618      	mov	r0, r3
 8007920:	3710      	adds	r7, #16
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop

08007928 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b084      	sub	sp, #16
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007932:	2300      	movs	r3, #0
 8007934:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800793e:	2b40      	cmp	r3, #64	; 0x40
 8007940:	d005      	beq.n	800794e <USBD_StdItfReq+0x26>
 8007942:	2b40      	cmp	r3, #64	; 0x40
 8007944:	d852      	bhi.n	80079ec <USBD_StdItfReq+0xc4>
 8007946:	2b00      	cmp	r3, #0
 8007948:	d001      	beq.n	800794e <USBD_StdItfReq+0x26>
 800794a:	2b20      	cmp	r3, #32
 800794c:	d14e      	bne.n	80079ec <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007954:	b2db      	uxtb	r3, r3
 8007956:	3b01      	subs	r3, #1
 8007958:	2b02      	cmp	r3, #2
 800795a:	d840      	bhi.n	80079de <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	889b      	ldrh	r3, [r3, #4]
 8007960:	b2db      	uxtb	r3, r3
 8007962:	2b01      	cmp	r3, #1
 8007964:	d836      	bhi.n	80079d4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	889b      	ldrh	r3, [r3, #4]
 800796a:	b2db      	uxtb	r3, r3
 800796c:	4619      	mov	r1, r3
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f7ff fed9 	bl	8007726 <USBD_CoreFindIF>
 8007974:	4603      	mov	r3, r0
 8007976:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007978:	7bbb      	ldrb	r3, [r7, #14]
 800797a:	2bff      	cmp	r3, #255	; 0xff
 800797c:	d01d      	beq.n	80079ba <USBD_StdItfReq+0x92>
 800797e:	7bbb      	ldrb	r3, [r7, #14]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d11a      	bne.n	80079ba <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007984:	7bba      	ldrb	r2, [r7, #14]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	32ae      	adds	r2, #174	; 0xae
 800798a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d00f      	beq.n	80079b4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007994:	7bba      	ldrb	r2, [r7, #14]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800799c:	7bba      	ldrb	r2, [r7, #14]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	32ae      	adds	r2, #174	; 0xae
 80079a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	6839      	ldr	r1, [r7, #0]
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	4798      	blx	r3
 80079ae:	4603      	mov	r3, r0
 80079b0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80079b2:	e004      	b.n	80079be <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80079b4:	2303      	movs	r3, #3
 80079b6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80079b8:	e001      	b.n	80079be <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80079ba:	2303      	movs	r3, #3
 80079bc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	88db      	ldrh	r3, [r3, #6]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d110      	bne.n	80079e8 <USBD_StdItfReq+0xc0>
 80079c6:	7bfb      	ldrb	r3, [r7, #15]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d10d      	bne.n	80079e8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 fdc7 	bl	8008560 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80079d2:	e009      	b.n	80079e8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80079d4:	6839      	ldr	r1, [r7, #0]
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 fcf7 	bl	80083ca <USBD_CtlError>
          break;
 80079dc:	e004      	b.n	80079e8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80079de:	6839      	ldr	r1, [r7, #0]
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 fcf2 	bl	80083ca <USBD_CtlError>
          break;
 80079e6:	e000      	b.n	80079ea <USBD_StdItfReq+0xc2>
          break;
 80079e8:	bf00      	nop
      }
      break;
 80079ea:	e004      	b.n	80079f6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80079ec:	6839      	ldr	r1, [r7, #0]
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 fceb 	bl	80083ca <USBD_CtlError>
      break;
 80079f4:	bf00      	nop
  }

  return ret;
 80079f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3710      	adds	r7, #16
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	889b      	ldrh	r3, [r3, #4]
 8007a12:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a1c:	2b40      	cmp	r3, #64	; 0x40
 8007a1e:	d007      	beq.n	8007a30 <USBD_StdEPReq+0x30>
 8007a20:	2b40      	cmp	r3, #64	; 0x40
 8007a22:	f200 817f 	bhi.w	8007d24 <USBD_StdEPReq+0x324>
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d02a      	beq.n	8007a80 <USBD_StdEPReq+0x80>
 8007a2a:	2b20      	cmp	r3, #32
 8007a2c:	f040 817a 	bne.w	8007d24 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007a30:	7bbb      	ldrb	r3, [r7, #14]
 8007a32:	4619      	mov	r1, r3
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f7ff fe83 	bl	8007740 <USBD_CoreFindEP>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a3e:	7b7b      	ldrb	r3, [r7, #13]
 8007a40:	2bff      	cmp	r3, #255	; 0xff
 8007a42:	f000 8174 	beq.w	8007d2e <USBD_StdEPReq+0x32e>
 8007a46:	7b7b      	ldrb	r3, [r7, #13]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	f040 8170 	bne.w	8007d2e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007a4e:	7b7a      	ldrb	r2, [r7, #13]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007a56:	7b7a      	ldrb	r2, [r7, #13]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	32ae      	adds	r2, #174	; 0xae
 8007a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	f000 8163 	beq.w	8007d2e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007a68:	7b7a      	ldrb	r2, [r7, #13]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	32ae      	adds	r2, #174	; 0xae
 8007a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	6839      	ldr	r1, [r7, #0]
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	4798      	blx	r3
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007a7e:	e156      	b.n	8007d2e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	785b      	ldrb	r3, [r3, #1]
 8007a84:	2b03      	cmp	r3, #3
 8007a86:	d008      	beq.n	8007a9a <USBD_StdEPReq+0x9a>
 8007a88:	2b03      	cmp	r3, #3
 8007a8a:	f300 8145 	bgt.w	8007d18 <USBD_StdEPReq+0x318>
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	f000 809b 	beq.w	8007bca <USBD_StdEPReq+0x1ca>
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d03c      	beq.n	8007b12 <USBD_StdEPReq+0x112>
 8007a98:	e13e      	b.n	8007d18 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	2b02      	cmp	r3, #2
 8007aa4:	d002      	beq.n	8007aac <USBD_StdEPReq+0xac>
 8007aa6:	2b03      	cmp	r3, #3
 8007aa8:	d016      	beq.n	8007ad8 <USBD_StdEPReq+0xd8>
 8007aaa:	e02c      	b.n	8007b06 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007aac:	7bbb      	ldrb	r3, [r7, #14]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00d      	beq.n	8007ace <USBD_StdEPReq+0xce>
 8007ab2:	7bbb      	ldrb	r3, [r7, #14]
 8007ab4:	2b80      	cmp	r3, #128	; 0x80
 8007ab6:	d00a      	beq.n	8007ace <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ab8:	7bbb      	ldrb	r3, [r7, #14]
 8007aba:	4619      	mov	r1, r3
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f001 f983 	bl	8008dc8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ac2:	2180      	movs	r1, #128	; 0x80
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f001 f97f 	bl	8008dc8 <USBD_LL_StallEP>
 8007aca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007acc:	e020      	b.n	8007b10 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007ace:	6839      	ldr	r1, [r7, #0]
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 fc7a 	bl	80083ca <USBD_CtlError>
              break;
 8007ad6:	e01b      	b.n	8007b10 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	885b      	ldrh	r3, [r3, #2]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d10e      	bne.n	8007afe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007ae0:	7bbb      	ldrb	r3, [r7, #14]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d00b      	beq.n	8007afe <USBD_StdEPReq+0xfe>
 8007ae6:	7bbb      	ldrb	r3, [r7, #14]
 8007ae8:	2b80      	cmp	r3, #128	; 0x80
 8007aea:	d008      	beq.n	8007afe <USBD_StdEPReq+0xfe>
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	88db      	ldrh	r3, [r3, #6]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d104      	bne.n	8007afe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007af4:	7bbb      	ldrb	r3, [r7, #14]
 8007af6:	4619      	mov	r1, r3
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f001 f965 	bl	8008dc8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 fd2e 	bl	8008560 <USBD_CtlSendStatus>

              break;
 8007b04:	e004      	b.n	8007b10 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007b06:	6839      	ldr	r1, [r7, #0]
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 fc5e 	bl	80083ca <USBD_CtlError>
              break;
 8007b0e:	bf00      	nop
          }
          break;
 8007b10:	e107      	b.n	8007d22 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	2b02      	cmp	r3, #2
 8007b1c:	d002      	beq.n	8007b24 <USBD_StdEPReq+0x124>
 8007b1e:	2b03      	cmp	r3, #3
 8007b20:	d016      	beq.n	8007b50 <USBD_StdEPReq+0x150>
 8007b22:	e04b      	b.n	8007bbc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b24:	7bbb      	ldrb	r3, [r7, #14]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00d      	beq.n	8007b46 <USBD_StdEPReq+0x146>
 8007b2a:	7bbb      	ldrb	r3, [r7, #14]
 8007b2c:	2b80      	cmp	r3, #128	; 0x80
 8007b2e:	d00a      	beq.n	8007b46 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b30:	7bbb      	ldrb	r3, [r7, #14]
 8007b32:	4619      	mov	r1, r3
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f001 f947 	bl	8008dc8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b3a:	2180      	movs	r1, #128	; 0x80
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f001 f943 	bl	8008dc8 <USBD_LL_StallEP>
 8007b42:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b44:	e040      	b.n	8007bc8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007b46:	6839      	ldr	r1, [r7, #0]
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 fc3e 	bl	80083ca <USBD_CtlError>
              break;
 8007b4e:	e03b      	b.n	8007bc8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	885b      	ldrh	r3, [r3, #2]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d136      	bne.n	8007bc6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007b58:	7bbb      	ldrb	r3, [r7, #14]
 8007b5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d004      	beq.n	8007b6c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007b62:	7bbb      	ldrb	r3, [r7, #14]
 8007b64:	4619      	mov	r1, r3
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f001 f94d 	bl	8008e06 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 fcf7 	bl	8008560 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007b72:	7bbb      	ldrb	r3, [r7, #14]
 8007b74:	4619      	mov	r1, r3
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f7ff fde2 	bl	8007740 <USBD_CoreFindEP>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b80:	7b7b      	ldrb	r3, [r7, #13]
 8007b82:	2bff      	cmp	r3, #255	; 0xff
 8007b84:	d01f      	beq.n	8007bc6 <USBD_StdEPReq+0x1c6>
 8007b86:	7b7b      	ldrb	r3, [r7, #13]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d11c      	bne.n	8007bc6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007b8c:	7b7a      	ldrb	r2, [r7, #13]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007b94:	7b7a      	ldrb	r2, [r7, #13]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	32ae      	adds	r2, #174	; 0xae
 8007b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d010      	beq.n	8007bc6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007ba4:	7b7a      	ldrb	r2, [r7, #13]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	32ae      	adds	r2, #174	; 0xae
 8007baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	6839      	ldr	r1, [r7, #0]
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	4798      	blx	r3
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007bba:	e004      	b.n	8007bc6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007bbc:	6839      	ldr	r1, [r7, #0]
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 fc03 	bl	80083ca <USBD_CtlError>
              break;
 8007bc4:	e000      	b.n	8007bc8 <USBD_StdEPReq+0x1c8>
              break;
 8007bc6:	bf00      	nop
          }
          break;
 8007bc8:	e0ab      	b.n	8007d22 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	2b02      	cmp	r3, #2
 8007bd4:	d002      	beq.n	8007bdc <USBD_StdEPReq+0x1dc>
 8007bd6:	2b03      	cmp	r3, #3
 8007bd8:	d032      	beq.n	8007c40 <USBD_StdEPReq+0x240>
 8007bda:	e097      	b.n	8007d0c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007bdc:	7bbb      	ldrb	r3, [r7, #14]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d007      	beq.n	8007bf2 <USBD_StdEPReq+0x1f2>
 8007be2:	7bbb      	ldrb	r3, [r7, #14]
 8007be4:	2b80      	cmp	r3, #128	; 0x80
 8007be6:	d004      	beq.n	8007bf2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007be8:	6839      	ldr	r1, [r7, #0]
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 fbed 	bl	80083ca <USBD_CtlError>
                break;
 8007bf0:	e091      	b.n	8007d16 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bf2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	da0b      	bge.n	8007c12 <USBD_StdEPReq+0x212>
 8007bfa:	7bbb      	ldrb	r3, [r7, #14]
 8007bfc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c00:	4613      	mov	r3, r2
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	4413      	add	r3, r2
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	3310      	adds	r3, #16
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	4413      	add	r3, r2
 8007c0e:	3304      	adds	r3, #4
 8007c10:	e00b      	b.n	8007c2a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c12:	7bbb      	ldrb	r3, [r7, #14]
 8007c14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c18:	4613      	mov	r3, r2
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	4413      	add	r3, r2
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	4413      	add	r3, r2
 8007c28:	3304      	adds	r3, #4
 8007c2a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	2202      	movs	r2, #2
 8007c36:	4619      	mov	r1, r3
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 fc37 	bl	80084ac <USBD_CtlSendData>
              break;
 8007c3e:	e06a      	b.n	8007d16 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007c40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	da11      	bge.n	8007c6c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007c48:	7bbb      	ldrb	r3, [r7, #14]
 8007c4a:	f003 020f 	and.w	r2, r3, #15
 8007c4e:	6879      	ldr	r1, [r7, #4]
 8007c50:	4613      	mov	r3, r2
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	4413      	add	r3, r2
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	440b      	add	r3, r1
 8007c5a:	3324      	adds	r3, #36	; 0x24
 8007c5c:	881b      	ldrh	r3, [r3, #0]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d117      	bne.n	8007c92 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007c62:	6839      	ldr	r1, [r7, #0]
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 fbb0 	bl	80083ca <USBD_CtlError>
                  break;
 8007c6a:	e054      	b.n	8007d16 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007c6c:	7bbb      	ldrb	r3, [r7, #14]
 8007c6e:	f003 020f 	and.w	r2, r3, #15
 8007c72:	6879      	ldr	r1, [r7, #4]
 8007c74:	4613      	mov	r3, r2
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	4413      	add	r3, r2
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	440b      	add	r3, r1
 8007c7e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007c82:	881b      	ldrh	r3, [r3, #0]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d104      	bne.n	8007c92 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007c88:	6839      	ldr	r1, [r7, #0]
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 fb9d 	bl	80083ca <USBD_CtlError>
                  break;
 8007c90:	e041      	b.n	8007d16 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	da0b      	bge.n	8007cb2 <USBD_StdEPReq+0x2b2>
 8007c9a:	7bbb      	ldrb	r3, [r7, #14]
 8007c9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ca0:	4613      	mov	r3, r2
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	4413      	add	r3, r2
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	3310      	adds	r3, #16
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	4413      	add	r3, r2
 8007cae:	3304      	adds	r3, #4
 8007cb0:	e00b      	b.n	8007cca <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007cb2:	7bbb      	ldrb	r3, [r7, #14]
 8007cb4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007cb8:	4613      	mov	r3, r2
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	4413      	add	r3, r2
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	4413      	add	r3, r2
 8007cc8:	3304      	adds	r3, #4
 8007cca:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007ccc:	7bbb      	ldrb	r3, [r7, #14]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d002      	beq.n	8007cd8 <USBD_StdEPReq+0x2d8>
 8007cd2:	7bbb      	ldrb	r3, [r7, #14]
 8007cd4:	2b80      	cmp	r3, #128	; 0x80
 8007cd6:	d103      	bne.n	8007ce0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	601a      	str	r2, [r3, #0]
 8007cde:	e00e      	b.n	8007cfe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007ce0:	7bbb      	ldrb	r3, [r7, #14]
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f001 f8ad 	bl	8008e44 <USBD_LL_IsStallEP>
 8007cea:	4603      	mov	r3, r0
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d003      	beq.n	8007cf8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	601a      	str	r2, [r3, #0]
 8007cf6:	e002      	b.n	8007cfe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	2202      	movs	r2, #2
 8007d02:	4619      	mov	r1, r3
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 fbd1 	bl	80084ac <USBD_CtlSendData>
              break;
 8007d0a:	e004      	b.n	8007d16 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007d0c:	6839      	ldr	r1, [r7, #0]
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 fb5b 	bl	80083ca <USBD_CtlError>
              break;
 8007d14:	bf00      	nop
          }
          break;
 8007d16:	e004      	b.n	8007d22 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007d18:	6839      	ldr	r1, [r7, #0]
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 fb55 	bl	80083ca <USBD_CtlError>
          break;
 8007d20:	bf00      	nop
      }
      break;
 8007d22:	e005      	b.n	8007d30 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007d24:	6839      	ldr	r1, [r7, #0]
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 fb4f 	bl	80083ca <USBD_CtlError>
      break;
 8007d2c:	e000      	b.n	8007d30 <USBD_StdEPReq+0x330>
      break;
 8007d2e:	bf00      	nop
  }

  return ret;
 8007d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3710      	adds	r7, #16
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
	...

08007d3c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d46:	2300      	movs	r3, #0
 8007d48:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	885b      	ldrh	r3, [r3, #2]
 8007d56:	0a1b      	lsrs	r3, r3, #8
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	2b06      	cmp	r3, #6
 8007d5e:	f200 8128 	bhi.w	8007fb2 <USBD_GetDescriptor+0x276>
 8007d62:	a201      	add	r2, pc, #4	; (adr r2, 8007d68 <USBD_GetDescriptor+0x2c>)
 8007d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d68:	08007d85 	.word	0x08007d85
 8007d6c:	08007d9d 	.word	0x08007d9d
 8007d70:	08007ddd 	.word	0x08007ddd
 8007d74:	08007fb3 	.word	0x08007fb3
 8007d78:	08007fb3 	.word	0x08007fb3
 8007d7c:	08007f53 	.word	0x08007f53
 8007d80:	08007f7f 	.word	0x08007f7f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	7c12      	ldrb	r2, [r2, #16]
 8007d90:	f107 0108 	add.w	r1, r7, #8
 8007d94:	4610      	mov	r0, r2
 8007d96:	4798      	blx	r3
 8007d98:	60f8      	str	r0, [r7, #12]
      break;
 8007d9a:	e112      	b.n	8007fc2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	7c1b      	ldrb	r3, [r3, #16]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d10d      	bne.n	8007dc0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dac:	f107 0208 	add.w	r2, r7, #8
 8007db0:	4610      	mov	r0, r2
 8007db2:	4798      	blx	r3
 8007db4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	3301      	adds	r3, #1
 8007dba:	2202      	movs	r2, #2
 8007dbc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007dbe:	e100      	b.n	8007fc2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc8:	f107 0208 	add.w	r2, r7, #8
 8007dcc:	4610      	mov	r0, r2
 8007dce:	4798      	blx	r3
 8007dd0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	2202      	movs	r2, #2
 8007dd8:	701a      	strb	r2, [r3, #0]
      break;
 8007dda:	e0f2      	b.n	8007fc2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	885b      	ldrh	r3, [r3, #2]
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	2b05      	cmp	r3, #5
 8007de4:	f200 80ac 	bhi.w	8007f40 <USBD_GetDescriptor+0x204>
 8007de8:	a201      	add	r2, pc, #4	; (adr r2, 8007df0 <USBD_GetDescriptor+0xb4>)
 8007dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dee:	bf00      	nop
 8007df0:	08007e09 	.word	0x08007e09
 8007df4:	08007e3d 	.word	0x08007e3d
 8007df8:	08007e71 	.word	0x08007e71
 8007dfc:	08007ea5 	.word	0x08007ea5
 8007e00:	08007ed9 	.word	0x08007ed9
 8007e04:	08007f0d 	.word	0x08007f0d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d00b      	beq.n	8007e2c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	7c12      	ldrb	r2, [r2, #16]
 8007e20:	f107 0108 	add.w	r1, r7, #8
 8007e24:	4610      	mov	r0, r2
 8007e26:	4798      	blx	r3
 8007e28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e2a:	e091      	b.n	8007f50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e2c:	6839      	ldr	r1, [r7, #0]
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 facb 	bl	80083ca <USBD_CtlError>
            err++;
 8007e34:	7afb      	ldrb	r3, [r7, #11]
 8007e36:	3301      	adds	r3, #1
 8007e38:	72fb      	strb	r3, [r7, #11]
          break;
 8007e3a:	e089      	b.n	8007f50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d00b      	beq.n	8007e60 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e4e:	689b      	ldr	r3, [r3, #8]
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	7c12      	ldrb	r2, [r2, #16]
 8007e54:	f107 0108 	add.w	r1, r7, #8
 8007e58:	4610      	mov	r0, r2
 8007e5a:	4798      	blx	r3
 8007e5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e5e:	e077      	b.n	8007f50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e60:	6839      	ldr	r1, [r7, #0]
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 fab1 	bl	80083ca <USBD_CtlError>
            err++;
 8007e68:	7afb      	ldrb	r3, [r7, #11]
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e6e:	e06f      	b.n	8007f50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e76:	68db      	ldr	r3, [r3, #12]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d00b      	beq.n	8007e94 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e82:	68db      	ldr	r3, [r3, #12]
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	7c12      	ldrb	r2, [r2, #16]
 8007e88:	f107 0108 	add.w	r1, r7, #8
 8007e8c:	4610      	mov	r0, r2
 8007e8e:	4798      	blx	r3
 8007e90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e92:	e05d      	b.n	8007f50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e94:	6839      	ldr	r1, [r7, #0]
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 fa97 	bl	80083ca <USBD_CtlError>
            err++;
 8007e9c:	7afb      	ldrb	r3, [r7, #11]
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	72fb      	strb	r3, [r7, #11]
          break;
 8007ea2:	e055      	b.n	8007f50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eaa:	691b      	ldr	r3, [r3, #16]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d00b      	beq.n	8007ec8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eb6:	691b      	ldr	r3, [r3, #16]
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	7c12      	ldrb	r2, [r2, #16]
 8007ebc:	f107 0108 	add.w	r1, r7, #8
 8007ec0:	4610      	mov	r0, r2
 8007ec2:	4798      	blx	r3
 8007ec4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ec6:	e043      	b.n	8007f50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ec8:	6839      	ldr	r1, [r7, #0]
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 fa7d 	bl	80083ca <USBD_CtlError>
            err++;
 8007ed0:	7afb      	ldrb	r3, [r7, #11]
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ed6:	e03b      	b.n	8007f50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ede:	695b      	ldr	r3, [r3, #20]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d00b      	beq.n	8007efc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eea:	695b      	ldr	r3, [r3, #20]
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	7c12      	ldrb	r2, [r2, #16]
 8007ef0:	f107 0108 	add.w	r1, r7, #8
 8007ef4:	4610      	mov	r0, r2
 8007ef6:	4798      	blx	r3
 8007ef8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007efa:	e029      	b.n	8007f50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007efc:	6839      	ldr	r1, [r7, #0]
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 fa63 	bl	80083ca <USBD_CtlError>
            err++;
 8007f04:	7afb      	ldrb	r3, [r7, #11]
 8007f06:	3301      	adds	r3, #1
 8007f08:	72fb      	strb	r3, [r7, #11]
          break;
 8007f0a:	e021      	b.n	8007f50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f12:	699b      	ldr	r3, [r3, #24]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d00b      	beq.n	8007f30 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f1e:	699b      	ldr	r3, [r3, #24]
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	7c12      	ldrb	r2, [r2, #16]
 8007f24:	f107 0108 	add.w	r1, r7, #8
 8007f28:	4610      	mov	r0, r2
 8007f2a:	4798      	blx	r3
 8007f2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f2e:	e00f      	b.n	8007f50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007f30:	6839      	ldr	r1, [r7, #0]
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 fa49 	bl	80083ca <USBD_CtlError>
            err++;
 8007f38:	7afb      	ldrb	r3, [r7, #11]
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	72fb      	strb	r3, [r7, #11]
          break;
 8007f3e:	e007      	b.n	8007f50 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007f40:	6839      	ldr	r1, [r7, #0]
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 fa41 	bl	80083ca <USBD_CtlError>
          err++;
 8007f48:	7afb      	ldrb	r3, [r7, #11]
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007f4e:	bf00      	nop
      }
      break;
 8007f50:	e037      	b.n	8007fc2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	7c1b      	ldrb	r3, [r3, #16]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d109      	bne.n	8007f6e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f62:	f107 0208 	add.w	r2, r7, #8
 8007f66:	4610      	mov	r0, r2
 8007f68:	4798      	blx	r3
 8007f6a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f6c:	e029      	b.n	8007fc2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f6e:	6839      	ldr	r1, [r7, #0]
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 fa2a 	bl	80083ca <USBD_CtlError>
        err++;
 8007f76:	7afb      	ldrb	r3, [r7, #11]
 8007f78:	3301      	adds	r3, #1
 8007f7a:	72fb      	strb	r3, [r7, #11]
      break;
 8007f7c:	e021      	b.n	8007fc2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	7c1b      	ldrb	r3, [r3, #16]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d10d      	bne.n	8007fa2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f8e:	f107 0208 	add.w	r2, r7, #8
 8007f92:	4610      	mov	r0, r2
 8007f94:	4798      	blx	r3
 8007f96:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	3301      	adds	r3, #1
 8007f9c:	2207      	movs	r2, #7
 8007f9e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007fa0:	e00f      	b.n	8007fc2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007fa2:	6839      	ldr	r1, [r7, #0]
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 fa10 	bl	80083ca <USBD_CtlError>
        err++;
 8007faa:	7afb      	ldrb	r3, [r7, #11]
 8007fac:	3301      	adds	r3, #1
 8007fae:	72fb      	strb	r3, [r7, #11]
      break;
 8007fb0:	e007      	b.n	8007fc2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007fb2:	6839      	ldr	r1, [r7, #0]
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 fa08 	bl	80083ca <USBD_CtlError>
      err++;
 8007fba:	7afb      	ldrb	r3, [r7, #11]
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	72fb      	strb	r3, [r7, #11]
      break;
 8007fc0:	bf00      	nop
  }

  if (err != 0U)
 8007fc2:	7afb      	ldrb	r3, [r7, #11]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d11e      	bne.n	8008006 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	88db      	ldrh	r3, [r3, #6]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d016      	beq.n	8007ffe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007fd0:	893b      	ldrh	r3, [r7, #8]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00e      	beq.n	8007ff4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	88da      	ldrh	r2, [r3, #6]
 8007fda:	893b      	ldrh	r3, [r7, #8]
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	bf28      	it	cs
 8007fe0:	4613      	movcs	r3, r2
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007fe6:	893b      	ldrh	r3, [r7, #8]
 8007fe8:	461a      	mov	r2, r3
 8007fea:	68f9      	ldr	r1, [r7, #12]
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 fa5d 	bl	80084ac <USBD_CtlSendData>
 8007ff2:	e009      	b.n	8008008 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007ff4:	6839      	ldr	r1, [r7, #0]
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f9e7 	bl	80083ca <USBD_CtlError>
 8007ffc:	e004      	b.n	8008008 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 faae 	bl	8008560 <USBD_CtlSendStatus>
 8008004:	e000      	b.n	8008008 <USBD_GetDescriptor+0x2cc>
    return;
 8008006:	bf00      	nop
  }
}
 8008008:	3710      	adds	r7, #16
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop

08008010 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	889b      	ldrh	r3, [r3, #4]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d131      	bne.n	8008086 <USBD_SetAddress+0x76>
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	88db      	ldrh	r3, [r3, #6]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d12d      	bne.n	8008086 <USBD_SetAddress+0x76>
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	885b      	ldrh	r3, [r3, #2]
 800802e:	2b7f      	cmp	r3, #127	; 0x7f
 8008030:	d829      	bhi.n	8008086 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	885b      	ldrh	r3, [r3, #2]
 8008036:	b2db      	uxtb	r3, r3
 8008038:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800803c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008044:	b2db      	uxtb	r3, r3
 8008046:	2b03      	cmp	r3, #3
 8008048:	d104      	bne.n	8008054 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800804a:	6839      	ldr	r1, [r7, #0]
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 f9bc 	bl	80083ca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008052:	e01d      	b.n	8008090 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	7bfa      	ldrb	r2, [r7, #15]
 8008058:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800805c:	7bfb      	ldrb	r3, [r7, #15]
 800805e:	4619      	mov	r1, r3
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 ff1b 	bl	8008e9c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 fa7a 	bl	8008560 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800806c:	7bfb      	ldrb	r3, [r7, #15]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d004      	beq.n	800807c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2202      	movs	r2, #2
 8008076:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800807a:	e009      	b.n	8008090 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008084:	e004      	b.n	8008090 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008086:	6839      	ldr	r1, [r7, #0]
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 f99e 	bl	80083ca <USBD_CtlError>
  }
}
 800808e:	bf00      	nop
 8008090:	bf00      	nop
 8008092:	3710      	adds	r7, #16
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080a2:	2300      	movs	r3, #0
 80080a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	885b      	ldrh	r3, [r3, #2]
 80080aa:	b2da      	uxtb	r2, r3
 80080ac:	4b4e      	ldr	r3, [pc, #312]	; (80081e8 <USBD_SetConfig+0x150>)
 80080ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80080b0:	4b4d      	ldr	r3, [pc, #308]	; (80081e8 <USBD_SetConfig+0x150>)
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d905      	bls.n	80080c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80080b8:	6839      	ldr	r1, [r7, #0]
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 f985 	bl	80083ca <USBD_CtlError>
    return USBD_FAIL;
 80080c0:	2303      	movs	r3, #3
 80080c2:	e08c      	b.n	80081de <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080ca:	b2db      	uxtb	r3, r3
 80080cc:	2b02      	cmp	r3, #2
 80080ce:	d002      	beq.n	80080d6 <USBD_SetConfig+0x3e>
 80080d0:	2b03      	cmp	r3, #3
 80080d2:	d029      	beq.n	8008128 <USBD_SetConfig+0x90>
 80080d4:	e075      	b.n	80081c2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80080d6:	4b44      	ldr	r3, [pc, #272]	; (80081e8 <USBD_SetConfig+0x150>)
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d020      	beq.n	8008120 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80080de:	4b42      	ldr	r3, [pc, #264]	; (80081e8 <USBD_SetConfig+0x150>)
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	461a      	mov	r2, r3
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80080e8:	4b3f      	ldr	r3, [pc, #252]	; (80081e8 <USBD_SetConfig+0x150>)
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	4619      	mov	r1, r3
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f7fe ffe7 	bl	80070c2 <USBD_SetClassConfig>
 80080f4:	4603      	mov	r3, r0
 80080f6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80080f8:	7bfb      	ldrb	r3, [r7, #15]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d008      	beq.n	8008110 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80080fe:	6839      	ldr	r1, [r7, #0]
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 f962 	bl	80083ca <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2202      	movs	r2, #2
 800810a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800810e:	e065      	b.n	80081dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 fa25 	bl	8008560 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2203      	movs	r2, #3
 800811a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800811e:	e05d      	b.n	80081dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 fa1d 	bl	8008560 <USBD_CtlSendStatus>
      break;
 8008126:	e059      	b.n	80081dc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008128:	4b2f      	ldr	r3, [pc, #188]	; (80081e8 <USBD_SetConfig+0x150>)
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d112      	bne.n	8008156 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2202      	movs	r2, #2
 8008134:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008138:	4b2b      	ldr	r3, [pc, #172]	; (80081e8 <USBD_SetConfig+0x150>)
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	461a      	mov	r2, r3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008142:	4b29      	ldr	r3, [pc, #164]	; (80081e8 <USBD_SetConfig+0x150>)
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	4619      	mov	r1, r3
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f7fe ffd6 	bl	80070fa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 fa06 	bl	8008560 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008154:	e042      	b.n	80081dc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008156:	4b24      	ldr	r3, [pc, #144]	; (80081e8 <USBD_SetConfig+0x150>)
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	461a      	mov	r2, r3
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	429a      	cmp	r2, r3
 8008162:	d02a      	beq.n	80081ba <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	b2db      	uxtb	r3, r3
 800816a:	4619      	mov	r1, r3
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f7fe ffc4 	bl	80070fa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008172:	4b1d      	ldr	r3, [pc, #116]	; (80081e8 <USBD_SetConfig+0x150>)
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	461a      	mov	r2, r3
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800817c:	4b1a      	ldr	r3, [pc, #104]	; (80081e8 <USBD_SetConfig+0x150>)
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	4619      	mov	r1, r3
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f7fe ff9d 	bl	80070c2 <USBD_SetClassConfig>
 8008188:	4603      	mov	r3, r0
 800818a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800818c:	7bfb      	ldrb	r3, [r7, #15]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00f      	beq.n	80081b2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008192:	6839      	ldr	r1, [r7, #0]
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 f918 	bl	80083ca <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	4619      	mov	r1, r3
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f7fe ffa9 	bl	80070fa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2202      	movs	r2, #2
 80081ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80081b0:	e014      	b.n	80081dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 f9d4 	bl	8008560 <USBD_CtlSendStatus>
      break;
 80081b8:	e010      	b.n	80081dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 f9d0 	bl	8008560 <USBD_CtlSendStatus>
      break;
 80081c0:	e00c      	b.n	80081dc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80081c2:	6839      	ldr	r1, [r7, #0]
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 f900 	bl	80083ca <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80081ca:	4b07      	ldr	r3, [pc, #28]	; (80081e8 <USBD_SetConfig+0x150>)
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	4619      	mov	r1, r3
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f7fe ff92 	bl	80070fa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80081d6:	2303      	movs	r3, #3
 80081d8:	73fb      	strb	r3, [r7, #15]
      break;
 80081da:	bf00      	nop
  }

  return ret;
 80081dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3710      	adds	r7, #16
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}
 80081e6:	bf00      	nop
 80081e8:	200003e8 	.word	0x200003e8

080081ec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b082      	sub	sp, #8
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	88db      	ldrh	r3, [r3, #6]
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d004      	beq.n	8008208 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80081fe:	6839      	ldr	r1, [r7, #0]
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 f8e2 	bl	80083ca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008206:	e023      	b.n	8008250 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800820e:	b2db      	uxtb	r3, r3
 8008210:	2b02      	cmp	r3, #2
 8008212:	dc02      	bgt.n	800821a <USBD_GetConfig+0x2e>
 8008214:	2b00      	cmp	r3, #0
 8008216:	dc03      	bgt.n	8008220 <USBD_GetConfig+0x34>
 8008218:	e015      	b.n	8008246 <USBD_GetConfig+0x5a>
 800821a:	2b03      	cmp	r3, #3
 800821c:	d00b      	beq.n	8008236 <USBD_GetConfig+0x4a>
 800821e:	e012      	b.n	8008246 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	3308      	adds	r3, #8
 800822a:	2201      	movs	r2, #1
 800822c:	4619      	mov	r1, r3
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 f93c 	bl	80084ac <USBD_CtlSendData>
        break;
 8008234:	e00c      	b.n	8008250 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	3304      	adds	r3, #4
 800823a:	2201      	movs	r2, #1
 800823c:	4619      	mov	r1, r3
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 f934 	bl	80084ac <USBD_CtlSendData>
        break;
 8008244:	e004      	b.n	8008250 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008246:	6839      	ldr	r1, [r7, #0]
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 f8be 	bl	80083ca <USBD_CtlError>
        break;
 800824e:	bf00      	nop
}
 8008250:	bf00      	nop
 8008252:	3708      	adds	r7, #8
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008268:	b2db      	uxtb	r3, r3
 800826a:	3b01      	subs	r3, #1
 800826c:	2b02      	cmp	r3, #2
 800826e:	d81e      	bhi.n	80082ae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	88db      	ldrh	r3, [r3, #6]
 8008274:	2b02      	cmp	r3, #2
 8008276:	d004      	beq.n	8008282 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008278:	6839      	ldr	r1, [r7, #0]
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 f8a5 	bl	80083ca <USBD_CtlError>
        break;
 8008280:	e01a      	b.n	80082b8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2201      	movs	r2, #1
 8008286:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800828e:	2b00      	cmp	r3, #0
 8008290:	d005      	beq.n	800829e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	f043 0202 	orr.w	r2, r3, #2
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	330c      	adds	r3, #12
 80082a2:	2202      	movs	r2, #2
 80082a4:	4619      	mov	r1, r3
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 f900 	bl	80084ac <USBD_CtlSendData>
      break;
 80082ac:	e004      	b.n	80082b8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80082ae:	6839      	ldr	r1, [r7, #0]
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 f88a 	bl	80083ca <USBD_CtlError>
      break;
 80082b6:	bf00      	nop
  }
}
 80082b8:	bf00      	nop
 80082ba:	3708      	adds	r7, #8
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	885b      	ldrh	r3, [r3, #2]
 80082ce:	2b01      	cmp	r3, #1
 80082d0:	d107      	bne.n	80082e2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2201      	movs	r2, #1
 80082d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 f940 	bl	8008560 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80082e0:	e013      	b.n	800830a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	885b      	ldrh	r3, [r3, #2]
 80082e6:	2b02      	cmp	r3, #2
 80082e8:	d10b      	bne.n	8008302 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	889b      	ldrh	r3, [r3, #4]
 80082ee:	0a1b      	lsrs	r3, r3, #8
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	b2da      	uxtb	r2, r3
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 f930 	bl	8008560 <USBD_CtlSendStatus>
}
 8008300:	e003      	b.n	800830a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008302:	6839      	ldr	r1, [r7, #0]
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 f860 	bl	80083ca <USBD_CtlError>
}
 800830a:	bf00      	nop
 800830c:	3708      	adds	r7, #8
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}

08008312 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008312:	b580      	push	{r7, lr}
 8008314:	b082      	sub	sp, #8
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
 800831a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008322:	b2db      	uxtb	r3, r3
 8008324:	3b01      	subs	r3, #1
 8008326:	2b02      	cmp	r3, #2
 8008328:	d80b      	bhi.n	8008342 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	885b      	ldrh	r3, [r3, #2]
 800832e:	2b01      	cmp	r3, #1
 8008330:	d10c      	bne.n	800834c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 f910 	bl	8008560 <USBD_CtlSendStatus>
      }
      break;
 8008340:	e004      	b.n	800834c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008342:	6839      	ldr	r1, [r7, #0]
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 f840 	bl	80083ca <USBD_CtlError>
      break;
 800834a:	e000      	b.n	800834e <USBD_ClrFeature+0x3c>
      break;
 800834c:	bf00      	nop
  }
}
 800834e:	bf00      	nop
 8008350:	3708      	adds	r7, #8
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}

08008356 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008356:	b580      	push	{r7, lr}
 8008358:	b084      	sub	sp, #16
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
 800835e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	781a      	ldrb	r2, [r3, #0]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	3301      	adds	r3, #1
 8008370:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	781a      	ldrb	r2, [r3, #0]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	3301      	adds	r3, #1
 800837e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008380:	68f8      	ldr	r0, [r7, #12]
 8008382:	f7ff fa41 	bl	8007808 <SWAPBYTE>
 8008386:	4603      	mov	r3, r0
 8008388:	461a      	mov	r2, r3
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	3301      	adds	r3, #1
 8008392:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	3301      	adds	r3, #1
 8008398:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800839a:	68f8      	ldr	r0, [r7, #12]
 800839c:	f7ff fa34 	bl	8007808 <SWAPBYTE>
 80083a0:	4603      	mov	r3, r0
 80083a2:	461a      	mov	r2, r3
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	3301      	adds	r3, #1
 80083ac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	3301      	adds	r3, #1
 80083b2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80083b4:	68f8      	ldr	r0, [r7, #12]
 80083b6:	f7ff fa27 	bl	8007808 <SWAPBYTE>
 80083ba:	4603      	mov	r3, r0
 80083bc:	461a      	mov	r2, r3
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	80da      	strh	r2, [r3, #6]
}
 80083c2:	bf00      	nop
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}

080083ca <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083ca:	b580      	push	{r7, lr}
 80083cc:	b082      	sub	sp, #8
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
 80083d2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80083d4:	2180      	movs	r1, #128	; 0x80
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 fcf6 	bl	8008dc8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80083dc:	2100      	movs	r1, #0
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 fcf2 	bl	8008dc8 <USBD_LL_StallEP>
}
 80083e4:	bf00      	nop
 80083e6:	3708      	adds	r7, #8
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b086      	sub	sp, #24
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	60b9      	str	r1, [r7, #8]
 80083f6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80083f8:	2300      	movs	r3, #0
 80083fa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d036      	beq.n	8008470 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008406:	6938      	ldr	r0, [r7, #16]
 8008408:	f000 f836 	bl	8008478 <USBD_GetLen>
 800840c:	4603      	mov	r3, r0
 800840e:	3301      	adds	r3, #1
 8008410:	b29b      	uxth	r3, r3
 8008412:	005b      	lsls	r3, r3, #1
 8008414:	b29a      	uxth	r2, r3
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800841a:	7dfb      	ldrb	r3, [r7, #23]
 800841c:	68ba      	ldr	r2, [r7, #8]
 800841e:	4413      	add	r3, r2
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	7812      	ldrb	r2, [r2, #0]
 8008424:	701a      	strb	r2, [r3, #0]
  idx++;
 8008426:	7dfb      	ldrb	r3, [r7, #23]
 8008428:	3301      	adds	r3, #1
 800842a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800842c:	7dfb      	ldrb	r3, [r7, #23]
 800842e:	68ba      	ldr	r2, [r7, #8]
 8008430:	4413      	add	r3, r2
 8008432:	2203      	movs	r2, #3
 8008434:	701a      	strb	r2, [r3, #0]
  idx++;
 8008436:	7dfb      	ldrb	r3, [r7, #23]
 8008438:	3301      	adds	r3, #1
 800843a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800843c:	e013      	b.n	8008466 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800843e:	7dfb      	ldrb	r3, [r7, #23]
 8008440:	68ba      	ldr	r2, [r7, #8]
 8008442:	4413      	add	r3, r2
 8008444:	693a      	ldr	r2, [r7, #16]
 8008446:	7812      	ldrb	r2, [r2, #0]
 8008448:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	3301      	adds	r3, #1
 800844e:	613b      	str	r3, [r7, #16]
    idx++;
 8008450:	7dfb      	ldrb	r3, [r7, #23]
 8008452:	3301      	adds	r3, #1
 8008454:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008456:	7dfb      	ldrb	r3, [r7, #23]
 8008458:	68ba      	ldr	r2, [r7, #8]
 800845a:	4413      	add	r3, r2
 800845c:	2200      	movs	r2, #0
 800845e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008460:	7dfb      	ldrb	r3, [r7, #23]
 8008462:	3301      	adds	r3, #1
 8008464:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d1e7      	bne.n	800843e <USBD_GetString+0x52>
 800846e:	e000      	b.n	8008472 <USBD_GetString+0x86>
    return;
 8008470:	bf00      	nop
  }
}
 8008472:	3718      	adds	r7, #24
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008478:	b480      	push	{r7}
 800847a:	b085      	sub	sp, #20
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008480:	2300      	movs	r3, #0
 8008482:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008488:	e005      	b.n	8008496 <USBD_GetLen+0x1e>
  {
    len++;
 800848a:	7bfb      	ldrb	r3, [r7, #15]
 800848c:	3301      	adds	r3, #1
 800848e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	3301      	adds	r3, #1
 8008494:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d1f5      	bne.n	800848a <USBD_GetLen+0x12>
  }

  return len;
 800849e:	7bfb      	ldrb	r3, [r7, #15]
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3714      	adds	r7, #20
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr

080084ac <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	60f8      	str	r0, [r7, #12]
 80084b4:	60b9      	str	r1, [r7, #8]
 80084b6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2202      	movs	r2, #2
 80084bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	68ba      	ldr	r2, [r7, #8]
 80084d0:	2100      	movs	r1, #0
 80084d2:	68f8      	ldr	r0, [r7, #12]
 80084d4:	f000 fd01 	bl	8008eda <USBD_LL_Transmit>

  return USBD_OK;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80084e2:	b580      	push	{r7, lr}
 80084e4:	b084      	sub	sp, #16
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	60f8      	str	r0, [r7, #12]
 80084ea:	60b9      	str	r1, [r7, #8]
 80084ec:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	68ba      	ldr	r2, [r7, #8]
 80084f2:	2100      	movs	r1, #0
 80084f4:	68f8      	ldr	r0, [r7, #12]
 80084f6:	f000 fcf0 	bl	8008eda <USBD_LL_Transmit>

  return USBD_OK;
 80084fa:	2300      	movs	r3, #0
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3710      	adds	r7, #16
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af00      	add	r7, sp, #0
 800850a:	60f8      	str	r0, [r7, #12]
 800850c:	60b9      	str	r1, [r7, #8]
 800850e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2203      	movs	r2, #3
 8008514:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	68ba      	ldr	r2, [r7, #8]
 800852c:	2100      	movs	r1, #0
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f000 fcf4 	bl	8008f1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008534:	2300      	movs	r3, #0
}
 8008536:	4618      	mov	r0, r3
 8008538:	3710      	adds	r7, #16
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b084      	sub	sp, #16
 8008542:	af00      	add	r7, sp, #0
 8008544:	60f8      	str	r0, [r7, #12]
 8008546:	60b9      	str	r1, [r7, #8]
 8008548:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	68ba      	ldr	r2, [r7, #8]
 800854e:	2100      	movs	r1, #0
 8008550:	68f8      	ldr	r0, [r7, #12]
 8008552:	f000 fce3 	bl	8008f1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008556:	2300      	movs	r3, #0
}
 8008558:	4618      	mov	r0, r3
 800855a:	3710      	adds	r7, #16
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b082      	sub	sp, #8
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2204      	movs	r2, #4
 800856c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008570:	2300      	movs	r3, #0
 8008572:	2200      	movs	r2, #0
 8008574:	2100      	movs	r1, #0
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 fcaf 	bl	8008eda <USBD_LL_Transmit>

  return USBD_OK;
 800857c:	2300      	movs	r3, #0
}
 800857e:	4618      	mov	r0, r3
 8008580:	3708      	adds	r7, #8
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008586:	b580      	push	{r7, lr}
 8008588:	b082      	sub	sp, #8
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2205      	movs	r2, #5
 8008592:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008596:	2300      	movs	r3, #0
 8008598:	2200      	movs	r2, #0
 800859a:	2100      	movs	r1, #0
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f000 fcbd 	bl	8008f1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80085a2:	2300      	movs	r3, #0
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3708      	adds	r7, #8
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80085b0:	2200      	movs	r2, #0
 80085b2:	4912      	ldr	r1, [pc, #72]	; (80085fc <MX_USB_DEVICE_Init+0x50>)
 80085b4:	4812      	ldr	r0, [pc, #72]	; (8008600 <MX_USB_DEVICE_Init+0x54>)
 80085b6:	f7fe fd07 	bl	8006fc8 <USBD_Init>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d001      	beq.n	80085c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80085c0:	f7f8 fbe4 	bl	8000d8c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80085c4:	490f      	ldr	r1, [pc, #60]	; (8008604 <MX_USB_DEVICE_Init+0x58>)
 80085c6:	480e      	ldr	r0, [pc, #56]	; (8008600 <MX_USB_DEVICE_Init+0x54>)
 80085c8:	f7fe fd2e 	bl	8007028 <USBD_RegisterClass>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d001      	beq.n	80085d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80085d2:	f7f8 fbdb 	bl	8000d8c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80085d6:	490c      	ldr	r1, [pc, #48]	; (8008608 <MX_USB_DEVICE_Init+0x5c>)
 80085d8:	4809      	ldr	r0, [pc, #36]	; (8008600 <MX_USB_DEVICE_Init+0x54>)
 80085da:	f7fe fc1f 	bl	8006e1c <USBD_CDC_RegisterInterface>
 80085de:	4603      	mov	r3, r0
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d001      	beq.n	80085e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80085e4:	f7f8 fbd2 	bl	8000d8c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80085e8:	4805      	ldr	r0, [pc, #20]	; (8008600 <MX_USB_DEVICE_Init+0x54>)
 80085ea:	f7fe fd53 	bl	8007094 <USBD_Start>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d001      	beq.n	80085f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80085f4:	f7f8 fbca 	bl	8000d8c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80085f8:	bf00      	nop
 80085fa:	bd80      	pop	{r7, pc}
 80085fc:	200001cc 	.word	0x200001cc
 8008600:	200003ec 	.word	0x200003ec
 8008604:	20000138 	.word	0x20000138
 8008608:	200001b8 	.word	0x200001b8

0800860c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008610:	2200      	movs	r2, #0
 8008612:	4905      	ldr	r1, [pc, #20]	; (8008628 <CDC_Init_FS+0x1c>)
 8008614:	4805      	ldr	r0, [pc, #20]	; (800862c <CDC_Init_FS+0x20>)
 8008616:	f7fe fc1b 	bl	8006e50 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800861a:	4905      	ldr	r1, [pc, #20]	; (8008630 <CDC_Init_FS+0x24>)
 800861c:	4803      	ldr	r0, [pc, #12]	; (800862c <CDC_Init_FS+0x20>)
 800861e:	f7fe fc39 	bl	8006e94 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008622:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008624:	4618      	mov	r0, r3
 8008626:	bd80      	pop	{r7, pc}
 8008628:	20000ec8 	.word	0x20000ec8
 800862c:	200003ec 	.word	0x200003ec
 8008630:	200006c8 	.word	0x200006c8

08008634 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008634:	b480      	push	{r7}
 8008636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008638:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800863a:	4618      	mov	r0, r3
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr

08008644 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008644:	b480      	push	{r7}
 8008646:	b083      	sub	sp, #12
 8008648:	af00      	add	r7, sp, #0
 800864a:	4603      	mov	r3, r0
 800864c:	6039      	str	r1, [r7, #0]
 800864e:	71fb      	strb	r3, [r7, #7]
 8008650:	4613      	mov	r3, r2
 8008652:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008654:	79fb      	ldrb	r3, [r7, #7]
 8008656:	2b23      	cmp	r3, #35	; 0x23
 8008658:	d84a      	bhi.n	80086f0 <CDC_Control_FS+0xac>
 800865a:	a201      	add	r2, pc, #4	; (adr r2, 8008660 <CDC_Control_FS+0x1c>)
 800865c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008660:	080086f1 	.word	0x080086f1
 8008664:	080086f1 	.word	0x080086f1
 8008668:	080086f1 	.word	0x080086f1
 800866c:	080086f1 	.word	0x080086f1
 8008670:	080086f1 	.word	0x080086f1
 8008674:	080086f1 	.word	0x080086f1
 8008678:	080086f1 	.word	0x080086f1
 800867c:	080086f1 	.word	0x080086f1
 8008680:	080086f1 	.word	0x080086f1
 8008684:	080086f1 	.word	0x080086f1
 8008688:	080086f1 	.word	0x080086f1
 800868c:	080086f1 	.word	0x080086f1
 8008690:	080086f1 	.word	0x080086f1
 8008694:	080086f1 	.word	0x080086f1
 8008698:	080086f1 	.word	0x080086f1
 800869c:	080086f1 	.word	0x080086f1
 80086a0:	080086f1 	.word	0x080086f1
 80086a4:	080086f1 	.word	0x080086f1
 80086a8:	080086f1 	.word	0x080086f1
 80086ac:	080086f1 	.word	0x080086f1
 80086b0:	080086f1 	.word	0x080086f1
 80086b4:	080086f1 	.word	0x080086f1
 80086b8:	080086f1 	.word	0x080086f1
 80086bc:	080086f1 	.word	0x080086f1
 80086c0:	080086f1 	.word	0x080086f1
 80086c4:	080086f1 	.word	0x080086f1
 80086c8:	080086f1 	.word	0x080086f1
 80086cc:	080086f1 	.word	0x080086f1
 80086d0:	080086f1 	.word	0x080086f1
 80086d4:	080086f1 	.word	0x080086f1
 80086d8:	080086f1 	.word	0x080086f1
 80086dc:	080086f1 	.word	0x080086f1
 80086e0:	080086f1 	.word	0x080086f1
 80086e4:	080086f1 	.word	0x080086f1
 80086e8:	080086f1 	.word	0x080086f1
 80086ec:	080086f1 	.word	0x080086f1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80086f0:	bf00      	nop
  }

  return (USBD_OK);
 80086f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	370c      	adds	r7, #12
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
strcpy(Buf,Buffer);
 800870a:	4b09      	ldr	r3, [pc, #36]	; (8008730 <CDC_Receive_FS+0x30>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4619      	mov	r1, r3
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 fca7 	bl	8009064 <strcpy>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008716:	6879      	ldr	r1, [r7, #4]
 8008718:	4806      	ldr	r0, [pc, #24]	; (8008734 <CDC_Receive_FS+0x34>)
 800871a:	f7fe fbbb 	bl	8006e94 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800871e:	4805      	ldr	r0, [pc, #20]	; (8008734 <CDC_Receive_FS+0x34>)
 8008720:	f7fe fc1c 	bl	8006f5c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008724:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008726:	4618      	mov	r0, r3
 8008728:	3708      	adds	r7, #8
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	200016c8 	.word	0x200016c8
 8008734:	200003ec 	.word	0x200003ec

08008738 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	460b      	mov	r3, r1
 8008742:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008744:	2300      	movs	r3, #0
 8008746:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008748:	4b0d      	ldr	r3, [pc, #52]	; (8008780 <CDC_Transmit_FS+0x48>)
 800874a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800874e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008756:	2b00      	cmp	r3, #0
 8008758:	d001      	beq.n	800875e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800875a:	2301      	movs	r3, #1
 800875c:	e00b      	b.n	8008776 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800875e:	887b      	ldrh	r3, [r7, #2]
 8008760:	461a      	mov	r2, r3
 8008762:	6879      	ldr	r1, [r7, #4]
 8008764:	4806      	ldr	r0, [pc, #24]	; (8008780 <CDC_Transmit_FS+0x48>)
 8008766:	f7fe fb73 	bl	8006e50 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800876a:	4805      	ldr	r0, [pc, #20]	; (8008780 <CDC_Transmit_FS+0x48>)
 800876c:	f7fe fbb0 	bl	8006ed0 <USBD_CDC_TransmitPacket>
 8008770:	4603      	mov	r3, r0
 8008772:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008774:	7bfb      	ldrb	r3, [r7, #15]
}
 8008776:	4618      	mov	r0, r3
 8008778:	3710      	adds	r7, #16
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	200003ec 	.word	0x200003ec

08008784 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008784:	b480      	push	{r7}
 8008786:	b087      	sub	sp, #28
 8008788:	af00      	add	r7, sp, #0
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	60b9      	str	r1, [r7, #8]
 800878e:	4613      	mov	r3, r2
 8008790:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008792:	2300      	movs	r3, #0
 8008794:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008796:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800879a:	4618      	mov	r0, r3
 800879c:	371c      	adds	r7, #28
 800879e:	46bd      	mov	sp, r7
 80087a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a4:	4770      	bx	lr
	...

080087a8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b083      	sub	sp, #12
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	4603      	mov	r3, r0
 80087b0:	6039      	str	r1, [r7, #0]
 80087b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	2212      	movs	r2, #18
 80087b8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80087ba:	4b03      	ldr	r3, [pc, #12]	; (80087c8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80087bc:	4618      	mov	r0, r3
 80087be:	370c      	adds	r7, #12
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr
 80087c8:	200001e8 	.word	0x200001e8

080087cc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b083      	sub	sp, #12
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	4603      	mov	r3, r0
 80087d4:	6039      	str	r1, [r7, #0]
 80087d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	2204      	movs	r2, #4
 80087dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80087de:	4b03      	ldr	r3, [pc, #12]	; (80087ec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr
 80087ec:	200001fc 	.word	0x200001fc

080087f0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b082      	sub	sp, #8
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	4603      	mov	r3, r0
 80087f8:	6039      	str	r1, [r7, #0]
 80087fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80087fc:	79fb      	ldrb	r3, [r7, #7]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d105      	bne.n	800880e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008802:	683a      	ldr	r2, [r7, #0]
 8008804:	4907      	ldr	r1, [pc, #28]	; (8008824 <USBD_FS_ProductStrDescriptor+0x34>)
 8008806:	4808      	ldr	r0, [pc, #32]	; (8008828 <USBD_FS_ProductStrDescriptor+0x38>)
 8008808:	f7ff fdf0 	bl	80083ec <USBD_GetString>
 800880c:	e004      	b.n	8008818 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800880e:	683a      	ldr	r2, [r7, #0]
 8008810:	4904      	ldr	r1, [pc, #16]	; (8008824 <USBD_FS_ProductStrDescriptor+0x34>)
 8008812:	4805      	ldr	r0, [pc, #20]	; (8008828 <USBD_FS_ProductStrDescriptor+0x38>)
 8008814:	f7ff fdea 	bl	80083ec <USBD_GetString>
  }
  return USBD_StrDesc;
 8008818:	4b02      	ldr	r3, [pc, #8]	; (8008824 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800881a:	4618      	mov	r0, r3
 800881c:	3708      	adds	r7, #8
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
 8008822:	bf00      	nop
 8008824:	200016cc 	.word	0x200016cc
 8008828:	08009204 	.word	0x08009204

0800882c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
 8008832:	4603      	mov	r3, r0
 8008834:	6039      	str	r1, [r7, #0]
 8008836:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008838:	683a      	ldr	r2, [r7, #0]
 800883a:	4904      	ldr	r1, [pc, #16]	; (800884c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800883c:	4804      	ldr	r0, [pc, #16]	; (8008850 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800883e:	f7ff fdd5 	bl	80083ec <USBD_GetString>
  return USBD_StrDesc;
 8008842:	4b02      	ldr	r3, [pc, #8]	; (800884c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008844:	4618      	mov	r0, r3
 8008846:	3708      	adds	r7, #8
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}
 800884c:	200016cc 	.word	0x200016cc
 8008850:	0800921c 	.word	0x0800921c

08008854 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b082      	sub	sp, #8
 8008858:	af00      	add	r7, sp, #0
 800885a:	4603      	mov	r3, r0
 800885c:	6039      	str	r1, [r7, #0]
 800885e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	221a      	movs	r2, #26
 8008864:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008866:	f000 f843 	bl	80088f0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800886a:	4b02      	ldr	r3, [pc, #8]	; (8008874 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800886c:	4618      	mov	r0, r3
 800886e:	3708      	adds	r7, #8
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}
 8008874:	20000200 	.word	0x20000200

08008878 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
 800887e:	4603      	mov	r3, r0
 8008880:	6039      	str	r1, [r7, #0]
 8008882:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008884:	79fb      	ldrb	r3, [r7, #7]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d105      	bne.n	8008896 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800888a:	683a      	ldr	r2, [r7, #0]
 800888c:	4907      	ldr	r1, [pc, #28]	; (80088ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800888e:	4808      	ldr	r0, [pc, #32]	; (80088b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008890:	f7ff fdac 	bl	80083ec <USBD_GetString>
 8008894:	e004      	b.n	80088a0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008896:	683a      	ldr	r2, [r7, #0]
 8008898:	4904      	ldr	r1, [pc, #16]	; (80088ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800889a:	4805      	ldr	r0, [pc, #20]	; (80088b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800889c:	f7ff fda6 	bl	80083ec <USBD_GetString>
  }
  return USBD_StrDesc;
 80088a0:	4b02      	ldr	r3, [pc, #8]	; (80088ac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3708      	adds	r7, #8
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	200016cc 	.word	0x200016cc
 80088b0:	08009230 	.word	0x08009230

080088b4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	4603      	mov	r3, r0
 80088bc:	6039      	str	r1, [r7, #0]
 80088be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80088c0:	79fb      	ldrb	r3, [r7, #7]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d105      	bne.n	80088d2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80088c6:	683a      	ldr	r2, [r7, #0]
 80088c8:	4907      	ldr	r1, [pc, #28]	; (80088e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80088ca:	4808      	ldr	r0, [pc, #32]	; (80088ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80088cc:	f7ff fd8e 	bl	80083ec <USBD_GetString>
 80088d0:	e004      	b.n	80088dc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80088d2:	683a      	ldr	r2, [r7, #0]
 80088d4:	4904      	ldr	r1, [pc, #16]	; (80088e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80088d6:	4805      	ldr	r0, [pc, #20]	; (80088ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80088d8:	f7ff fd88 	bl	80083ec <USBD_GetString>
  }
  return USBD_StrDesc;
 80088dc:	4b02      	ldr	r3, [pc, #8]	; (80088e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3708      	adds	r7, #8
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
 80088e6:	bf00      	nop
 80088e8:	200016cc 	.word	0x200016cc
 80088ec:	0800923c 	.word	0x0800923c

080088f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b084      	sub	sp, #16
 80088f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80088f6:	4b0f      	ldr	r3, [pc, #60]	; (8008934 <Get_SerialNum+0x44>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80088fc:	4b0e      	ldr	r3, [pc, #56]	; (8008938 <Get_SerialNum+0x48>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008902:	4b0e      	ldr	r3, [pc, #56]	; (800893c <Get_SerialNum+0x4c>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008908:	68fa      	ldr	r2, [r7, #12]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	4413      	add	r3, r2
 800890e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d009      	beq.n	800892a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008916:	2208      	movs	r2, #8
 8008918:	4909      	ldr	r1, [pc, #36]	; (8008940 <Get_SerialNum+0x50>)
 800891a:	68f8      	ldr	r0, [r7, #12]
 800891c:	f000 f814 	bl	8008948 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008920:	2204      	movs	r2, #4
 8008922:	4908      	ldr	r1, [pc, #32]	; (8008944 <Get_SerialNum+0x54>)
 8008924:	68b8      	ldr	r0, [r7, #8]
 8008926:	f000 f80f 	bl	8008948 <IntToUnicode>
  }
}
 800892a:	bf00      	nop
 800892c:	3710      	adds	r7, #16
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop
 8008934:	1fff7a10 	.word	0x1fff7a10
 8008938:	1fff7a14 	.word	0x1fff7a14
 800893c:	1fff7a18 	.word	0x1fff7a18
 8008940:	20000202 	.word	0x20000202
 8008944:	20000212 	.word	0x20000212

08008948 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008948:	b480      	push	{r7}
 800894a:	b087      	sub	sp, #28
 800894c:	af00      	add	r7, sp, #0
 800894e:	60f8      	str	r0, [r7, #12]
 8008950:	60b9      	str	r1, [r7, #8]
 8008952:	4613      	mov	r3, r2
 8008954:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008956:	2300      	movs	r3, #0
 8008958:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800895a:	2300      	movs	r3, #0
 800895c:	75fb      	strb	r3, [r7, #23]
 800895e:	e027      	b.n	80089b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	0f1b      	lsrs	r3, r3, #28
 8008964:	2b09      	cmp	r3, #9
 8008966:	d80b      	bhi.n	8008980 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	0f1b      	lsrs	r3, r3, #28
 800896c:	b2da      	uxtb	r2, r3
 800896e:	7dfb      	ldrb	r3, [r7, #23]
 8008970:	005b      	lsls	r3, r3, #1
 8008972:	4619      	mov	r1, r3
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	440b      	add	r3, r1
 8008978:	3230      	adds	r2, #48	; 0x30
 800897a:	b2d2      	uxtb	r2, r2
 800897c:	701a      	strb	r2, [r3, #0]
 800897e:	e00a      	b.n	8008996 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	0f1b      	lsrs	r3, r3, #28
 8008984:	b2da      	uxtb	r2, r3
 8008986:	7dfb      	ldrb	r3, [r7, #23]
 8008988:	005b      	lsls	r3, r3, #1
 800898a:	4619      	mov	r1, r3
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	440b      	add	r3, r1
 8008990:	3237      	adds	r2, #55	; 0x37
 8008992:	b2d2      	uxtb	r2, r2
 8008994:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	011b      	lsls	r3, r3, #4
 800899a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800899c:	7dfb      	ldrb	r3, [r7, #23]
 800899e:	005b      	lsls	r3, r3, #1
 80089a0:	3301      	adds	r3, #1
 80089a2:	68ba      	ldr	r2, [r7, #8]
 80089a4:	4413      	add	r3, r2
 80089a6:	2200      	movs	r2, #0
 80089a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80089aa:	7dfb      	ldrb	r3, [r7, #23]
 80089ac:	3301      	adds	r3, #1
 80089ae:	75fb      	strb	r3, [r7, #23]
 80089b0:	7dfa      	ldrb	r2, [r7, #23]
 80089b2:	79fb      	ldrb	r3, [r7, #7]
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d3d3      	bcc.n	8008960 <IntToUnicode+0x18>
  }
}
 80089b8:	bf00      	nop
 80089ba:	bf00      	nop
 80089bc:	371c      	adds	r7, #28
 80089be:	46bd      	mov	sp, r7
 80089c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c4:	4770      	bx	lr
	...

080089c8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b08a      	sub	sp, #40	; 0x28
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089d0:	f107 0314 	add.w	r3, r7, #20
 80089d4:	2200      	movs	r2, #0
 80089d6:	601a      	str	r2, [r3, #0]
 80089d8:	605a      	str	r2, [r3, #4]
 80089da:	609a      	str	r2, [r3, #8]
 80089dc:	60da      	str	r2, [r3, #12]
 80089de:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80089e8:	d147      	bne.n	8008a7a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80089ea:	2300      	movs	r3, #0
 80089ec:	613b      	str	r3, [r7, #16]
 80089ee:	4b25      	ldr	r3, [pc, #148]	; (8008a84 <HAL_PCD_MspInit+0xbc>)
 80089f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089f2:	4a24      	ldr	r2, [pc, #144]	; (8008a84 <HAL_PCD_MspInit+0xbc>)
 80089f4:	f043 0301 	orr.w	r3, r3, #1
 80089f8:	6313      	str	r3, [r2, #48]	; 0x30
 80089fa:	4b22      	ldr	r3, [pc, #136]	; (8008a84 <HAL_PCD_MspInit+0xbc>)
 80089fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089fe:	f003 0301 	and.w	r3, r3, #1
 8008a02:	613b      	str	r3, [r7, #16]
 8008a04:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008a06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a10:	2300      	movs	r3, #0
 8008a12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008a14:	f107 0314 	add.w	r3, r7, #20
 8008a18:	4619      	mov	r1, r3
 8008a1a:	481b      	ldr	r0, [pc, #108]	; (8008a88 <HAL_PCD_MspInit+0xc0>)
 8008a1c:	f7f8 fd94 	bl	8001548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008a20:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a26:	2302      	movs	r3, #2
 8008a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008a32:	230a      	movs	r3, #10
 8008a34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a36:	f107 0314 	add.w	r3, r7, #20
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	4812      	ldr	r0, [pc, #72]	; (8008a88 <HAL_PCD_MspInit+0xc0>)
 8008a3e:	f7f8 fd83 	bl	8001548 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008a42:	4b10      	ldr	r3, [pc, #64]	; (8008a84 <HAL_PCD_MspInit+0xbc>)
 8008a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a46:	4a0f      	ldr	r2, [pc, #60]	; (8008a84 <HAL_PCD_MspInit+0xbc>)
 8008a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a4c:	6353      	str	r3, [r2, #52]	; 0x34
 8008a4e:	2300      	movs	r3, #0
 8008a50:	60fb      	str	r3, [r7, #12]
 8008a52:	4b0c      	ldr	r3, [pc, #48]	; (8008a84 <HAL_PCD_MspInit+0xbc>)
 8008a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a56:	4a0b      	ldr	r2, [pc, #44]	; (8008a84 <HAL_PCD_MspInit+0xbc>)
 8008a58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8008a5e:	4b09      	ldr	r3, [pc, #36]	; (8008a84 <HAL_PCD_MspInit+0xbc>)
 8008a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a66:	60fb      	str	r3, [r7, #12]
 8008a68:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	2100      	movs	r1, #0
 8008a6e:	2043      	movs	r0, #67	; 0x43
 8008a70:	f7f8 fd25 	bl	80014be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008a74:	2043      	movs	r0, #67	; 0x43
 8008a76:	f7f8 fd3e 	bl	80014f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008a7a:	bf00      	nop
 8008a7c:	3728      	adds	r7, #40	; 0x28
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	40023800 	.word	0x40023800
 8008a88:	40020000 	.word	0x40020000

08008a8c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b082      	sub	sp, #8
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	4610      	mov	r0, r2
 8008aa4:	f7fe fb43 	bl	800712e <USBD_LL_SetupStage>
}
 8008aa8:	bf00      	nop
 8008aaa:	3708      	adds	r7, #8
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b082      	sub	sp, #8
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	460b      	mov	r3, r1
 8008aba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008ac2:	78fa      	ldrb	r2, [r7, #3]
 8008ac4:	6879      	ldr	r1, [r7, #4]
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	00db      	lsls	r3, r3, #3
 8008aca:	4413      	add	r3, r2
 8008acc:	009b      	lsls	r3, r3, #2
 8008ace:	440b      	add	r3, r1
 8008ad0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008ad4:	681a      	ldr	r2, [r3, #0]
 8008ad6:	78fb      	ldrb	r3, [r7, #3]
 8008ad8:	4619      	mov	r1, r3
 8008ada:	f7fe fb7d 	bl	80071d8 <USBD_LL_DataOutStage>
}
 8008ade:	bf00      	nop
 8008ae0:	3708      	adds	r7, #8
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}

08008ae6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ae6:	b580      	push	{r7, lr}
 8008ae8:	b082      	sub	sp, #8
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
 8008aee:	460b      	mov	r3, r1
 8008af0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008af8:	78fa      	ldrb	r2, [r7, #3]
 8008afa:	6879      	ldr	r1, [r7, #4]
 8008afc:	4613      	mov	r3, r2
 8008afe:	00db      	lsls	r3, r3, #3
 8008b00:	4413      	add	r3, r2
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	440b      	add	r3, r1
 8008b06:	334c      	adds	r3, #76	; 0x4c
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	78fb      	ldrb	r3, [r7, #3]
 8008b0c:	4619      	mov	r1, r3
 8008b0e:	f7fe fc16 	bl	800733e <USBD_LL_DataInStage>
}
 8008b12:	bf00      	nop
 8008b14:	3708      	adds	r7, #8
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}

08008b1a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b1a:	b580      	push	{r7, lr}
 8008b1c:	b082      	sub	sp, #8
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f7fe fd4a 	bl	80075c2 <USBD_LL_SOF>
}
 8008b2e:	bf00      	nop
 8008b30:	3708      	adds	r7, #8
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}

08008b36 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b36:	b580      	push	{r7, lr}
 8008b38:	b084      	sub	sp, #16
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	68db      	ldr	r3, [r3, #12]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d102      	bne.n	8008b50 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	73fb      	strb	r3, [r7, #15]
 8008b4e:	e008      	b.n	8008b62 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	68db      	ldr	r3, [r3, #12]
 8008b54:	2b02      	cmp	r3, #2
 8008b56:	d102      	bne.n	8008b5e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	73fb      	strb	r3, [r7, #15]
 8008b5c:	e001      	b.n	8008b62 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008b5e:	f7f8 f915 	bl	8000d8c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b68:	7bfa      	ldrb	r2, [r7, #15]
 8008b6a:	4611      	mov	r1, r2
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f7fe fcea 	bl	8007546 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f7fe fc92 	bl	80074a2 <USBD_LL_Reset>
}
 8008b7e:	bf00      	nop
 8008b80:	3710      	adds	r7, #16
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
	...

08008b88 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b082      	sub	sp, #8
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b96:	4618      	mov	r0, r3
 8008b98:	f7fe fce5 	bl	8007566 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	6812      	ldr	r2, [r2, #0]
 8008baa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008bae:	f043 0301 	orr.w	r3, r3, #1
 8008bb2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6a1b      	ldr	r3, [r3, #32]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d005      	beq.n	8008bc8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008bbc:	4b04      	ldr	r3, [pc, #16]	; (8008bd0 <HAL_PCD_SuspendCallback+0x48>)
 8008bbe:	691b      	ldr	r3, [r3, #16]
 8008bc0:	4a03      	ldr	r2, [pc, #12]	; (8008bd0 <HAL_PCD_SuspendCallback+0x48>)
 8008bc2:	f043 0306 	orr.w	r3, r3, #6
 8008bc6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008bc8:	bf00      	nop
 8008bca:	3708      	adds	r7, #8
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	e000ed00 	.word	0xe000ed00

08008bd4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b082      	sub	sp, #8
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008be2:	4618      	mov	r0, r3
 8008be4:	f7fe fcd5 	bl	8007592 <USBD_LL_Resume>
}
 8008be8:	bf00      	nop
 8008bea:	3708      	adds	r7, #8
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b082      	sub	sp, #8
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c02:	78fa      	ldrb	r2, [r7, #3]
 8008c04:	4611      	mov	r1, r2
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7fe fd2d 	bl	8007666 <USBD_LL_IsoOUTIncomplete>
}
 8008c0c:	bf00      	nop
 8008c0e:	3708      	adds	r7, #8
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b082      	sub	sp, #8
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	460b      	mov	r3, r1
 8008c1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c26:	78fa      	ldrb	r2, [r7, #3]
 8008c28:	4611      	mov	r1, r2
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f7fe fce9 	bl	8007602 <USBD_LL_IsoINIncomplete>
}
 8008c30:	bf00      	nop
 8008c32:	3708      	adds	r7, #8
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7fe fd3f 	bl	80076ca <USBD_LL_DevConnected>
}
 8008c4c:	bf00      	nop
 8008c4e:	3708      	adds	r7, #8
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b082      	sub	sp, #8
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7fe fd3c 	bl	80076e0 <USBD_LL_DevDisconnected>
}
 8008c68:	bf00      	nop
 8008c6a:	3708      	adds	r7, #8
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b082      	sub	sp, #8
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d13c      	bne.n	8008cfa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008c80:	4a20      	ldr	r2, [pc, #128]	; (8008d04 <USBD_LL_Init+0x94>)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	4a1e      	ldr	r2, [pc, #120]	; (8008d04 <USBD_LL_Init+0x94>)
 8008c8c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008c90:	4b1c      	ldr	r3, [pc, #112]	; (8008d04 <USBD_LL_Init+0x94>)
 8008c92:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008c96:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008c98:	4b1a      	ldr	r3, [pc, #104]	; (8008d04 <USBD_LL_Init+0x94>)
 8008c9a:	2204      	movs	r2, #4
 8008c9c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008c9e:	4b19      	ldr	r3, [pc, #100]	; (8008d04 <USBD_LL_Init+0x94>)
 8008ca0:	2202      	movs	r2, #2
 8008ca2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008ca4:	4b17      	ldr	r3, [pc, #92]	; (8008d04 <USBD_LL_Init+0x94>)
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008caa:	4b16      	ldr	r3, [pc, #88]	; (8008d04 <USBD_LL_Init+0x94>)
 8008cac:	2202      	movs	r2, #2
 8008cae:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008cb0:	4b14      	ldr	r3, [pc, #80]	; (8008d04 <USBD_LL_Init+0x94>)
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008cb6:	4b13      	ldr	r3, [pc, #76]	; (8008d04 <USBD_LL_Init+0x94>)
 8008cb8:	2200      	movs	r2, #0
 8008cba:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008cbc:	4b11      	ldr	r3, [pc, #68]	; (8008d04 <USBD_LL_Init+0x94>)
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008cc2:	4b10      	ldr	r3, [pc, #64]	; (8008d04 <USBD_LL_Init+0x94>)
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008cc8:	4b0e      	ldr	r3, [pc, #56]	; (8008d04 <USBD_LL_Init+0x94>)
 8008cca:	2200      	movs	r2, #0
 8008ccc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008cce:	480d      	ldr	r0, [pc, #52]	; (8008d04 <USBD_LL_Init+0x94>)
 8008cd0:	f7f9 fc04 	bl	80024dc <HAL_PCD_Init>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d001      	beq.n	8008cde <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008cda:	f7f8 f857 	bl	8000d8c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008cde:	2180      	movs	r1, #128	; 0x80
 8008ce0:	4808      	ldr	r0, [pc, #32]	; (8008d04 <USBD_LL_Init+0x94>)
 8008ce2:	f7fa fe5c 	bl	800399e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008ce6:	2240      	movs	r2, #64	; 0x40
 8008ce8:	2100      	movs	r1, #0
 8008cea:	4806      	ldr	r0, [pc, #24]	; (8008d04 <USBD_LL_Init+0x94>)
 8008cec:	f7fa fe10 	bl	8003910 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008cf0:	2280      	movs	r2, #128	; 0x80
 8008cf2:	2101      	movs	r1, #1
 8008cf4:	4803      	ldr	r0, [pc, #12]	; (8008d04 <USBD_LL_Init+0x94>)
 8008cf6:	f7fa fe0b 	bl	8003910 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008cfa:	2300      	movs	r3, #0
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3708      	adds	r7, #8
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}
 8008d04:	200018cc 	.word	0x200018cc

08008d08 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d10:	2300      	movs	r3, #0
 8008d12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d14:	2300      	movs	r3, #0
 8008d16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f7f9 fcf9 	bl	8002716 <HAL_PCD_Start>
 8008d24:	4603      	mov	r3, r0
 8008d26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d28:	7bfb      	ldrb	r3, [r7, #15]
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f000 f942 	bl	8008fb4 <USBD_Get_USB_Status>
 8008d30:	4603      	mov	r3, r0
 8008d32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d34:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3710      	adds	r7, #16
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}

08008d3e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008d3e:	b580      	push	{r7, lr}
 8008d40:	b084      	sub	sp, #16
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
 8008d46:	4608      	mov	r0, r1
 8008d48:	4611      	mov	r1, r2
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	70fb      	strb	r3, [r7, #3]
 8008d50:	460b      	mov	r3, r1
 8008d52:	70bb      	strb	r3, [r7, #2]
 8008d54:	4613      	mov	r3, r2
 8008d56:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008d66:	78bb      	ldrb	r3, [r7, #2]
 8008d68:	883a      	ldrh	r2, [r7, #0]
 8008d6a:	78f9      	ldrb	r1, [r7, #3]
 8008d6c:	f7fa f9ca 	bl	8003104 <HAL_PCD_EP_Open>
 8008d70:	4603      	mov	r3, r0
 8008d72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d74:	7bfb      	ldrb	r3, [r7, #15]
 8008d76:	4618      	mov	r0, r3
 8008d78:	f000 f91c 	bl	8008fb4 <USBD_Get_USB_Status>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d80:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d8a:	b580      	push	{r7, lr}
 8008d8c:	b084      	sub	sp, #16
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
 8008d92:	460b      	mov	r3, r1
 8008d94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d96:	2300      	movs	r3, #0
 8008d98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008da4:	78fa      	ldrb	r2, [r7, #3]
 8008da6:	4611      	mov	r1, r2
 8008da8:	4618      	mov	r0, r3
 8008daa:	f7fa fa13 	bl	80031d4 <HAL_PCD_EP_Close>
 8008dae:	4603      	mov	r3, r0
 8008db0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008db2:	7bfb      	ldrb	r3, [r7, #15]
 8008db4:	4618      	mov	r0, r3
 8008db6:	f000 f8fd 	bl	8008fb4 <USBD_Get_USB_Status>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dbe:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3710      	adds	r7, #16
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008de2:	78fa      	ldrb	r2, [r7, #3]
 8008de4:	4611      	mov	r1, r2
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7fa faeb 	bl	80033c2 <HAL_PCD_EP_SetStall>
 8008dec:	4603      	mov	r3, r0
 8008dee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008df0:	7bfb      	ldrb	r3, [r7, #15]
 8008df2:	4618      	mov	r0, r3
 8008df4:	f000 f8de 	bl	8008fb4 <USBD_Get_USB_Status>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dfc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3710      	adds	r7, #16
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}

08008e06 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e06:	b580      	push	{r7, lr}
 8008e08:	b084      	sub	sp, #16
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
 8008e0e:	460b      	mov	r3, r1
 8008e10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e12:	2300      	movs	r3, #0
 8008e14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e16:	2300      	movs	r3, #0
 8008e18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e20:	78fa      	ldrb	r2, [r7, #3]
 8008e22:	4611      	mov	r1, r2
 8008e24:	4618      	mov	r0, r3
 8008e26:	f7fa fb30 	bl	800348a <HAL_PCD_EP_ClrStall>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e2e:	7bfb      	ldrb	r3, [r7, #15]
 8008e30:	4618      	mov	r0, r3
 8008e32:	f000 f8bf 	bl	8008fb4 <USBD_Get_USB_Status>
 8008e36:	4603      	mov	r3, r0
 8008e38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3710      	adds	r7, #16
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b085      	sub	sp, #20
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e56:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008e58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	da0b      	bge.n	8008e78 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008e60:	78fb      	ldrb	r3, [r7, #3]
 8008e62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e66:	68f9      	ldr	r1, [r7, #12]
 8008e68:	4613      	mov	r3, r2
 8008e6a:	00db      	lsls	r3, r3, #3
 8008e6c:	4413      	add	r3, r2
 8008e6e:	009b      	lsls	r3, r3, #2
 8008e70:	440b      	add	r3, r1
 8008e72:	333e      	adds	r3, #62	; 0x3e
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	e00b      	b.n	8008e90 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008e78:	78fb      	ldrb	r3, [r7, #3]
 8008e7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e7e:	68f9      	ldr	r1, [r7, #12]
 8008e80:	4613      	mov	r3, r2
 8008e82:	00db      	lsls	r3, r3, #3
 8008e84:	4413      	add	r3, r2
 8008e86:	009b      	lsls	r3, r3, #2
 8008e88:	440b      	add	r3, r1
 8008e8a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008e8e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3714      	adds	r7, #20
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr

08008e9c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008eac:	2300      	movs	r3, #0
 8008eae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008eb6:	78fa      	ldrb	r2, [r7, #3]
 8008eb8:	4611      	mov	r1, r2
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f7fa f8fd 	bl	80030ba <HAL_PCD_SetAddress>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ec4:	7bfb      	ldrb	r3, [r7, #15]
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f000 f874 	bl	8008fb4 <USBD_Get_USB_Status>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ed0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3710      	adds	r7, #16
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}

08008eda <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008eda:	b580      	push	{r7, lr}
 8008edc:	b086      	sub	sp, #24
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	60f8      	str	r0, [r7, #12]
 8008ee2:	607a      	str	r2, [r7, #4]
 8008ee4:	603b      	str	r3, [r7, #0]
 8008ee6:	460b      	mov	r3, r1
 8008ee8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008eea:	2300      	movs	r3, #0
 8008eec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008ef8:	7af9      	ldrb	r1, [r7, #11]
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	687a      	ldr	r2, [r7, #4]
 8008efe:	f7fa fa16 	bl	800332e <HAL_PCD_EP_Transmit>
 8008f02:	4603      	mov	r3, r0
 8008f04:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f06:	7dfb      	ldrb	r3, [r7, #23]
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f000 f853 	bl	8008fb4 <USBD_Get_USB_Status>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008f12:	7dbb      	ldrb	r3, [r7, #22]
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3718      	adds	r7, #24
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b086      	sub	sp, #24
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	60f8      	str	r0, [r7, #12]
 8008f24:	607a      	str	r2, [r7, #4]
 8008f26:	603b      	str	r3, [r7, #0]
 8008f28:	460b      	mov	r3, r1
 8008f2a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f30:	2300      	movs	r3, #0
 8008f32:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008f3a:	7af9      	ldrb	r1, [r7, #11]
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	f7fa f992 	bl	8003268 <HAL_PCD_EP_Receive>
 8008f44:	4603      	mov	r3, r0
 8008f46:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f48:	7dfb      	ldrb	r3, [r7, #23]
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f000 f832 	bl	8008fb4 <USBD_Get_USB_Status>
 8008f50:	4603      	mov	r3, r0
 8008f52:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008f54:	7dbb      	ldrb	r3, [r7, #22]
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3718      	adds	r7, #24
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}

08008f5e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f5e:	b580      	push	{r7, lr}
 8008f60:	b082      	sub	sp, #8
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
 8008f66:	460b      	mov	r3, r1
 8008f68:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f70:	78fa      	ldrb	r2, [r7, #3]
 8008f72:	4611      	mov	r1, r2
 8008f74:	4618      	mov	r0, r3
 8008f76:	f7fa f9c2 	bl	80032fe <HAL_PCD_EP_GetRxCount>
 8008f7a:	4603      	mov	r3, r0
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3708      	adds	r7, #8
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008f8c:	4b03      	ldr	r3, [pc, #12]	; (8008f9c <USBD_static_malloc+0x18>)
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	370c      	adds	r7, #12
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr
 8008f9a:	bf00      	nop
 8008f9c:	20001dd8 	.word	0x20001dd8

08008fa0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b083      	sub	sp, #12
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]

}
 8008fa8:	bf00      	nop
 8008faa:	370c      	adds	r7, #12
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr

08008fb4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b085      	sub	sp, #20
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	4603      	mov	r3, r0
 8008fbc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008fc2:	79fb      	ldrb	r3, [r7, #7]
 8008fc4:	2b03      	cmp	r3, #3
 8008fc6:	d817      	bhi.n	8008ff8 <USBD_Get_USB_Status+0x44>
 8008fc8:	a201      	add	r2, pc, #4	; (adr r2, 8008fd0 <USBD_Get_USB_Status+0x1c>)
 8008fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fce:	bf00      	nop
 8008fd0:	08008fe1 	.word	0x08008fe1
 8008fd4:	08008fe7 	.word	0x08008fe7
 8008fd8:	08008fed 	.word	0x08008fed
 8008fdc:	08008ff3 	.word	0x08008ff3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	73fb      	strb	r3, [r7, #15]
    break;
 8008fe4:	e00b      	b.n	8008ffe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008fe6:	2303      	movs	r3, #3
 8008fe8:	73fb      	strb	r3, [r7, #15]
    break;
 8008fea:	e008      	b.n	8008ffe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008fec:	2301      	movs	r3, #1
 8008fee:	73fb      	strb	r3, [r7, #15]
    break;
 8008ff0:	e005      	b.n	8008ffe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008ff2:	2303      	movs	r3, #3
 8008ff4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ff6:	e002      	b.n	8008ffe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008ff8:	2303      	movs	r3, #3
 8008ffa:	73fb      	strb	r3, [r7, #15]
    break;
 8008ffc:	bf00      	nop
  }
  return usb_status;
 8008ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009000:	4618      	mov	r0, r3
 8009002:	3714      	adds	r7, #20
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr

0800900c <__libc_init_array>:
 800900c:	b570      	push	{r4, r5, r6, lr}
 800900e:	4d0d      	ldr	r5, [pc, #52]	; (8009044 <__libc_init_array+0x38>)
 8009010:	4c0d      	ldr	r4, [pc, #52]	; (8009048 <__libc_init_array+0x3c>)
 8009012:	1b64      	subs	r4, r4, r5
 8009014:	10a4      	asrs	r4, r4, #2
 8009016:	2600      	movs	r6, #0
 8009018:	42a6      	cmp	r6, r4
 800901a:	d109      	bne.n	8009030 <__libc_init_array+0x24>
 800901c:	4d0b      	ldr	r5, [pc, #44]	; (800904c <__libc_init_array+0x40>)
 800901e:	4c0c      	ldr	r4, [pc, #48]	; (8009050 <__libc_init_array+0x44>)
 8009020:	f000 f828 	bl	8009074 <_init>
 8009024:	1b64      	subs	r4, r4, r5
 8009026:	10a4      	asrs	r4, r4, #2
 8009028:	2600      	movs	r6, #0
 800902a:	42a6      	cmp	r6, r4
 800902c:	d105      	bne.n	800903a <__libc_init_array+0x2e>
 800902e:	bd70      	pop	{r4, r5, r6, pc}
 8009030:	f855 3b04 	ldr.w	r3, [r5], #4
 8009034:	4798      	blx	r3
 8009036:	3601      	adds	r6, #1
 8009038:	e7ee      	b.n	8009018 <__libc_init_array+0xc>
 800903a:	f855 3b04 	ldr.w	r3, [r5], #4
 800903e:	4798      	blx	r3
 8009040:	3601      	adds	r6, #1
 8009042:	e7f2      	b.n	800902a <__libc_init_array+0x1e>
 8009044:	0800926c 	.word	0x0800926c
 8009048:	0800926c 	.word	0x0800926c
 800904c:	0800926c 	.word	0x0800926c
 8009050:	08009270 	.word	0x08009270

08009054 <memset>:
 8009054:	4402      	add	r2, r0
 8009056:	4603      	mov	r3, r0
 8009058:	4293      	cmp	r3, r2
 800905a:	d100      	bne.n	800905e <memset+0xa>
 800905c:	4770      	bx	lr
 800905e:	f803 1b01 	strb.w	r1, [r3], #1
 8009062:	e7f9      	b.n	8009058 <memset+0x4>

08009064 <strcpy>:
 8009064:	4603      	mov	r3, r0
 8009066:	f811 2b01 	ldrb.w	r2, [r1], #1
 800906a:	f803 2b01 	strb.w	r2, [r3], #1
 800906e:	2a00      	cmp	r2, #0
 8009070:	d1f9      	bne.n	8009066 <strcpy+0x2>
 8009072:	4770      	bx	lr

08009074 <_init>:
 8009074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009076:	bf00      	nop
 8009078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800907a:	bc08      	pop	{r3}
 800907c:	469e      	mov	lr, r3
 800907e:	4770      	bx	lr

08009080 <_fini>:
 8009080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009082:	bf00      	nop
 8009084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009086:	bc08      	pop	{r3}
 8009088:	469e      	mov	lr, r3
 800908a:	4770      	bx	lr
