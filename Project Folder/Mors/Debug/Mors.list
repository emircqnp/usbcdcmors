
Mors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e80  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08009008  08009008  00019008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091e0  080091e0  0002021c  2**0
                  CONTENTS
  4 .ARM          00000008  080091e0  080091e0  000191e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091e8  080091e8  0002021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091e8  080091e8  000191e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091ec  080091ec  000191ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000021c  20000000  080091f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002021c  2**0
                  CONTENTS
 10 .bss          00001dd8  2000021c  2000021c  0002021c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001ff4  20001ff4  0002021c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001aa79  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b72  00000000  00000000  0003acc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001760  00000000  00000000  0003e838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015d0  00000000  00000000  0003ff98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025499  00000000  00000000  00041568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d894  00000000  00000000  00066a01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2d7c  00000000  00000000  00084295  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00157011  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006374  00000000  00000000  00157064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000021c 	.word	0x2000021c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008ff0 	.word	0x08008ff0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000220 	.word	0x20000220
 80001c4:	08008ff0 	.word	0x08008ff0

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <decoder>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void decoder()
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
	if(coded[0]!='\0')
 80004f6:	4b13      	ldr	r3, [pc, #76]	; (8000544 <decoder+0x54>)
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d003      	beq.n	8000506 <decoder+0x16>
		strcpy(coded_save,coded);
 80004fe:	4911      	ldr	r1, [pc, #68]	; (8000544 <decoder+0x54>)
 8000500:	4811      	ldr	r0, [pc, #68]	; (8000548 <decoder+0x58>)
 8000502:	f008 fd6d 	bl	8008fe0 <strcpy>
	for(int i=0;i<36;i++)
 8000506:	2300      	movs	r3, #0
 8000508:	607b      	str	r3, [r7, #4]
 800050a:	e013      	b.n	8000534 <decoder+0x44>
	{
		if(!strcmp(coded,morscode[i]))
 800050c:	4a0f      	ldr	r2, [pc, #60]	; (800054c <decoder+0x5c>)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000514:	4619      	mov	r1, r3
 8000516:	480b      	ldr	r0, [pc, #44]	; (8000544 <decoder+0x54>)
 8000518:	f7ff fe56 	bl	80001c8 <strcmp>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d105      	bne.n	800052e <decoder+0x3e>
		{
			decoded[0]=symbols[i];
 8000522:	4a0b      	ldr	r2, [pc, #44]	; (8000550 <decoder+0x60>)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800052a:	4a0a      	ldr	r2, [pc, #40]	; (8000554 <decoder+0x64>)
 800052c:	6013      	str	r3, [r2, #0]
	for(int i=0;i<36;i++)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	3301      	adds	r3, #1
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2b23      	cmp	r3, #35	; 0x23
 8000538:	dde8      	ble.n	800050c <decoder+0x1c>
		}
	}
}
 800053a:	bf00      	nop
 800053c:	bf00      	nop
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	200003bc 	.word	0x200003bc
 8000548:	200003c4 	.word	0x200003c4
 800054c:	20000000 	.word	0x20000000
 8000550:	20000090 	.word	0x20000090
 8000554:	200003cc 	.word	0x200003cc

08000558 <mors>:
void mors(uint32_t timer)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	if(timer < 700)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8000566:	d216      	bcs.n	8000596 <mors+0x3e>
	{
		HAL_GPIO_WritePin(GPIOD, LD6_Pin,1);
 8000568:	2201      	movs	r2, #1
 800056a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800056e:	4817      	ldr	r0, [pc, #92]	; (80005cc <mors+0x74>)
 8000570:	f001 f95c 	bl	800182c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, LD5_Pin,0);
 8000574:	2200      	movs	r2, #0
 8000576:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800057a:	4814      	ldr	r0, [pc, #80]	; (80005cc <mors+0x74>)
 800057c:	f001 f956 	bl	800182c <HAL_GPIO_WritePin>
		coded[press]=dot;
 8000580:	4b13      	ldr	r3, [pc, #76]	; (80005d0 <mors+0x78>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a13      	ldr	r2, [pc, #76]	; (80005d4 <mors+0x7c>)
 8000586:	212e      	movs	r1, #46	; 0x2e
 8000588:	54d1      	strb	r1, [r2, r3]
		press++;
 800058a:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <mors+0x78>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	3301      	adds	r3, #1
 8000590:	4a0f      	ldr	r2, [pc, #60]	; (80005d0 <mors+0x78>)
 8000592:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOD, LD6_Pin,0);
		HAL_GPIO_WritePin(GPIOD, LD5_Pin,1);
		coded[press]=dash;
		press++;
	}
}
 8000594:	e015      	b.n	80005c2 <mors+0x6a>
		HAL_GPIO_WritePin(GPIOD, LD6_Pin,0);
 8000596:	2200      	movs	r2, #0
 8000598:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800059c:	480b      	ldr	r0, [pc, #44]	; (80005cc <mors+0x74>)
 800059e:	f001 f945 	bl	800182c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, LD5_Pin,1);
 80005a2:	2201      	movs	r2, #1
 80005a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005a8:	4808      	ldr	r0, [pc, #32]	; (80005cc <mors+0x74>)
 80005aa:	f001 f93f 	bl	800182c <HAL_GPIO_WritePin>
		coded[press]=dash;
 80005ae:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <mors+0x78>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a08      	ldr	r2, [pc, #32]	; (80005d4 <mors+0x7c>)
 80005b4:	215f      	movs	r1, #95	; 0x5f
 80005b6:	54d1      	strb	r1, [r2, r3]
		press++;
 80005b8:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <mors+0x78>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	3301      	adds	r3, #1
 80005be:	4a04      	ldr	r2, [pc, #16]	; (80005d0 <mors+0x78>)
 80005c0:	6013      	str	r3, [r2, #0]
}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40020c00 	.word	0x40020c00
 80005d0:	200003d4 	.word	0x200003d4
 80005d4:	200003bc 	.word	0x200003bc

080005d8 <mors_blink>:
void mors_blink()
{
 80005d8:	b590      	push	{r4, r7, lr}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
	if(done||press==4)
 80005de:	4b3e      	ldr	r3, [pc, #248]	; (80006d8 <mors_blink+0x100>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d103      	bne.n	80005ee <mors_blink+0x16>
 80005e6:	4b3d      	ldr	r3, [pc, #244]	; (80006dc <mors_blink+0x104>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2b04      	cmp	r3, #4
 80005ec:	d170      	bne.n	80006d0 <mors_blink+0xf8>
	{
		if(press==4)
 80005ee:	4b3b      	ldr	r3, [pc, #236]	; (80006dc <mors_blink+0x104>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	2b04      	cmp	r3, #4
 80005f4:	d102      	bne.n	80005fc <mors_blink+0x24>
			done=1;
 80005f6:	4b38      	ldr	r3, [pc, #224]	; (80006d8 <mors_blink+0x100>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	601a      	str	r2, [r3, #0]
		CDC_Transmit_FS((uint8_t*)*decoded, strlen(*decoded));
 80005fc:	4b38      	ldr	r3, [pc, #224]	; (80006e0 <mors_blink+0x108>)
 80005fe:	681c      	ldr	r4, [r3, #0]
 8000600:	4b37      	ldr	r3, [pc, #220]	; (80006e0 <mors_blink+0x108>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4618      	mov	r0, r3
 8000606:	f7ff fde9 	bl	80001dc <strlen>
 800060a:	4603      	mov	r3, r0
 800060c:	b29b      	uxth	r3, r3
 800060e:	4619      	mov	r1, r3
 8000610:	4620      	mov	r0, r4
 8000612:	f008 f84f 	bl	80086b4 <CDC_Transmit_FS>
		press=0;
 8000616:	4b31      	ldr	r3, [pc, #196]	; (80006dc <mors_blink+0x104>)
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
		for(int i=0;i<4;i++)
 800061c:	2300      	movs	r3, #0
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	e007      	b.n	8000632 <mors_blink+0x5a>
			coded[i]='\0';
 8000622:	4a30      	ldr	r2, [pc, #192]	; (80006e4 <mors_blink+0x10c>)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4413      	add	r3, r2
 8000628:	2200      	movs	r2, #0
 800062a:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<4;i++)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	3301      	adds	r3, #1
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2b03      	cmp	r3, #3
 8000636:	ddf4      	ble.n	8000622 <mors_blink+0x4a>
		HAL_GPIO_WritePin(GPIOD, LD5_Pin,0);
 8000638:	2200      	movs	r2, #0
 800063a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800063e:	482a      	ldr	r0, [pc, #168]	; (80006e8 <mors_blink+0x110>)
 8000640:	f001 f8f4 	bl	800182c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, LD6_Pin,0);
 8000644:	2200      	movs	r2, #0
 8000646:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800064a:	4827      	ldr	r0, [pc, #156]	; (80006e8 <mors_blink+0x110>)
 800064c:	f001 f8ee 	bl	800182c <HAL_GPIO_WritePin>
		for(int i=0;i<4;i++)
 8000650:	2300      	movs	r3, #0
 8000652:	603b      	str	r3, [r7, #0]
 8000654:	e035      	b.n	80006c2 <mors_blink+0xea>
		{
			switch(coded_save[i])
 8000656:	4a25      	ldr	r2, [pc, #148]	; (80006ec <mors_blink+0x114>)
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	4413      	add	r3, r2
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	2b2e      	cmp	r3, #46	; 0x2e
 8000660:	d002      	beq.n	8000668 <mors_blink+0x90>
 8000662:	2b5f      	cmp	r3, #95	; 0x5f
 8000664:	d015      	beq.n	8000692 <mors_blink+0xba>
						  HAL_Delay(1500);
					      HAL_GPIO_WritePin(GPIOD, LD3_Pin, 0);
						  HAL_Delay(1500);
						  break;
			  	 default:
			  	  		 break;
 8000666:	e029      	b.n	80006bc <mors_blink+0xe4>
		  	  			HAL_GPIO_WritePin(GPIOD, LD3_Pin, 1);
 8000668:	2201      	movs	r2, #1
 800066a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800066e:	481e      	ldr	r0, [pc, #120]	; (80006e8 <mors_blink+0x110>)
 8000670:	f001 f8dc 	bl	800182c <HAL_GPIO_WritePin>
		  	  			HAL_Delay(500);
 8000674:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000678:	f000 fdbc 	bl	80011f4 <HAL_Delay>
			  	  		HAL_GPIO_WritePin(GPIOD, LD3_Pin, 0);
 800067c:	2200      	movs	r2, #0
 800067e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000682:	4819      	ldr	r0, [pc, #100]	; (80006e8 <mors_blink+0x110>)
 8000684:	f001 f8d2 	bl	800182c <HAL_GPIO_WritePin>
			  	  		HAL_Delay(500);
 8000688:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800068c:	f000 fdb2 	bl	80011f4 <HAL_Delay>
			  	  		break;
 8000690:	e014      	b.n	80006bc <mors_blink+0xe4>
						  HAL_GPIO_WritePin(GPIOD, LD3_Pin, 1);
 8000692:	2201      	movs	r2, #1
 8000694:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000698:	4813      	ldr	r0, [pc, #76]	; (80006e8 <mors_blink+0x110>)
 800069a:	f001 f8c7 	bl	800182c <HAL_GPIO_WritePin>
						  HAL_Delay(1500);
 800069e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80006a2:	f000 fda7 	bl	80011f4 <HAL_Delay>
					      HAL_GPIO_WritePin(GPIOD, LD3_Pin, 0);
 80006a6:	2200      	movs	r2, #0
 80006a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ac:	480e      	ldr	r0, [pc, #56]	; (80006e8 <mors_blink+0x110>)
 80006ae:	f001 f8bd 	bl	800182c <HAL_GPIO_WritePin>
						  HAL_Delay(1500);
 80006b2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80006b6:	f000 fd9d 	bl	80011f4 <HAL_Delay>
						  break;
 80006ba:	bf00      	nop
		for(int i=0;i<4;i++)
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	3301      	adds	r3, #1
 80006c0:	603b      	str	r3, [r7, #0]
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	2b03      	cmp	r3, #3
 80006c6:	ddc6      	ble.n	8000656 <mors_blink+0x7e>
			}
		}
		HAL_Delay(500);
 80006c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006cc:	f000 fd92 	bl	80011f4 <HAL_Delay>
	}
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd90      	pop	{r4, r7, pc}
 80006d8:	200003dc 	.word	0x200003dc
 80006dc:	200003d4 	.word	0x200003d4
 80006e0:	200003cc 	.word	0x200003cc
 80006e4:	200003bc 	.word	0x200003bc
 80006e8:	40020c00 	.word	0x40020c00
 80006ec:	200003c4 	.word	0x200003c4

080006f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	press=0;
 80006f4:	4b0d      	ldr	r3, [pc, #52]	; (800072c <main+0x3c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006fa:	f000 fd09 	bl	8001110 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fe:	f000 f819 	bl	8000734 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000702:	f000 f981 	bl	8000a08 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000706:	f000 f87f 	bl	8000808 <MX_I2C1_Init>
  MX_I2S3_Init();
 800070a:	f000 f8ab 	bl	8000864 <MX_I2S3_Init>
  MX_SPI1_Init();
 800070e:	f000 f8d9 	bl	80008c4 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000712:	f007 ff09 	bl	8008528 <MX_USB_DEVICE_Init>
  MX_TIM6_Init();
 8000716:	f000 f90b 	bl	8000930 <MX_TIM6_Init>
  MX_TIM7_Init();
 800071a:	f000 f93f 	bl	800099c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim7);
 800071e:	4804      	ldr	r0, [pc, #16]	; (8000730 <main+0x40>)
 8000720:	f003 ffb4 	bl	800468c <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mors_blink();
 8000724:	f7ff ff58 	bl	80005d8 <mors_blink>
 8000728:	e7fc      	b.n	8000724 <main+0x34>
 800072a:	bf00      	nop
 800072c:	200003d4 	.word	0x200003d4
 8000730:	20000374 	.word	0x20000374

08000734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b094      	sub	sp, #80	; 0x50
 8000738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073a:	f107 0320 	add.w	r3, r7, #32
 800073e:	2230      	movs	r2, #48	; 0x30
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f008 fc44 	bl	8008fd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000758:	2300      	movs	r3, #0
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	4b28      	ldr	r3, [pc, #160]	; (8000800 <SystemClock_Config+0xcc>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000760:	4a27      	ldr	r2, [pc, #156]	; (8000800 <SystemClock_Config+0xcc>)
 8000762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000766:	6413      	str	r3, [r2, #64]	; 0x40
 8000768:	4b25      	ldr	r3, [pc, #148]	; (8000800 <SystemClock_Config+0xcc>)
 800076a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000774:	2300      	movs	r3, #0
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	4b22      	ldr	r3, [pc, #136]	; (8000804 <SystemClock_Config+0xd0>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a21      	ldr	r2, [pc, #132]	; (8000804 <SystemClock_Config+0xd0>)
 800077e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000782:	6013      	str	r3, [r2, #0]
 8000784:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <SystemClock_Config+0xd0>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000790:	2301      	movs	r3, #1
 8000792:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000794:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079a:	2302      	movs	r3, #2
 800079c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800079e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007a4:	2308      	movs	r3, #8
 80007a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007a8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ae:	2302      	movs	r3, #2
 80007b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007b2:	2307      	movs	r3, #7
 80007b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b6:	f107 0320 	add.w	r3, r7, #32
 80007ba:	4618      	mov	r0, r3
 80007bc:	f003 f8ca 	bl	8003954 <HAL_RCC_OscConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007c6:	f000 fa9f 	bl	8000d08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ca:	230f      	movs	r3, #15
 80007cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ce:	2302      	movs	r3, #2
 80007d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007e2:	f107 030c 	add.w	r3, r7, #12
 80007e6:	2105      	movs	r1, #5
 80007e8:	4618      	mov	r0, r3
 80007ea:	f003 fb2b 	bl	8003e44 <HAL_RCC_ClockConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007f4:	f000 fa88 	bl	8000d08 <Error_Handler>
  }
}
 80007f8:	bf00      	nop
 80007fa:	3750      	adds	r7, #80	; 0x50
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40023800 	.word	0x40023800
 8000804:	40007000 	.word	0x40007000

08000808 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <MX_I2C1_Init+0x50>)
 800080e:	4a13      	ldr	r2, [pc, #76]	; (800085c <MX_I2C1_Init+0x54>)
 8000810:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_I2C1_Init+0x50>)
 8000814:	4a12      	ldr	r2, [pc, #72]	; (8000860 <MX_I2C1_Init+0x58>)
 8000816:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000818:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <MX_I2C1_Init+0x50>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_I2C1_Init+0x50>)
 8000820:	2200      	movs	r2, #0
 8000822:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000824:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <MX_I2C1_Init+0x50>)
 8000826:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800082a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800082c:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <MX_I2C1_Init+0x50>)
 800082e:	2200      	movs	r2, #0
 8000830:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_I2C1_Init+0x50>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000838:	4b07      	ldr	r3, [pc, #28]	; (8000858 <MX_I2C1_Init+0x50>)
 800083a:	2200      	movs	r2, #0
 800083c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_I2C1_Init+0x50>)
 8000840:	2200      	movs	r2, #0
 8000842:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000844:	4804      	ldr	r0, [pc, #16]	; (8000858 <MX_I2C1_Init+0x50>)
 8000846:	f001 f823 	bl	8001890 <HAL_I2C_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000850:	f000 fa5a 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000238 	.word	0x20000238
 800085c:	40005400 	.word	0x40005400
 8000860:	000186a0 	.word	0x000186a0

08000864 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000868:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <MX_I2S3_Init+0x54>)
 800086a:	4a14      	ldr	r2, [pc, #80]	; (80008bc <MX_I2S3_Init+0x58>)
 800086c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800086e:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <MX_I2S3_Init+0x54>)
 8000870:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000874:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000876:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <MX_I2S3_Init+0x54>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800087c:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_I2S3_Init+0x54>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000882:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <MX_I2S3_Init+0x54>)
 8000884:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000888:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <MX_I2S3_Init+0x54>)
 800088c:	4a0c      	ldr	r2, [pc, #48]	; (80008c0 <MX_I2S3_Init+0x5c>)
 800088e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_I2S3_Init+0x54>)
 8000892:	2200      	movs	r2, #0
 8000894:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <MX_I2S3_Init+0x54>)
 8000898:	2200      	movs	r2, #0
 800089a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MX_I2S3_Init+0x54>)
 800089e:	2200      	movs	r2, #0
 80008a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_I2S3_Init+0x54>)
 80008a4:	f001 f938 	bl	8001b18 <HAL_I2S_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80008ae:	f000 fa2b 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	2000028c 	.word	0x2000028c
 80008bc:	40003c00 	.word	0x40003c00
 80008c0:	00017700 	.word	0x00017700

080008c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008c8:	4b17      	ldr	r3, [pc, #92]	; (8000928 <MX_SPI1_Init+0x64>)
 80008ca:	4a18      	ldr	r2, [pc, #96]	; (800092c <MX_SPI1_Init+0x68>)
 80008cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008ce:	4b16      	ldr	r3, [pc, #88]	; (8000928 <MX_SPI1_Init+0x64>)
 80008d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008d6:	4b14      	ldr	r3, [pc, #80]	; (8000928 <MX_SPI1_Init+0x64>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008dc:	4b12      	ldr	r3, [pc, #72]	; (8000928 <MX_SPI1_Init+0x64>)
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008e2:	4b11      	ldr	r3, [pc, #68]	; (8000928 <MX_SPI1_Init+0x64>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <MX_SPI1_Init+0x64>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <MX_SPI1_Init+0x64>)
 80008f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008f6:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <MX_SPI1_Init+0x64>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008fc:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <MX_SPI1_Init+0x64>)
 80008fe:	2200      	movs	r2, #0
 8000900:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000902:	4b09      	ldr	r3, [pc, #36]	; (8000928 <MX_SPI1_Init+0x64>)
 8000904:	2200      	movs	r2, #0
 8000906:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000908:	4b07      	ldr	r3, [pc, #28]	; (8000928 <MX_SPI1_Init+0x64>)
 800090a:	2200      	movs	r2, #0
 800090c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <MX_SPI1_Init+0x64>)
 8000910:	220a      	movs	r2, #10
 8000912:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000914:	4804      	ldr	r0, [pc, #16]	; (8000928 <MX_SPI1_Init+0x64>)
 8000916:	f003 fde1 	bl	80044dc <HAL_SPI_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000920:	f000 f9f2 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	200002d4 	.word	0x200002d4
 800092c:	40013000 	.word	0x40013000

08000930 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000936:	463b      	mov	r3, r7
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800093e:	4b15      	ldr	r3, [pc, #84]	; (8000994 <MX_TIM6_Init+0x64>)
 8000940:	4a15      	ldr	r2, [pc, #84]	; (8000998 <MX_TIM6_Init+0x68>)
 8000942:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 48000;
 8000944:	4b13      	ldr	r3, [pc, #76]	; (8000994 <MX_TIM6_Init+0x64>)
 8000946:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800094a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094c:	4b11      	ldr	r3, [pc, #68]	; (8000994 <MX_TIM6_Init+0x64>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 500;
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <MX_TIM6_Init+0x64>)
 8000954:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000958:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <MX_TIM6_Init+0x64>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000960:	480c      	ldr	r0, [pc, #48]	; (8000994 <MX_TIM6_Init+0x64>)
 8000962:	f003 fe44 	bl	80045ee <HAL_TIM_Base_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800096c:	f000 f9cc 	bl	8000d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000970:	2300      	movs	r3, #0
 8000972:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000974:	2300      	movs	r3, #0
 8000976:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000978:	463b      	mov	r3, r7
 800097a:	4619      	mov	r1, r3
 800097c:	4805      	ldr	r0, [pc, #20]	; (8000994 <MX_TIM6_Init+0x64>)
 800097e:	f004 f92d 	bl	8004bdc <HAL_TIMEx_MasterConfigSynchronization>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000988:	f000 f9be 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	2000032c 	.word	0x2000032c
 8000998:	40001000 	.word	0x40001000

0800099c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a2:	463b      	mov	r3, r7
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80009aa:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <MX_TIM7_Init+0x64>)
 80009ac:	4a15      	ldr	r2, [pc, #84]	; (8000a04 <MX_TIM7_Init+0x68>)
 80009ae:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 47999;
 80009b0:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <MX_TIM7_Init+0x64>)
 80009b2:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 80009b6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b8:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <MX_TIM7_Init+0x64>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 17500;
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <MX_TIM7_Init+0x64>)
 80009c0:	f244 425c 	movw	r2, #17500	; 0x445c
 80009c4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <MX_TIM7_Init+0x64>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80009cc:	480c      	ldr	r0, [pc, #48]	; (8000a00 <MX_TIM7_Init+0x64>)
 80009ce:	f003 fe0e 	bl	80045ee <HAL_TIM_Base_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80009d8:	f000 f996 	bl	8000d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009dc:	2300      	movs	r3, #0
 80009de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e0:	2300      	movs	r3, #0
 80009e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80009e4:	463b      	mov	r3, r7
 80009e6:	4619      	mov	r1, r3
 80009e8:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MX_TIM7_Init+0x64>)
 80009ea:	f004 f8f7 	bl	8004bdc <HAL_TIMEx_MasterConfigSynchronization>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80009f4:	f000 f988 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80009f8:	bf00      	nop
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20000374 	.word	0x20000374
 8000a04:	40001400 	.word	0x40001400

08000a08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08c      	sub	sp, #48	; 0x30
 8000a0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	60da      	str	r2, [r3, #12]
 8000a1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61bb      	str	r3, [r7, #24]
 8000a22:	4b7a      	ldr	r3, [pc, #488]	; (8000c0c <MX_GPIO_Init+0x204>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a79      	ldr	r2, [pc, #484]	; (8000c0c <MX_GPIO_Init+0x204>)
 8000a28:	f043 0310 	orr.w	r3, r3, #16
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b77      	ldr	r3, [pc, #476]	; (8000c0c <MX_GPIO_Init+0x204>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0310 	and.w	r3, r3, #16
 8000a36:	61bb      	str	r3, [r7, #24]
 8000a38:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	617b      	str	r3, [r7, #20]
 8000a3e:	4b73      	ldr	r3, [pc, #460]	; (8000c0c <MX_GPIO_Init+0x204>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a72      	ldr	r2, [pc, #456]	; (8000c0c <MX_GPIO_Init+0x204>)
 8000a44:	f043 0304 	orr.w	r3, r3, #4
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b70      	ldr	r3, [pc, #448]	; (8000c0c <MX_GPIO_Init+0x204>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0304 	and.w	r3, r3, #4
 8000a52:	617b      	str	r3, [r7, #20]
 8000a54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	4b6c      	ldr	r3, [pc, #432]	; (8000c0c <MX_GPIO_Init+0x204>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a6b      	ldr	r2, [pc, #428]	; (8000c0c <MX_GPIO_Init+0x204>)
 8000a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b69      	ldr	r3, [pc, #420]	; (8000c0c <MX_GPIO_Init+0x204>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	4b65      	ldr	r3, [pc, #404]	; (8000c0c <MX_GPIO_Init+0x204>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a64      	ldr	r2, [pc, #400]	; (8000c0c <MX_GPIO_Init+0x204>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b62      	ldr	r3, [pc, #392]	; (8000c0c <MX_GPIO_Init+0x204>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	4b5e      	ldr	r3, [pc, #376]	; (8000c0c <MX_GPIO_Init+0x204>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a5d      	ldr	r2, [pc, #372]	; (8000c0c <MX_GPIO_Init+0x204>)
 8000a98:	f043 0302 	orr.w	r3, r3, #2
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b5b      	ldr	r3, [pc, #364]	; (8000c0c <MX_GPIO_Init+0x204>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0302 	and.w	r3, r3, #2
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	4b57      	ldr	r3, [pc, #348]	; (8000c0c <MX_GPIO_Init+0x204>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a56      	ldr	r2, [pc, #344]	; (8000c0c <MX_GPIO_Init+0x204>)
 8000ab4:	f043 0308 	orr.w	r3, r3, #8
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b54      	ldr	r3, [pc, #336]	; (8000c0c <MX_GPIO_Init+0x204>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0308 	and.w	r3, r3, #8
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2108      	movs	r1, #8
 8000aca:	4851      	ldr	r0, [pc, #324]	; (8000c10 <MX_GPIO_Init+0x208>)
 8000acc:	f000 feae 	bl	800182c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	2101      	movs	r1, #1
 8000ad4:	484f      	ldr	r0, [pc, #316]	; (8000c14 <MX_GPIO_Init+0x20c>)
 8000ad6:	f000 fea9 	bl	800182c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000ada:	2200      	movs	r2, #0
 8000adc:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000ae0:	484d      	ldr	r0, [pc, #308]	; (8000c18 <MX_GPIO_Init+0x210>)
 8000ae2:	f000 fea3 	bl	800182c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000ae6:	2308      	movs	r3, #8
 8000ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000af6:	f107 031c 	add.w	r3, r7, #28
 8000afa:	4619      	mov	r1, r3
 8000afc:	4844      	ldr	r0, [pc, #272]	; (8000c10 <MX_GPIO_Init+0x208>)
 8000afe:	f000 fce1 	bl	80014c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000b02:	2301      	movs	r3, #1
 8000b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b06:	2301      	movs	r3, #1
 8000b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b12:	f107 031c 	add.w	r3, r7, #28
 8000b16:	4619      	mov	r1, r3
 8000b18:	483e      	ldr	r0, [pc, #248]	; (8000c14 <MX_GPIO_Init+0x20c>)
 8000b1a:	f000 fcd3 	bl	80014c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000b1e:	2308      	movs	r3, #8
 8000b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b22:	2302      	movs	r3, #2
 8000b24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b2e:	2305      	movs	r3, #5
 8000b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b32:	f107 031c 	add.w	r3, r7, #28
 8000b36:	4619      	mov	r1, r3
 8000b38:	4836      	ldr	r0, [pc, #216]	; (8000c14 <MX_GPIO_Init+0x20c>)
 8000b3a:	f000 fcc3 	bl	80014c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000b42:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000b46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	f107 031c 	add.w	r3, r7, #28
 8000b50:	4619      	mov	r1, r3
 8000b52:	4832      	ldr	r0, [pc, #200]	; (8000c1c <MX_GPIO_Init+0x214>)
 8000b54:	f000 fcb6 	bl	80014c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000b58:	2304      	movs	r3, #4
 8000b5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000b64:	f107 031c 	add.w	r3, r7, #28
 8000b68:	4619      	mov	r1, r3
 8000b6a:	482d      	ldr	r0, [pc, #180]	; (8000c20 <MX_GPIO_Init+0x218>)
 8000b6c:	f000 fcaa 	bl	80014c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000b70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b82:	2305      	movs	r3, #5
 8000b84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000b86:	f107 031c 	add.w	r3, r7, #28
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4824      	ldr	r0, [pc, #144]	; (8000c20 <MX_GPIO_Init+0x218>)
 8000b8e:	f000 fc99 	bl	80014c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b92:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000b96:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ba4:	f107 031c 	add.w	r3, r7, #28
 8000ba8:	4619      	mov	r1, r3
 8000baa:	481b      	ldr	r0, [pc, #108]	; (8000c18 <MX_GPIO_Init+0x210>)
 8000bac:	f000 fc8a 	bl	80014c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : letterdone_Pin */
  GPIO_InitStruct.Pin = letterdone_Pin;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bb4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(letterdone_GPIO_Port, &GPIO_InitStruct);
 8000bbe:	f107 031c 	add.w	r3, r7, #28
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4814      	ldr	r0, [pc, #80]	; (8000c18 <MX_GPIO_Init+0x210>)
 8000bc6:	f000 fc7d 	bl	80014c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000bca:	2320      	movs	r3, #32
 8000bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bd6:	f107 031c 	add.w	r3, r7, #28
 8000bda:	4619      	mov	r1, r3
 8000bdc:	480e      	ldr	r0, [pc, #56]	; (8000c18 <MX_GPIO_Init+0x210>)
 8000bde:	f000 fc71 	bl	80014c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2100      	movs	r1, #0
 8000be6:	2006      	movs	r0, #6
 8000be8:	f000 fc27 	bl	800143a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000bec:	2006      	movs	r0, #6
 8000bee:	f000 fc40 	bl	8001472 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	2007      	movs	r0, #7
 8000bf8:	f000 fc1f 	bl	800143a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000bfc:	2007      	movs	r0, #7
 8000bfe:	f000 fc38 	bl	8001472 <HAL_NVIC_EnableIRQ>

}
 8000c02:	bf00      	nop
 8000c04:	3730      	adds	r7, #48	; 0x30
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40021000 	.word	0x40021000
 8000c14:	40020800 	.word	0x40020800
 8000c18:	40020c00 	.word	0x40020c00
 8000c1c:	40020000 	.word	0x40020000
 8000c20:	40020400 	.word	0x40020400

08000c24 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start_IT(&htim6);
 8000c2e:	4823      	ldr	r0, [pc, #140]	; (8000cbc <HAL_GPIO_EXTI_Callback+0x98>)
 8000c30:	f003 fd94 	bl	800475c <HAL_TIM_Base_Start_IT>
	if(GPIO_Pin==B1_Pin)
 8000c34:	88fb      	ldrh	r3, [r7, #6]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d134      	bne.n	8000ca4 <HAL_GPIO_EXTI_Callback+0x80>
	{
		if(HAL_GPIO_ReadPin(GPIOA, B1_Pin))
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	4820      	ldr	r0, [pc, #128]	; (8000cc0 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000c3e:	f000 fddd 	bl	80017fc <HAL_GPIO_ReadPin>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d015      	beq.n	8000c74 <HAL_GPIO_EXTI_Callback+0x50>
		{//rising edge
			HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000c48:	2006      	movs	r0, #6
 8000c4a:	f000 fc20 	bl	800148e <HAL_NVIC_DisableIRQ>
			done=0;
 8000c4e:	4b1d      	ldr	r3, [pc, #116]	; (8000cc4 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
			bounce=1;
 8000c54:	4b1c      	ldr	r3, [pc, #112]	; (8000cc8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	601a      	str	r2, [r3, #0]
			TIM7->CNT=0;
 8000c5a:	4b1c      	ldr	r3, [pc, #112]	; (8000ccc <HAL_GPIO_EXTI_Callback+0xa8>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	625a      	str	r2, [r3, #36]	; 0x24
			TIM6->CNT=0;
 8000c60:	4b1b      	ldr	r3, [pc, #108]	; (8000cd0 <HAL_GPIO_EXTI_Callback+0xac>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_GPIO_WritePin(GPIOD, LD4_Pin,1);
 8000c66:	2201      	movs	r2, #1
 8000c68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c6c:	4819      	ldr	r0, [pc, #100]	; (8000cd4 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000c6e:	f000 fddd 	bl	800182c <HAL_GPIO_WritePin>
 8000c72:	e017      	b.n	8000ca4 <HAL_GPIO_EXTI_Callback+0x80>
		}
		else
		{//falling edge
			press_time=TIM7->CNT;
 8000c74:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <HAL_GPIO_EXTI_Callback+0xa8>)
 8000c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c78:	4a17      	ldr	r2, [pc, #92]	; (8000cd8 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000c7a:	6013      	str	r3, [r2, #0]
	        HAL_GPIO_WritePin(GPIOD, LD4_Pin,0);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c82:	4814      	ldr	r0, [pc, #80]	; (8000cd4 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000c84:	f000 fdd2 	bl	800182c <HAL_GPIO_WritePin>
	        if(press<4)
 8000c88:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <HAL_GPIO_EXTI_Callback+0xb8>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b03      	cmp	r3, #3
 8000c8e:	dc04      	bgt.n	8000c9a <HAL_GPIO_EXTI_Callback+0x76>
	        	mors(press_time);
 8000c90:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fc5f 	bl	8000558 <mors>
	        decoder();
 8000c9a:	f7ff fc29 	bl	80004f0 <decoder>
			TIM7->CNT=0;
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <HAL_GPIO_EXTI_Callback+0xa8>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}
	if(GPIO_Pin==letterdone_Pin)
 8000ca4:	88fb      	ldrh	r3, [r7, #6]
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	d104      	bne.n	8000cb4 <HAL_GPIO_EXTI_Callback+0x90>
	{
		done=1;
 8000caa:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	601a      	str	r2, [r3, #0]
		decoder();
 8000cb0:	f7ff fc1e 	bl	80004f0 <decoder>
	}
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	2000032c 	.word	0x2000032c
 8000cc0:	40020000 	.word	0x40020000
 8000cc4:	200003dc 	.word	0x200003dc
 8000cc8:	200003d8 	.word	0x200003d8
 8000ccc:	40001400 	.word	0x40001400
 8000cd0:	40001000 	.word	0x40001000
 8000cd4:	40020c00 	.word	0x40020c00
 8000cd8:	200003d0 	.word	0x200003d0
 8000cdc:	200003d4 	.word	0x200003d4

08000ce0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
	if (bounce)
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d005      	beq.n	8000cfc <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000cf0:	2006      	movs	r0, #6
 8000cf2:	f000 fbbe 	bl	8001472 <HAL_NVIC_EnableIRQ>
		bounce=0;
 8000cf6:	4b03      	ldr	r3, [pc, #12]	; (8000d04 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
	}
}
 8000cfc:	bf00      	nop
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	200003d8 	.word	0x200003d8

08000d08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d0c:	b672      	cpsid	i
}
 8000d0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <Error_Handler+0x8>
	...

08000d14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	607b      	str	r3, [r7, #4]
 8000d1e:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <HAL_MspInit+0x4c>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d22:	4a0f      	ldr	r2, [pc, #60]	; (8000d60 <HAL_MspInit+0x4c>)
 8000d24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d28:	6453      	str	r3, [r2, #68]	; 0x44
 8000d2a:	4b0d      	ldr	r3, [pc, #52]	; (8000d60 <HAL_MspInit+0x4c>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	603b      	str	r3, [r7, #0]
 8000d3a:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <HAL_MspInit+0x4c>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3e:	4a08      	ldr	r2, [pc, #32]	; (8000d60 <HAL_MspInit+0x4c>)
 8000d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d44:	6413      	str	r3, [r2, #64]	; 0x40
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_MspInit+0x4c>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4e:	603b      	str	r3, [r7, #0]
 8000d50:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d52:	2007      	movs	r0, #7
 8000d54:	f000 fb66 	bl	8001424 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40023800 	.word	0x40023800

08000d64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08a      	sub	sp, #40	; 0x28
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a19      	ldr	r2, [pc, #100]	; (8000de8 <HAL_I2C_MspInit+0x84>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d12c      	bne.n	8000de0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
 8000d8a:	4b18      	ldr	r3, [pc, #96]	; (8000dec <HAL_I2C_MspInit+0x88>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	4a17      	ldr	r2, [pc, #92]	; (8000dec <HAL_I2C_MspInit+0x88>)
 8000d90:	f043 0302 	orr.w	r3, r3, #2
 8000d94:	6313      	str	r3, [r2, #48]	; 0x30
 8000d96:	4b15      	ldr	r3, [pc, #84]	; (8000dec <HAL_I2C_MspInit+0x88>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	f003 0302 	and.w	r3, r3, #2
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000da2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000da8:	2312      	movs	r3, #18
 8000daa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dac:	2301      	movs	r3, #1
 8000dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000db4:	2304      	movs	r3, #4
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	480c      	ldr	r0, [pc, #48]	; (8000df0 <HAL_I2C_MspInit+0x8c>)
 8000dc0:	f000 fb80 	bl	80014c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <HAL_I2C_MspInit+0x88>)
 8000dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dcc:	4a07      	ldr	r2, [pc, #28]	; (8000dec <HAL_I2C_MspInit+0x88>)
 8000dce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd4:	4b05      	ldr	r3, [pc, #20]	; (8000dec <HAL_I2C_MspInit+0x88>)
 8000dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000de0:	bf00      	nop
 8000de2:	3728      	adds	r7, #40	; 0x28
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40005400 	.word	0x40005400
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40020400 	.word	0x40020400

08000df4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08e      	sub	sp, #56	; 0x38
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a31      	ldr	r2, [pc, #196]	; (8000ee4 <HAL_I2S_MspInit+0xf0>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d15a      	bne.n	8000eda <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000e24:	2301      	movs	r3, #1
 8000e26:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000e28:	23c0      	movs	r3, #192	; 0xc0
 8000e2a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	4618      	mov	r0, r3
 8000e36:	f003 fa11 	bl	800425c <HAL_RCCEx_PeriphCLKConfig>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000e40:	f7ff ff62 	bl	8000d08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e44:	2300      	movs	r3, #0
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	4b27      	ldr	r3, [pc, #156]	; (8000ee8 <HAL_I2S_MspInit+0xf4>)
 8000e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4c:	4a26      	ldr	r2, [pc, #152]	; (8000ee8 <HAL_I2S_MspInit+0xf4>)
 8000e4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e52:	6413      	str	r3, [r2, #64]	; 0x40
 8000e54:	4b24      	ldr	r3, [pc, #144]	; (8000ee8 <HAL_I2S_MspInit+0xf4>)
 8000e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e60:	2300      	movs	r3, #0
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	4b20      	ldr	r3, [pc, #128]	; (8000ee8 <HAL_I2S_MspInit+0xf4>)
 8000e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e68:	4a1f      	ldr	r2, [pc, #124]	; (8000ee8 <HAL_I2S_MspInit+0xf4>)
 8000e6a:	f043 0301 	orr.w	r3, r3, #1
 8000e6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e70:	4b1d      	ldr	r3, [pc, #116]	; (8000ee8 <HAL_I2S_MspInit+0xf4>)
 8000e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60bb      	str	r3, [r7, #8]
 8000e80:	4b19      	ldr	r3, [pc, #100]	; (8000ee8 <HAL_I2S_MspInit+0xf4>)
 8000e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e84:	4a18      	ldr	r2, [pc, #96]	; (8000ee8 <HAL_I2S_MspInit+0xf4>)
 8000e86:	f043 0304 	orr.w	r3, r3, #4
 8000e8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8c:	4b16      	ldr	r3, [pc, #88]	; (8000ee8 <HAL_I2S_MspInit+0xf4>)
 8000e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e90:	f003 0304 	and.w	r3, r3, #4
 8000e94:	60bb      	str	r3, [r7, #8]
 8000e96:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000e98:	2310      	movs	r3, #16
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ea8:	2306      	movs	r3, #6
 8000eaa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000eac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	480e      	ldr	r0, [pc, #56]	; (8000eec <HAL_I2S_MspInit+0xf8>)
 8000eb4:	f000 fb06 	bl	80014c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000eb8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000eca:	2306      	movs	r3, #6
 8000ecc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ece:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4806      	ldr	r0, [pc, #24]	; (8000ef0 <HAL_I2S_MspInit+0xfc>)
 8000ed6:	f000 faf5 	bl	80014c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000eda:	bf00      	nop
 8000edc:	3738      	adds	r7, #56	; 0x38
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40003c00 	.word	0x40003c00
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	40020000 	.word	0x40020000
 8000ef0:	40020800 	.word	0x40020800

08000ef4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08a      	sub	sp, #40	; 0x28
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a19      	ldr	r2, [pc, #100]	; (8000f78 <HAL_SPI_MspInit+0x84>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d12b      	bne.n	8000f6e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <HAL_SPI_MspInit+0x88>)
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1e:	4a17      	ldr	r2, [pc, #92]	; (8000f7c <HAL_SPI_MspInit+0x88>)
 8000f20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f24:	6453      	str	r3, [r2, #68]	; 0x44
 8000f26:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <HAL_SPI_MspInit+0x88>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <HAL_SPI_MspInit+0x88>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a10      	ldr	r2, [pc, #64]	; (8000f7c <HAL_SPI_MspInit+0x88>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <HAL_SPI_MspInit+0x88>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000f4e:	23e0      	movs	r3, #224	; 0xe0
 8000f50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f52:	2302      	movs	r3, #2
 8000f54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f5e:	2305      	movs	r3, #5
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f62:	f107 0314 	add.w	r3, r7, #20
 8000f66:	4619      	mov	r1, r3
 8000f68:	4805      	ldr	r0, [pc, #20]	; (8000f80 <HAL_SPI_MspInit+0x8c>)
 8000f6a:	f000 faab 	bl	80014c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f6e:	bf00      	nop
 8000f70:	3728      	adds	r7, #40	; 0x28
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40013000 	.word	0x40013000
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40020000 	.word	0x40020000

08000f84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a18      	ldr	r2, [pc, #96]	; (8000ff4 <HAL_TIM_Base_MspInit+0x70>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d116      	bne.n	8000fc4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	4b17      	ldr	r3, [pc, #92]	; (8000ff8 <HAL_TIM_Base_MspInit+0x74>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	4a16      	ldr	r2, [pc, #88]	; (8000ff8 <HAL_TIM_Base_MspInit+0x74>)
 8000fa0:	f043 0310 	orr.w	r3, r3, #16
 8000fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa6:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <HAL_TIM_Base_MspInit+0x74>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	f003 0310 	and.w	r3, r3, #16
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	2036      	movs	r0, #54	; 0x36
 8000fb8:	f000 fa3f 	bl	800143a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000fbc:	2036      	movs	r0, #54	; 0x36
 8000fbe:	f000 fa58 	bl	8001472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000fc2:	e012      	b.n	8000fea <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a0c      	ldr	r2, [pc, #48]	; (8000ffc <HAL_TIM_Base_MspInit+0x78>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d10d      	bne.n	8000fea <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <HAL_TIM_Base_MspInit+0x74>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	4a08      	ldr	r2, [pc, #32]	; (8000ff8 <HAL_TIM_Base_MspInit+0x74>)
 8000fd8:	f043 0320 	orr.w	r3, r3, #32
 8000fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fde:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <HAL_TIM_Base_MspInit+0x74>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	f003 0320 	and.w	r3, r3, #32
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
}
 8000fea:	bf00      	nop
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40001000 	.word	0x40001000
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40001400 	.word	0x40001400

08001000 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001004:	e7fe      	b.n	8001004 <NMI_Handler+0x4>

08001006 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800100a:	e7fe      	b.n	800100a <HardFault_Handler+0x4>

0800100c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001010:	e7fe      	b.n	8001010 <MemManage_Handler+0x4>

08001012 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001016:	e7fe      	b.n	8001016 <BusFault_Handler+0x4>

08001018 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800101c:	e7fe      	b.n	800101c <UsageFault_Handler+0x4>

0800101e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800104c:	f000 f8b2 	bl	80011b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}

08001054 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001058:	2001      	movs	r0, #1
 800105a:	f000 fc01 	bl	8001860 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}

08001062 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(letterdone_Pin);
 8001066:	2002      	movs	r0, #2
 8001068:	f000 fbfa 	bl	8001860 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}

08001070 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001074:	4802      	ldr	r0, [pc, #8]	; (8001080 <TIM6_DAC_IRQHandler+0x10>)
 8001076:	f003 fbe1 	bl	800483c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	2000032c 	.word	0x2000032c

08001084 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001088:	4802      	ldr	r0, [pc, #8]	; (8001094 <OTG_FS_IRQHandler+0x10>)
 800108a:	f001 fb35 	bl	80026f8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200018c8 	.word	0x200018c8

08001098 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <SystemInit+0x20>)
 800109e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010a2:	4a05      	ldr	r2, [pc, #20]	; (80010b8 <SystemInit+0x20>)
 80010a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010c0:	480d      	ldr	r0, [pc, #52]	; (80010f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010c2:	490e      	ldr	r1, [pc, #56]	; (80010fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010c4:	4a0e      	ldr	r2, [pc, #56]	; (8001100 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c8:	e002      	b.n	80010d0 <LoopCopyDataInit>

080010ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ce:	3304      	adds	r3, #4

080010d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d4:	d3f9      	bcc.n	80010ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010d6:	4a0b      	ldr	r2, [pc, #44]	; (8001104 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010d8:	4c0b      	ldr	r4, [pc, #44]	; (8001108 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010dc:	e001      	b.n	80010e2 <LoopFillZerobss>

080010de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e0:	3204      	adds	r2, #4

080010e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e4:	d3fb      	bcc.n	80010de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010e6:	f7ff ffd7 	bl	8001098 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ea:	f007 ff4d 	bl	8008f88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ee:	f7ff faff 	bl	80006f0 <main>
  bx  lr    
 80010f2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010fc:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 8001100:	080091f0 	.word	0x080091f0
  ldr r2, =_sbss
 8001104:	2000021c 	.word	0x2000021c
  ldr r4, =_ebss
 8001108:	20001ff4 	.word	0x20001ff4

0800110c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800110c:	e7fe      	b.n	800110c <ADC_IRQHandler>
	...

08001110 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001114:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <HAL_Init+0x40>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a0d      	ldr	r2, [pc, #52]	; (8001150 <HAL_Init+0x40>)
 800111a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800111e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001120:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <HAL_Init+0x40>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a0a      	ldr	r2, [pc, #40]	; (8001150 <HAL_Init+0x40>)
 8001126:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800112a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800112c:	4b08      	ldr	r3, [pc, #32]	; (8001150 <HAL_Init+0x40>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a07      	ldr	r2, [pc, #28]	; (8001150 <HAL_Init+0x40>)
 8001132:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001136:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001138:	2003      	movs	r0, #3
 800113a:	f000 f973 	bl	8001424 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800113e:	2000      	movs	r0, #0
 8001140:	f000 f808 	bl	8001154 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001144:	f7ff fde6 	bl	8000d14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40023c00 	.word	0x40023c00

08001154 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800115c:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <HAL_InitTick+0x54>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <HAL_InitTick+0x58>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	4619      	mov	r1, r3
 8001166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116a:	fbb3 f3f1 	udiv	r3, r3, r1
 800116e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001172:	4618      	mov	r0, r3
 8001174:	f000 f999 	bl	80014aa <HAL_SYSTICK_Config>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e00e      	b.n	80011a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b0f      	cmp	r3, #15
 8001186:	d80a      	bhi.n	800119e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001188:	2200      	movs	r2, #0
 800118a:	6879      	ldr	r1, [r7, #4]
 800118c:	f04f 30ff 	mov.w	r0, #4294967295
 8001190:	f000 f953 	bl	800143a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001194:	4a06      	ldr	r2, [pc, #24]	; (80011b0 <HAL_InitTick+0x5c>)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800119a:	2300      	movs	r3, #0
 800119c:	e000      	b.n	80011a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000120 	.word	0x20000120
 80011ac:	20000128 	.word	0x20000128
 80011b0:	20000124 	.word	0x20000124

080011b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <HAL_IncTick+0x20>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	461a      	mov	r2, r3
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <HAL_IncTick+0x24>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4413      	add	r3, r2
 80011c4:	4a04      	ldr	r2, [pc, #16]	; (80011d8 <HAL_IncTick+0x24>)
 80011c6:	6013      	str	r3, [r2, #0]
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	20000128 	.word	0x20000128
 80011d8:	200003e0 	.word	0x200003e0

080011dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  return uwTick;
 80011e0:	4b03      	ldr	r3, [pc, #12]	; (80011f0 <HAL_GetTick+0x14>)
 80011e2:	681b      	ldr	r3, [r3, #0]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	200003e0 	.word	0x200003e0

080011f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011fc:	f7ff ffee 	bl	80011dc <HAL_GetTick>
 8001200:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800120c:	d005      	beq.n	800121a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800120e:	4b0a      	ldr	r3, [pc, #40]	; (8001238 <HAL_Delay+0x44>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	461a      	mov	r2, r3
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	4413      	add	r3, r2
 8001218:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800121a:	bf00      	nop
 800121c:	f7ff ffde 	bl	80011dc <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	68fa      	ldr	r2, [r7, #12]
 8001228:	429a      	cmp	r2, r3
 800122a:	d8f7      	bhi.n	800121c <HAL_Delay+0x28>
  {
  }
}
 800122c:	bf00      	nop
 800122e:	bf00      	nop
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000128 	.word	0x20000128

0800123c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <__NVIC_SetPriorityGrouping+0x44>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001252:	68ba      	ldr	r2, [r7, #8]
 8001254:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001258:	4013      	ands	r3, r2
 800125a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001264:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800126c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800126e:	4a04      	ldr	r2, [pc, #16]	; (8001280 <__NVIC_SetPriorityGrouping+0x44>)
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	60d3      	str	r3, [r2, #12]
}
 8001274:	bf00      	nop
 8001276:	3714      	adds	r7, #20
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001288:	4b04      	ldr	r3, [pc, #16]	; (800129c <__NVIC_GetPriorityGrouping+0x18>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	0a1b      	lsrs	r3, r3, #8
 800128e:	f003 0307 	and.w	r3, r3, #7
}
 8001292:	4618      	mov	r0, r3
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	db0b      	blt.n	80012ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	f003 021f 	and.w	r2, r3, #31
 80012b8:	4907      	ldr	r1, [pc, #28]	; (80012d8 <__NVIC_EnableIRQ+0x38>)
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	095b      	lsrs	r3, r3, #5
 80012c0:	2001      	movs	r0, #1
 80012c2:	fa00 f202 	lsl.w	r2, r0, r2
 80012c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	e000e100 	.word	0xe000e100

080012dc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	db12      	blt.n	8001314 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	f003 021f 	and.w	r2, r3, #31
 80012f4:	490a      	ldr	r1, [pc, #40]	; (8001320 <__NVIC_DisableIRQ+0x44>)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	095b      	lsrs	r3, r3, #5
 80012fc:	2001      	movs	r0, #1
 80012fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001302:	3320      	adds	r3, #32
 8001304:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001308:	f3bf 8f4f 	dsb	sy
}
 800130c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800130e:	f3bf 8f6f 	isb	sy
}
 8001312:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000e100 	.word	0xe000e100

08001324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	6039      	str	r1, [r7, #0]
 800132e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001334:	2b00      	cmp	r3, #0
 8001336:	db0a      	blt.n	800134e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	b2da      	uxtb	r2, r3
 800133c:	490c      	ldr	r1, [pc, #48]	; (8001370 <__NVIC_SetPriority+0x4c>)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	0112      	lsls	r2, r2, #4
 8001344:	b2d2      	uxtb	r2, r2
 8001346:	440b      	add	r3, r1
 8001348:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800134c:	e00a      	b.n	8001364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	b2da      	uxtb	r2, r3
 8001352:	4908      	ldr	r1, [pc, #32]	; (8001374 <__NVIC_SetPriority+0x50>)
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	f003 030f 	and.w	r3, r3, #15
 800135a:	3b04      	subs	r3, #4
 800135c:	0112      	lsls	r2, r2, #4
 800135e:	b2d2      	uxtb	r2, r2
 8001360:	440b      	add	r3, r1
 8001362:	761a      	strb	r2, [r3, #24]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	e000e100 	.word	0xe000e100
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001378:	b480      	push	{r7}
 800137a:	b089      	sub	sp, #36	; 0x24
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f1c3 0307 	rsb	r3, r3, #7
 8001392:	2b04      	cmp	r3, #4
 8001394:	bf28      	it	cs
 8001396:	2304      	movcs	r3, #4
 8001398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3304      	adds	r3, #4
 800139e:	2b06      	cmp	r3, #6
 80013a0:	d902      	bls.n	80013a8 <NVIC_EncodePriority+0x30>
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3b03      	subs	r3, #3
 80013a6:	e000      	b.n	80013aa <NVIC_EncodePriority+0x32>
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ac:	f04f 32ff 	mov.w	r2, #4294967295
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43da      	mvns	r2, r3
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	401a      	ands	r2, r3
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c0:	f04f 31ff 	mov.w	r1, #4294967295
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ca:	43d9      	mvns	r1, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d0:	4313      	orrs	r3, r2
         );
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3724      	adds	r7, #36	; 0x24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
	...

080013e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013f0:	d301      	bcc.n	80013f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013f2:	2301      	movs	r3, #1
 80013f4:	e00f      	b.n	8001416 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013f6:	4a0a      	ldr	r2, [pc, #40]	; (8001420 <SysTick_Config+0x40>)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013fe:	210f      	movs	r1, #15
 8001400:	f04f 30ff 	mov.w	r0, #4294967295
 8001404:	f7ff ff8e 	bl	8001324 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001408:	4b05      	ldr	r3, [pc, #20]	; (8001420 <SysTick_Config+0x40>)
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800140e:	4b04      	ldr	r3, [pc, #16]	; (8001420 <SysTick_Config+0x40>)
 8001410:	2207      	movs	r2, #7
 8001412:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	e000e010 	.word	0xe000e010

08001424 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7ff ff05 	bl	800123c <__NVIC_SetPriorityGrouping>
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800143a:	b580      	push	{r7, lr}
 800143c:	b086      	sub	sp, #24
 800143e:	af00      	add	r7, sp, #0
 8001440:	4603      	mov	r3, r0
 8001442:	60b9      	str	r1, [r7, #8]
 8001444:	607a      	str	r2, [r7, #4]
 8001446:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800144c:	f7ff ff1a 	bl	8001284 <__NVIC_GetPriorityGrouping>
 8001450:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	68b9      	ldr	r1, [r7, #8]
 8001456:	6978      	ldr	r0, [r7, #20]
 8001458:	f7ff ff8e 	bl	8001378 <NVIC_EncodePriority>
 800145c:	4602      	mov	r2, r0
 800145e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001462:	4611      	mov	r1, r2
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ff5d 	bl	8001324 <__NVIC_SetPriority>
}
 800146a:	bf00      	nop
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b082      	sub	sp, #8
 8001476:	af00      	add	r7, sp, #0
 8001478:	4603      	mov	r3, r0
 800147a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800147c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff0d 	bl	80012a0 <__NVIC_EnableIRQ>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	4603      	mov	r3, r0
 8001496:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff ff1d 	bl	80012dc <__NVIC_DisableIRQ>
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff ff94 	bl	80013e0 <SysTick_Config>
 80014b8:	4603      	mov	r3, r0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b089      	sub	sp, #36	; 0x24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014ce:	2300      	movs	r3, #0
 80014d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014da:	2300      	movs	r3, #0
 80014dc:	61fb      	str	r3, [r7, #28]
 80014de:	e16b      	b.n	80017b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014e0:	2201      	movs	r2, #1
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	697a      	ldr	r2, [r7, #20]
 80014f0:	4013      	ands	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	f040 815a 	bne.w	80017b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f003 0303 	and.w	r3, r3, #3
 8001506:	2b01      	cmp	r3, #1
 8001508:	d005      	beq.n	8001516 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001512:	2b02      	cmp	r3, #2
 8001514:	d130      	bne.n	8001578 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	2203      	movs	r2, #3
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43db      	mvns	r3, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4013      	ands	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	68da      	ldr	r2, [r3, #12]
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	4313      	orrs	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800154c:	2201      	movs	r2, #1
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	43db      	mvns	r3, r3
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	4013      	ands	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	091b      	lsrs	r3, r3, #4
 8001562:	f003 0201 	and.w	r2, r3, #1
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	4313      	orrs	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f003 0303 	and.w	r3, r3, #3
 8001580:	2b03      	cmp	r3, #3
 8001582:	d017      	beq.n	80015b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	2203      	movs	r2, #3
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4013      	ands	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 0303 	and.w	r3, r3, #3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d123      	bne.n	8001608 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	08da      	lsrs	r2, r3, #3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3208      	adds	r2, #8
 80015c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	f003 0307 	and.w	r3, r3, #7
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	220f      	movs	r2, #15
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4013      	ands	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	691a      	ldr	r2, [r3, #16]
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	08da      	lsrs	r2, r3, #3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3208      	adds	r2, #8
 8001602:	69b9      	ldr	r1, [r7, #24]
 8001604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	2203      	movs	r2, #3
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f003 0203 	and.w	r2, r3, #3
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	4313      	orrs	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001644:	2b00      	cmp	r3, #0
 8001646:	f000 80b4 	beq.w	80017b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	4b60      	ldr	r3, [pc, #384]	; (80017d0 <HAL_GPIO_Init+0x30c>)
 8001650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001652:	4a5f      	ldr	r2, [pc, #380]	; (80017d0 <HAL_GPIO_Init+0x30c>)
 8001654:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001658:	6453      	str	r3, [r2, #68]	; 0x44
 800165a:	4b5d      	ldr	r3, [pc, #372]	; (80017d0 <HAL_GPIO_Init+0x30c>)
 800165c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001666:	4a5b      	ldr	r2, [pc, #364]	; (80017d4 <HAL_GPIO_Init+0x310>)
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	089b      	lsrs	r3, r3, #2
 800166c:	3302      	adds	r3, #2
 800166e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001672:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f003 0303 	and.w	r3, r3, #3
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	220f      	movs	r2, #15
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	43db      	mvns	r3, r3
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	4013      	ands	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a52      	ldr	r2, [pc, #328]	; (80017d8 <HAL_GPIO_Init+0x314>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d02b      	beq.n	80016ea <HAL_GPIO_Init+0x226>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a51      	ldr	r2, [pc, #324]	; (80017dc <HAL_GPIO_Init+0x318>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d025      	beq.n	80016e6 <HAL_GPIO_Init+0x222>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a50      	ldr	r2, [pc, #320]	; (80017e0 <HAL_GPIO_Init+0x31c>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d01f      	beq.n	80016e2 <HAL_GPIO_Init+0x21e>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a4f      	ldr	r2, [pc, #316]	; (80017e4 <HAL_GPIO_Init+0x320>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d019      	beq.n	80016de <HAL_GPIO_Init+0x21a>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a4e      	ldr	r2, [pc, #312]	; (80017e8 <HAL_GPIO_Init+0x324>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d013      	beq.n	80016da <HAL_GPIO_Init+0x216>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a4d      	ldr	r2, [pc, #308]	; (80017ec <HAL_GPIO_Init+0x328>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d00d      	beq.n	80016d6 <HAL_GPIO_Init+0x212>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a4c      	ldr	r2, [pc, #304]	; (80017f0 <HAL_GPIO_Init+0x32c>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d007      	beq.n	80016d2 <HAL_GPIO_Init+0x20e>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a4b      	ldr	r2, [pc, #300]	; (80017f4 <HAL_GPIO_Init+0x330>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d101      	bne.n	80016ce <HAL_GPIO_Init+0x20a>
 80016ca:	2307      	movs	r3, #7
 80016cc:	e00e      	b.n	80016ec <HAL_GPIO_Init+0x228>
 80016ce:	2308      	movs	r3, #8
 80016d0:	e00c      	b.n	80016ec <HAL_GPIO_Init+0x228>
 80016d2:	2306      	movs	r3, #6
 80016d4:	e00a      	b.n	80016ec <HAL_GPIO_Init+0x228>
 80016d6:	2305      	movs	r3, #5
 80016d8:	e008      	b.n	80016ec <HAL_GPIO_Init+0x228>
 80016da:	2304      	movs	r3, #4
 80016dc:	e006      	b.n	80016ec <HAL_GPIO_Init+0x228>
 80016de:	2303      	movs	r3, #3
 80016e0:	e004      	b.n	80016ec <HAL_GPIO_Init+0x228>
 80016e2:	2302      	movs	r3, #2
 80016e4:	e002      	b.n	80016ec <HAL_GPIO_Init+0x228>
 80016e6:	2301      	movs	r3, #1
 80016e8:	e000      	b.n	80016ec <HAL_GPIO_Init+0x228>
 80016ea:	2300      	movs	r3, #0
 80016ec:	69fa      	ldr	r2, [r7, #28]
 80016ee:	f002 0203 	and.w	r2, r2, #3
 80016f2:	0092      	lsls	r2, r2, #2
 80016f4:	4093      	lsls	r3, r2
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016fc:	4935      	ldr	r1, [pc, #212]	; (80017d4 <HAL_GPIO_Init+0x310>)
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	089b      	lsrs	r3, r3, #2
 8001702:	3302      	adds	r3, #2
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800170a:	4b3b      	ldr	r3, [pc, #236]	; (80017f8 <HAL_GPIO_Init+0x334>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	43db      	mvns	r3, r3
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4013      	ands	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	4313      	orrs	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800172e:	4a32      	ldr	r2, [pc, #200]	; (80017f8 <HAL_GPIO_Init+0x334>)
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001734:	4b30      	ldr	r3, [pc, #192]	; (80017f8 <HAL_GPIO_Init+0x334>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	43db      	mvns	r3, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4013      	ands	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d003      	beq.n	8001758 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	4313      	orrs	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001758:	4a27      	ldr	r2, [pc, #156]	; (80017f8 <HAL_GPIO_Init+0x334>)
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800175e:	4b26      	ldr	r3, [pc, #152]	; (80017f8 <HAL_GPIO_Init+0x334>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	43db      	mvns	r3, r3
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4013      	ands	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	4313      	orrs	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001782:	4a1d      	ldr	r2, [pc, #116]	; (80017f8 <HAL_GPIO_Init+0x334>)
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001788:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <HAL_GPIO_Init+0x334>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	43db      	mvns	r3, r3
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4013      	ands	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d003      	beq.n	80017ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017ac:	4a12      	ldr	r2, [pc, #72]	; (80017f8 <HAL_GPIO_Init+0x334>)
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	3301      	adds	r3, #1
 80017b6:	61fb      	str	r3, [r7, #28]
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	2b0f      	cmp	r3, #15
 80017bc:	f67f ae90 	bls.w	80014e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017c0:	bf00      	nop
 80017c2:	bf00      	nop
 80017c4:	3724      	adds	r7, #36	; 0x24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40013800 	.word	0x40013800
 80017d8:	40020000 	.word	0x40020000
 80017dc:	40020400 	.word	0x40020400
 80017e0:	40020800 	.word	0x40020800
 80017e4:	40020c00 	.word	0x40020c00
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40021400 	.word	0x40021400
 80017f0:	40021800 	.word	0x40021800
 80017f4:	40021c00 	.word	0x40021c00
 80017f8:	40013c00 	.word	0x40013c00

080017fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	460b      	mov	r3, r1
 8001806:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	691a      	ldr	r2, [r3, #16]
 800180c:	887b      	ldrh	r3, [r7, #2]
 800180e:	4013      	ands	r3, r2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d002      	beq.n	800181a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001814:	2301      	movs	r3, #1
 8001816:	73fb      	strb	r3, [r7, #15]
 8001818:	e001      	b.n	800181e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800181a:	2300      	movs	r3, #0
 800181c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800181e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001820:	4618      	mov	r0, r3
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	460b      	mov	r3, r1
 8001836:	807b      	strh	r3, [r7, #2]
 8001838:	4613      	mov	r3, r2
 800183a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800183c:	787b      	ldrb	r3, [r7, #1]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d003      	beq.n	800184a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001842:	887a      	ldrh	r2, [r7, #2]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001848:	e003      	b.n	8001852 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800184a:	887b      	ldrh	r3, [r7, #2]
 800184c:	041a      	lsls	r2, r3, #16
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	619a      	str	r2, [r3, #24]
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
	...

08001860 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800186a:	4b08      	ldr	r3, [pc, #32]	; (800188c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800186c:	695a      	ldr	r2, [r3, #20]
 800186e:	88fb      	ldrh	r3, [r7, #6]
 8001870:	4013      	ands	r3, r2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d006      	beq.n	8001884 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001876:	4a05      	ldr	r2, [pc, #20]	; (800188c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800187c:	88fb      	ldrh	r3, [r7, #6]
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff f9d0 	bl	8000c24 <HAL_GPIO_EXTI_Callback>
  }
}
 8001884:	bf00      	nop
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40013c00 	.word	0x40013c00

08001890 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e12b      	b.n	8001afa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d106      	bne.n	80018bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7ff fa54 	bl	8000d64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2224      	movs	r2, #36	; 0x24
 80018c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f022 0201 	bic.w	r2, r2, #1
 80018d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018f4:	f002 fc9e 	bl	8004234 <HAL_RCC_GetPCLK1Freq>
 80018f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	4a81      	ldr	r2, [pc, #516]	; (8001b04 <HAL_I2C_Init+0x274>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d807      	bhi.n	8001914 <HAL_I2C_Init+0x84>
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4a80      	ldr	r2, [pc, #512]	; (8001b08 <HAL_I2C_Init+0x278>)
 8001908:	4293      	cmp	r3, r2
 800190a:	bf94      	ite	ls
 800190c:	2301      	movls	r3, #1
 800190e:	2300      	movhi	r3, #0
 8001910:	b2db      	uxtb	r3, r3
 8001912:	e006      	b.n	8001922 <HAL_I2C_Init+0x92>
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4a7d      	ldr	r2, [pc, #500]	; (8001b0c <HAL_I2C_Init+0x27c>)
 8001918:	4293      	cmp	r3, r2
 800191a:	bf94      	ite	ls
 800191c:	2301      	movls	r3, #1
 800191e:	2300      	movhi	r3, #0
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e0e7      	b.n	8001afa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	4a78      	ldr	r2, [pc, #480]	; (8001b10 <HAL_I2C_Init+0x280>)
 800192e:	fba2 2303 	umull	r2, r3, r2, r3
 8001932:	0c9b      	lsrs	r3, r3, #18
 8001934:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	68ba      	ldr	r2, [r7, #8]
 8001946:	430a      	orrs	r2, r1
 8001948:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	6a1b      	ldr	r3, [r3, #32]
 8001950:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	4a6a      	ldr	r2, [pc, #424]	; (8001b04 <HAL_I2C_Init+0x274>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d802      	bhi.n	8001964 <HAL_I2C_Init+0xd4>
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	3301      	adds	r3, #1
 8001962:	e009      	b.n	8001978 <HAL_I2C_Init+0xe8>
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800196a:	fb02 f303 	mul.w	r3, r2, r3
 800196e:	4a69      	ldr	r2, [pc, #420]	; (8001b14 <HAL_I2C_Init+0x284>)
 8001970:	fba2 2303 	umull	r2, r3, r2, r3
 8001974:	099b      	lsrs	r3, r3, #6
 8001976:	3301      	adds	r3, #1
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	6812      	ldr	r2, [r2, #0]
 800197c:	430b      	orrs	r3, r1
 800197e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800198a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	495c      	ldr	r1, [pc, #368]	; (8001b04 <HAL_I2C_Init+0x274>)
 8001994:	428b      	cmp	r3, r1
 8001996:	d819      	bhi.n	80019cc <HAL_I2C_Init+0x13c>
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	1e59      	subs	r1, r3, #1
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80019a6:	1c59      	adds	r1, r3, #1
 80019a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80019ac:	400b      	ands	r3, r1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d00a      	beq.n	80019c8 <HAL_I2C_Init+0x138>
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	1e59      	subs	r1, r3, #1
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80019c0:	3301      	adds	r3, #1
 80019c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019c6:	e051      	b.n	8001a6c <HAL_I2C_Init+0x1dc>
 80019c8:	2304      	movs	r3, #4
 80019ca:	e04f      	b.n	8001a6c <HAL_I2C_Init+0x1dc>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d111      	bne.n	80019f8 <HAL_I2C_Init+0x168>
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	1e58      	subs	r0, r3, #1
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6859      	ldr	r1, [r3, #4]
 80019dc:	460b      	mov	r3, r1
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	440b      	add	r3, r1
 80019e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80019e6:	3301      	adds	r3, #1
 80019e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	bf0c      	ite	eq
 80019f0:	2301      	moveq	r3, #1
 80019f2:	2300      	movne	r3, #0
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	e012      	b.n	8001a1e <HAL_I2C_Init+0x18e>
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	1e58      	subs	r0, r3, #1
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6859      	ldr	r1, [r3, #4]
 8001a00:	460b      	mov	r3, r1
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	440b      	add	r3, r1
 8001a06:	0099      	lsls	r1, r3, #2
 8001a08:	440b      	add	r3, r1
 8001a0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a0e:	3301      	adds	r3, #1
 8001a10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	bf0c      	ite	eq
 8001a18:	2301      	moveq	r3, #1
 8001a1a:	2300      	movne	r3, #0
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <HAL_I2C_Init+0x196>
 8001a22:	2301      	movs	r3, #1
 8001a24:	e022      	b.n	8001a6c <HAL_I2C_Init+0x1dc>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10e      	bne.n	8001a4c <HAL_I2C_Init+0x1bc>
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	1e58      	subs	r0, r3, #1
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6859      	ldr	r1, [r3, #4]
 8001a36:	460b      	mov	r3, r1
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	440b      	add	r3, r1
 8001a3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a40:	3301      	adds	r3, #1
 8001a42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a4a:	e00f      	b.n	8001a6c <HAL_I2C_Init+0x1dc>
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	1e58      	subs	r0, r3, #1
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6859      	ldr	r1, [r3, #4]
 8001a54:	460b      	mov	r3, r1
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	440b      	add	r3, r1
 8001a5a:	0099      	lsls	r1, r3, #2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a62:	3301      	adds	r3, #1
 8001a64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a6c:	6879      	ldr	r1, [r7, #4]
 8001a6e:	6809      	ldr	r1, [r1, #0]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	69da      	ldr	r2, [r3, #28]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a1b      	ldr	r3, [r3, #32]
 8001a86:	431a      	orrs	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	6911      	ldr	r1, [r2, #16]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	68d2      	ldr	r2, [r2, #12]
 8001aa6:	4311      	orrs	r1, r2
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	6812      	ldr	r2, [r2, #0]
 8001aac:	430b      	orrs	r3, r1
 8001aae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	695a      	ldr	r2, [r3, #20]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f042 0201 	orr.w	r2, r2, #1
 8001ada:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2220      	movs	r2, #32
 8001ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	000186a0 	.word	0x000186a0
 8001b08:	001e847f 	.word	0x001e847f
 8001b0c:	003d08ff 	.word	0x003d08ff
 8001b10:	431bde83 	.word	0x431bde83
 8001b14:	10624dd3 	.word	0x10624dd3

08001b18 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b088      	sub	sp, #32
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e128      	b.n	8001d7c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d109      	bne.n	8001b4a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a90      	ldr	r2, [pc, #576]	; (8001d84 <HAL_I2S_Init+0x26c>)
 8001b42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7ff f955 	bl	8000df4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	69db      	ldr	r3, [r3, #28]
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	6812      	ldr	r2, [r2, #0]
 8001b5c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001b60:	f023 030f 	bic.w	r3, r3, #15
 8001b64:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d060      	beq.n	8001c38 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d102      	bne.n	8001b84 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001b7e:	2310      	movs	r3, #16
 8001b80:	617b      	str	r3, [r7, #20]
 8001b82:	e001      	b.n	8001b88 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001b84:	2320      	movs	r3, #32
 8001b86:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	2b20      	cmp	r3, #32
 8001b8e:	d802      	bhi.n	8001b96 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001b96:	2001      	movs	r0, #1
 8001b98:	f002 fc42 	bl	8004420 <HAL_RCCEx_GetPeriphCLKFreq>
 8001b9c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ba6:	d125      	bne.n	8001bf4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d010      	beq.n	8001bd2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bba:	4613      	mov	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	695b      	ldr	r3, [r3, #20]
 8001bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bcc:	3305      	adds	r3, #5
 8001bce:	613b      	str	r3, [r7, #16]
 8001bd0:	e01f      	b.n	8001c12 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bdc:	4613      	mov	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4413      	add	r3, r2
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	461a      	mov	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bee:	3305      	adds	r3, #5
 8001bf0:	613b      	str	r3, [r7, #16]
 8001bf2:	e00e      	b.n	8001c12 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	461a      	mov	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0e:	3305      	adds	r3, #5
 8001c10:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	4a5c      	ldr	r2, [pc, #368]	; (8001d88 <HAL_I2S_Init+0x270>)
 8001c16:	fba2 2303 	umull	r2, r3, r2, r3
 8001c1a:	08db      	lsrs	r3, r3, #3
 8001c1c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	085b      	lsrs	r3, r3, #1
 8001c2e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	021b      	lsls	r3, r3, #8
 8001c34:	61bb      	str	r3, [r7, #24]
 8001c36:	e003      	b.n	8001c40 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d902      	bls.n	8001c4c <HAL_I2S_Init+0x134>
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	2bff      	cmp	r3, #255	; 0xff
 8001c4a:	d907      	bls.n	8001c5c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c50:	f043 0210 	orr.w	r2, r3, #16
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e08f      	b.n	8001d7c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	691a      	ldr	r2, [r3, #16]
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	ea42 0103 	orr.w	r1, r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	69fa      	ldr	r2, [r7, #28]
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001c7a:	f023 030f 	bic.w	r3, r3, #15
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	6851      	ldr	r1, [r2, #4]
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	6892      	ldr	r2, [r2, #8]
 8001c86:	4311      	orrs	r1, r2
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	68d2      	ldr	r2, [r2, #12]
 8001c8c:	4311      	orrs	r1, r2
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	6992      	ldr	r2, [r2, #24]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	431a      	orrs	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c9e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d161      	bne.n	8001d6c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a38      	ldr	r2, [pc, #224]	; (8001d8c <HAL_I2S_Init+0x274>)
 8001cac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a37      	ldr	r2, [pc, #220]	; (8001d90 <HAL_I2S_Init+0x278>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d101      	bne.n	8001cbc <HAL_I2S_Init+0x1a4>
 8001cb8:	4b36      	ldr	r3, [pc, #216]	; (8001d94 <HAL_I2S_Init+0x27c>)
 8001cba:	e001      	b.n	8001cc0 <HAL_I2S_Init+0x1a8>
 8001cbc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	6812      	ldr	r2, [r2, #0]
 8001cc6:	4932      	ldr	r1, [pc, #200]	; (8001d90 <HAL_I2S_Init+0x278>)
 8001cc8:	428a      	cmp	r2, r1
 8001cca:	d101      	bne.n	8001cd0 <HAL_I2S_Init+0x1b8>
 8001ccc:	4a31      	ldr	r2, [pc, #196]	; (8001d94 <HAL_I2S_Init+0x27c>)
 8001cce:	e001      	b.n	8001cd4 <HAL_I2S_Init+0x1bc>
 8001cd0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001cd4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001cd8:	f023 030f 	bic.w	r3, r3, #15
 8001cdc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a2b      	ldr	r2, [pc, #172]	; (8001d90 <HAL_I2S_Init+0x278>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d101      	bne.n	8001cec <HAL_I2S_Init+0x1d4>
 8001ce8:	4b2a      	ldr	r3, [pc, #168]	; (8001d94 <HAL_I2S_Init+0x27c>)
 8001cea:	e001      	b.n	8001cf0 <HAL_I2S_Init+0x1d8>
 8001cec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cf0:	2202      	movs	r2, #2
 8001cf2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a25      	ldr	r2, [pc, #148]	; (8001d90 <HAL_I2S_Init+0x278>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d101      	bne.n	8001d02 <HAL_I2S_Init+0x1ea>
 8001cfe:	4b25      	ldr	r3, [pc, #148]	; (8001d94 <HAL_I2S_Init+0x27c>)
 8001d00:	e001      	b.n	8001d06 <HAL_I2S_Init+0x1ee>
 8001d02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d06:	69db      	ldr	r3, [r3, #28]
 8001d08:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d12:	d003      	beq.n	8001d1c <HAL_I2S_Init+0x204>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d103      	bne.n	8001d24 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001d1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d20:	613b      	str	r3, [r7, #16]
 8001d22:	e001      	b.n	8001d28 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001d24:	2300      	movs	r3, #0
 8001d26:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001d32:	4313      	orrs	r3, r2
 8001d34:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001d46:	4313      	orrs	r3, r2
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	897b      	ldrh	r3, [r7, #10]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d54:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a0d      	ldr	r2, [pc, #52]	; (8001d90 <HAL_I2S_Init+0x278>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d101      	bne.n	8001d64 <HAL_I2S_Init+0x24c>
 8001d60:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <HAL_I2S_Init+0x27c>)
 8001d62:	e001      	b.n	8001d68 <HAL_I2S_Init+0x250>
 8001d64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d68:	897a      	ldrh	r2, [r7, #10]
 8001d6a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2201      	movs	r2, #1
 8001d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3720      	adds	r7, #32
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	08001e8f 	.word	0x08001e8f
 8001d88:	cccccccd 	.word	0xcccccccd
 8001d8c:	08001fa5 	.word	0x08001fa5
 8001d90:	40003800 	.word	0x40003800
 8001d94:	40003400 	.word	0x40003400

08001d98 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de0:	881a      	ldrh	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dec:	1c9a      	adds	r2, r3, #2
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d10e      	bne.n	8001e28 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	685a      	ldr	r2, [r3, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e18:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7ff ffb8 	bl	8001d98 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001e28:	bf00      	nop
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68da      	ldr	r2, [r3, #12]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e42:	b292      	uxth	r2, r2
 8001e44:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4a:	1c9a      	adds	r2, r3, #2
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	3b01      	subs	r3, #1
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d10e      	bne.n	8001e86 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	685a      	ldr	r2, [r3, #4]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e76:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff ff93 	bl	8001dac <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001e86:	bf00      	nop
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b086      	sub	sp, #24
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b04      	cmp	r3, #4
 8001ea8:	d13a      	bne.n	8001f20 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d109      	bne.n	8001ec8 <I2S_IRQHandler+0x3a>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ebe:	2b40      	cmp	r3, #64	; 0x40
 8001ec0:	d102      	bne.n	8001ec8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff ffb4 	bl	8001e30 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ece:	2b40      	cmp	r3, #64	; 0x40
 8001ed0:	d126      	bne.n	8001f20 <I2S_IRQHandler+0x92>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 0320 	and.w	r3, r3, #32
 8001edc:	2b20      	cmp	r3, #32
 8001ede:	d11f      	bne.n	8001f20 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001eee:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	613b      	str	r3, [r7, #16]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	613b      	str	r3, [r7, #16]
 8001f04:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f12:	f043 0202 	orr.w	r2, r3, #2
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7ff ff50 	bl	8001dc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b03      	cmp	r3, #3
 8001f2a:	d136      	bne.n	8001f9a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d109      	bne.n	8001f4a <I2S_IRQHandler+0xbc>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f40:	2b80      	cmp	r3, #128	; 0x80
 8001f42:	d102      	bne.n	8001f4a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff ff45 	bl	8001dd4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	f003 0308 	and.w	r3, r3, #8
 8001f50:	2b08      	cmp	r3, #8
 8001f52:	d122      	bne.n	8001f9a <I2S_IRQHandler+0x10c>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f003 0320 	and.w	r3, r3, #32
 8001f5e:	2b20      	cmp	r3, #32
 8001f60:	d11b      	bne.n	8001f9a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	685a      	ldr	r2, [r3, #4]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f70:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001f72:	2300      	movs	r3, #0
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8c:	f043 0204 	orr.w	r2, r3, #4
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f7ff ff13 	bl	8001dc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001f9a:	bf00      	nop
 8001f9c:	3718      	adds	r7, #24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
	...

08001fa4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b088      	sub	sp, #32
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a92      	ldr	r2, [pc, #584]	; (8002204 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d101      	bne.n	8001fc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001fbe:	4b92      	ldr	r3, [pc, #584]	; (8002208 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001fc0:	e001      	b.n	8001fc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001fc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a8b      	ldr	r2, [pc, #556]	; (8002204 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d101      	bne.n	8001fe0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001fdc:	4b8a      	ldr	r3, [pc, #552]	; (8002208 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001fde:	e001      	b.n	8001fe4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001fe0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ff0:	d004      	beq.n	8001ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f040 8099 	bne.w	800212e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b02      	cmp	r3, #2
 8002004:	d107      	bne.n	8002016 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800200c:	2b00      	cmp	r3, #0
 800200e:	d002      	beq.n	8002016 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 f925 	bl	8002260 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b01      	cmp	r3, #1
 800201e:	d107      	bne.n	8002030 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002026:	2b00      	cmp	r3, #0
 8002028:	d002      	beq.n	8002030 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f9c8 	bl	80023c0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002036:	2b40      	cmp	r3, #64	; 0x40
 8002038:	d13a      	bne.n	80020b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	f003 0320 	and.w	r3, r3, #32
 8002040:	2b00      	cmp	r3, #0
 8002042:	d035      	beq.n	80020b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a6e      	ldr	r2, [pc, #440]	; (8002204 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d101      	bne.n	8002052 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800204e:	4b6e      	ldr	r3, [pc, #440]	; (8002208 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002050:	e001      	b.n	8002056 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002052:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4969      	ldr	r1, [pc, #420]	; (8002204 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800205e:	428b      	cmp	r3, r1
 8002060:	d101      	bne.n	8002066 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002062:	4b69      	ldr	r3, [pc, #420]	; (8002208 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002064:	e001      	b.n	800206a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002066:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800206a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800206e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800207e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002080:	2300      	movs	r3, #0
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2201      	movs	r2, #1
 800209a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a2:	f043 0202 	orr.w	r2, r3, #2
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7ff fe88 	bl	8001dc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	f003 0308 	and.w	r3, r3, #8
 80020b6:	2b08      	cmp	r3, #8
 80020b8:	f040 80c3 	bne.w	8002242 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	f003 0320 	and.w	r3, r3, #32
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 80bd 	beq.w	8002242 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80020d6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a49      	ldr	r2, [pc, #292]	; (8002204 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d101      	bne.n	80020e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80020e2:	4b49      	ldr	r3, [pc, #292]	; (8002208 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80020e4:	e001      	b.n	80020ea <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80020e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4944      	ldr	r1, [pc, #272]	; (8002204 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80020f2:	428b      	cmp	r3, r1
 80020f4:	d101      	bne.n	80020fa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80020f6:	4b44      	ldr	r3, [pc, #272]	; (8002208 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80020f8:	e001      	b.n	80020fe <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80020fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002102:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002104:	2300      	movs	r3, #0
 8002106:	60bb      	str	r3, [r7, #8]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211e:	f043 0204 	orr.w	r2, r3, #4
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff fe4a 	bl	8001dc0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800212c:	e089      	b.n	8002242 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b02      	cmp	r3, #2
 8002136:	d107      	bne.n	8002148 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800213e:	2b00      	cmp	r3, #0
 8002140:	d002      	beq.n	8002148 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f8be 	bl	80022c4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b01      	cmp	r3, #1
 8002150:	d107      	bne.n	8002162 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002158:	2b00      	cmp	r3, #0
 800215a:	d002      	beq.n	8002162 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 f8fd 	bl	800235c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002168:	2b40      	cmp	r3, #64	; 0x40
 800216a:	d12f      	bne.n	80021cc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	f003 0320 	and.w	r3, r3, #32
 8002172:	2b00      	cmp	r3, #0
 8002174:	d02a      	beq.n	80021cc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002184:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a1e      	ldr	r2, [pc, #120]	; (8002204 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d101      	bne.n	8002194 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002190:	4b1d      	ldr	r3, [pc, #116]	; (8002208 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002192:	e001      	b.n	8002198 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002194:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4919      	ldr	r1, [pc, #100]	; (8002204 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80021a0:	428b      	cmp	r3, r1
 80021a2:	d101      	bne.n	80021a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80021a4:	4b18      	ldr	r3, [pc, #96]	; (8002208 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80021a6:	e001      	b.n	80021ac <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80021a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80021b0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021be:	f043 0202 	orr.w	r2, r3, #2
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f7ff fdfa 	bl	8001dc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	f003 0308 	and.w	r3, r3, #8
 80021d2:	2b08      	cmp	r3, #8
 80021d4:	d136      	bne.n	8002244 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	f003 0320 	and.w	r3, r3, #32
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d031      	beq.n	8002244 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a07      	ldr	r2, [pc, #28]	; (8002204 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d101      	bne.n	80021ee <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80021ea:	4b07      	ldr	r3, [pc, #28]	; (8002208 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80021ec:	e001      	b.n	80021f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80021ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4902      	ldr	r1, [pc, #8]	; (8002204 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80021fa:	428b      	cmp	r3, r1
 80021fc:	d106      	bne.n	800220c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80021fe:	4b02      	ldr	r3, [pc, #8]	; (8002208 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002200:	e006      	b.n	8002210 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002202:	bf00      	nop
 8002204:	40003800 	.word	0x40003800
 8002208:	40003400 	.word	0x40003400
 800220c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002210:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002214:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002224:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2201      	movs	r2, #1
 800222a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002232:	f043 0204 	orr.w	r2, r3, #4
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7ff fdc0 	bl	8001dc0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002240:	e000      	b.n	8002244 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002242:	bf00      	nop
}
 8002244:	bf00      	nop
 8002246:	3720      	adds	r7, #32
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226c:	1c99      	adds	r1, r3, #2
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	6251      	str	r1, [r2, #36]	; 0x24
 8002272:	881a      	ldrh	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800227e:	b29b      	uxth	r3, r3
 8002280:	3b01      	subs	r3, #1
 8002282:	b29a      	uxth	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800228c:	b29b      	uxth	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d113      	bne.n	80022ba <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80022a0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d106      	bne.n	80022ba <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f7ff ffc9 	bl	800224c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
	...

080022c4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d0:	1c99      	adds	r1, r3, #2
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	6251      	str	r1, [r2, #36]	; 0x24
 80022d6:	8819      	ldrh	r1, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a1d      	ldr	r2, [pc, #116]	; (8002354 <I2SEx_TxISR_I2SExt+0x90>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d101      	bne.n	80022e6 <I2SEx_TxISR_I2SExt+0x22>
 80022e2:	4b1d      	ldr	r3, [pc, #116]	; (8002358 <I2SEx_TxISR_I2SExt+0x94>)
 80022e4:	e001      	b.n	80022ea <I2SEx_TxISR_I2SExt+0x26>
 80022e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022ea:	460a      	mov	r2, r1
 80022ec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	3b01      	subs	r3, #1
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002300:	b29b      	uxth	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d121      	bne.n	800234a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a12      	ldr	r2, [pc, #72]	; (8002354 <I2SEx_TxISR_I2SExt+0x90>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d101      	bne.n	8002314 <I2SEx_TxISR_I2SExt+0x50>
 8002310:	4b11      	ldr	r3, [pc, #68]	; (8002358 <I2SEx_TxISR_I2SExt+0x94>)
 8002312:	e001      	b.n	8002318 <I2SEx_TxISR_I2SExt+0x54>
 8002314:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002318:	685a      	ldr	r2, [r3, #4]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	490d      	ldr	r1, [pc, #52]	; (8002354 <I2SEx_TxISR_I2SExt+0x90>)
 8002320:	428b      	cmp	r3, r1
 8002322:	d101      	bne.n	8002328 <I2SEx_TxISR_I2SExt+0x64>
 8002324:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <I2SEx_TxISR_I2SExt+0x94>)
 8002326:	e001      	b.n	800232c <I2SEx_TxISR_I2SExt+0x68>
 8002328:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800232c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002330:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002336:	b29b      	uxth	r3, r3
 8002338:	2b00      	cmp	r3, #0
 800233a:	d106      	bne.n	800234a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f7ff ff81 	bl	800224c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800234a:	bf00      	nop
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40003800 	.word	0x40003800
 8002358:	40003400 	.word	0x40003400

0800235c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68d8      	ldr	r0, [r3, #12]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236e:	1c99      	adds	r1, r3, #2
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002374:	b282      	uxth	r2, r0
 8002376:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800237c:	b29b      	uxth	r3, r3
 800237e:	3b01      	subs	r3, #1
 8002380:	b29a      	uxth	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800238a:	b29b      	uxth	r3, r3
 800238c:	2b00      	cmp	r3, #0
 800238e:	d113      	bne.n	80023b8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	685a      	ldr	r2, [r3, #4]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800239e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d106      	bne.n	80023b8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7ff ff4a 	bl	800224c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80023b8:	bf00      	nop
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a20      	ldr	r2, [pc, #128]	; (8002450 <I2SEx_RxISR_I2SExt+0x90>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d101      	bne.n	80023d6 <I2SEx_RxISR_I2SExt+0x16>
 80023d2:	4b20      	ldr	r3, [pc, #128]	; (8002454 <I2SEx_RxISR_I2SExt+0x94>)
 80023d4:	e001      	b.n	80023da <I2SEx_RxISR_I2SExt+0x1a>
 80023d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023da:	68d8      	ldr	r0, [r3, #12]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e0:	1c99      	adds	r1, r3, #2
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80023e6:	b282      	uxth	r2, r0
 80023e8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	3b01      	subs	r3, #1
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d121      	bne.n	8002446 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a12      	ldr	r2, [pc, #72]	; (8002450 <I2SEx_RxISR_I2SExt+0x90>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d101      	bne.n	8002410 <I2SEx_RxISR_I2SExt+0x50>
 800240c:	4b11      	ldr	r3, [pc, #68]	; (8002454 <I2SEx_RxISR_I2SExt+0x94>)
 800240e:	e001      	b.n	8002414 <I2SEx_RxISR_I2SExt+0x54>
 8002410:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	490d      	ldr	r1, [pc, #52]	; (8002450 <I2SEx_RxISR_I2SExt+0x90>)
 800241c:	428b      	cmp	r3, r1
 800241e:	d101      	bne.n	8002424 <I2SEx_RxISR_I2SExt+0x64>
 8002420:	4b0c      	ldr	r3, [pc, #48]	; (8002454 <I2SEx_RxISR_I2SExt+0x94>)
 8002422:	e001      	b.n	8002428 <I2SEx_RxISR_I2SExt+0x68>
 8002424:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002428:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800242c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002432:	b29b      	uxth	r3, r3
 8002434:	2b00      	cmp	r3, #0
 8002436:	d106      	bne.n	8002446 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f7ff ff03 	bl	800224c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002446:	bf00      	nop
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40003800 	.word	0x40003800
 8002454:	40003400 	.word	0x40003400

08002458 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800245a:	b08f      	sub	sp, #60	; 0x3c
 800245c:	af0a      	add	r7, sp, #40	; 0x28
 800245e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e10f      	b.n	800268a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	d106      	bne.n	800248a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f006 fa5d 	bl	8008944 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2203      	movs	r2, #3
 800248e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800249a:	2b00      	cmp	r3, #0
 800249c:	d102      	bne.n	80024a4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f002 fd3c 	bl	8004f26 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	603b      	str	r3, [r7, #0]
 80024b4:	687e      	ldr	r6, [r7, #4]
 80024b6:	466d      	mov	r5, sp
 80024b8:	f106 0410 	add.w	r4, r6, #16
 80024bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80024cc:	1d33      	adds	r3, r6, #4
 80024ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024d0:	6838      	ldr	r0, [r7, #0]
 80024d2:	f002 fc13 	bl	8004cfc <USB_CoreInit>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d005      	beq.n	80024e8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2202      	movs	r2, #2
 80024e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e0d0      	b.n	800268a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2100      	movs	r1, #0
 80024ee:	4618      	mov	r0, r3
 80024f0:	f002 fd2a 	bl	8004f48 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024f4:	2300      	movs	r3, #0
 80024f6:	73fb      	strb	r3, [r7, #15]
 80024f8:	e04a      	b.n	8002590 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024fa:	7bfa      	ldrb	r2, [r7, #15]
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	4613      	mov	r3, r2
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	4413      	add	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	440b      	add	r3, r1
 8002508:	333d      	adds	r3, #61	; 0x3d
 800250a:	2201      	movs	r2, #1
 800250c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800250e:	7bfa      	ldrb	r2, [r7, #15]
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	4413      	add	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	440b      	add	r3, r1
 800251c:	333c      	adds	r3, #60	; 0x3c
 800251e:	7bfa      	ldrb	r2, [r7, #15]
 8002520:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002522:	7bfa      	ldrb	r2, [r7, #15]
 8002524:	7bfb      	ldrb	r3, [r7, #15]
 8002526:	b298      	uxth	r0, r3
 8002528:	6879      	ldr	r1, [r7, #4]
 800252a:	4613      	mov	r3, r2
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	4413      	add	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	440b      	add	r3, r1
 8002534:	3344      	adds	r3, #68	; 0x44
 8002536:	4602      	mov	r2, r0
 8002538:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800253a:	7bfa      	ldrb	r2, [r7, #15]
 800253c:	6879      	ldr	r1, [r7, #4]
 800253e:	4613      	mov	r3, r2
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	4413      	add	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	440b      	add	r3, r1
 8002548:	3340      	adds	r3, #64	; 0x40
 800254a:	2200      	movs	r2, #0
 800254c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800254e:	7bfa      	ldrb	r2, [r7, #15]
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	4613      	mov	r3, r2
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	4413      	add	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	440b      	add	r3, r1
 800255c:	3348      	adds	r3, #72	; 0x48
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002562:	7bfa      	ldrb	r2, [r7, #15]
 8002564:	6879      	ldr	r1, [r7, #4]
 8002566:	4613      	mov	r3, r2
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	4413      	add	r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	440b      	add	r3, r1
 8002570:	334c      	adds	r3, #76	; 0x4c
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002576:	7bfa      	ldrb	r2, [r7, #15]
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	4413      	add	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	440b      	add	r3, r1
 8002584:	3354      	adds	r3, #84	; 0x54
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800258a:	7bfb      	ldrb	r3, [r7, #15]
 800258c:	3301      	adds	r3, #1
 800258e:	73fb      	strb	r3, [r7, #15]
 8002590:	7bfa      	ldrb	r2, [r7, #15]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	429a      	cmp	r2, r3
 8002598:	d3af      	bcc.n	80024fa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800259a:	2300      	movs	r3, #0
 800259c:	73fb      	strb	r3, [r7, #15]
 800259e:	e044      	b.n	800262a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025a0:	7bfa      	ldrb	r2, [r7, #15]
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	4413      	add	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80025b2:	2200      	movs	r2, #0
 80025b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80025b6:	7bfa      	ldrb	r2, [r7, #15]
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	4413      	add	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80025c8:	7bfa      	ldrb	r2, [r7, #15]
 80025ca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025cc:	7bfa      	ldrb	r2, [r7, #15]
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	4613      	mov	r3, r2
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	4413      	add	r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80025de:	2200      	movs	r2, #0
 80025e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025e2:	7bfa      	ldrb	r2, [r7, #15]
 80025e4:	6879      	ldr	r1, [r7, #4]
 80025e6:	4613      	mov	r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	4413      	add	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	440b      	add	r3, r1
 80025f0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025f8:	7bfa      	ldrb	r2, [r7, #15]
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	4413      	add	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	440b      	add	r3, r1
 8002606:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800260a:	2200      	movs	r2, #0
 800260c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800260e:	7bfa      	ldrb	r2, [r7, #15]
 8002610:	6879      	ldr	r1, [r7, #4]
 8002612:	4613      	mov	r3, r2
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	4413      	add	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	440b      	add	r3, r1
 800261c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002624:	7bfb      	ldrb	r3, [r7, #15]
 8002626:	3301      	adds	r3, #1
 8002628:	73fb      	strb	r3, [r7, #15]
 800262a:	7bfa      	ldrb	r2, [r7, #15]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	429a      	cmp	r2, r3
 8002632:	d3b5      	bcc.n	80025a0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	603b      	str	r3, [r7, #0]
 800263a:	687e      	ldr	r6, [r7, #4]
 800263c:	466d      	mov	r5, sp
 800263e:	f106 0410 	add.w	r4, r6, #16
 8002642:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002644:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002646:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002648:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800264a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800264e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002652:	1d33      	adds	r3, r6, #4
 8002654:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002656:	6838      	ldr	r0, [r7, #0]
 8002658:	f002 fcc2 	bl	8004fe0 <USB_DevInit>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d005      	beq.n	800266e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2202      	movs	r2, #2
 8002666:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e00d      	b.n	800268a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f003 fe11 	bl	80062aa <USB_DevDisconnect>

  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3714      	adds	r7, #20
 800268e:	46bd      	mov	sp, r7
 8002690:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002692 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b084      	sub	sp, #16
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d101      	bne.n	80026ae <HAL_PCD_Start+0x1c>
 80026aa:	2302      	movs	r3, #2
 80026ac:	e020      	b.n	80026f0 <HAL_PCD_Start+0x5e>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d109      	bne.n	80026d2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d005      	beq.n	80026d2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f002 fc14 	bl	8004f04 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f003 fdc1 	bl	8006268 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80026f8:	b590      	push	{r4, r7, lr}
 80026fa:	b08d      	sub	sp, #52	; 0x34
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002706:	6a3b      	ldr	r3, [r7, #32]
 8002708:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f003 fe7f 	bl	8006412 <USB_GetMode>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	f040 848a 	bne.w	8003030 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4618      	mov	r0, r3
 8002722:	f003 fde3 	bl	80062ec <USB_ReadInterrupts>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 8480 	beq.w	800302e <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	0a1b      	lsrs	r3, r3, #8
 8002738:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f003 fdd0 	bl	80062ec <USB_ReadInterrupts>
 800274c:	4603      	mov	r3, r0
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b02      	cmp	r3, #2
 8002754:	d107      	bne.n	8002766 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	695a      	ldr	r2, [r3, #20]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f002 0202 	and.w	r2, r2, #2
 8002764:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f003 fdbe 	bl	80062ec <USB_ReadInterrupts>
 8002770:	4603      	mov	r3, r0
 8002772:	f003 0310 	and.w	r3, r3, #16
 8002776:	2b10      	cmp	r3, #16
 8002778:	d161      	bne.n	800283e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	699a      	ldr	r2, [r3, #24]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 0210 	bic.w	r2, r2, #16
 8002788:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800278a:	6a3b      	ldr	r3, [r7, #32]
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	f003 020f 	and.w	r2, r3, #15
 8002796:	4613      	mov	r3, r2
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	4413      	add	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	4413      	add	r3, r2
 80027a6:	3304      	adds	r3, #4
 80027a8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	0c5b      	lsrs	r3, r3, #17
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d124      	bne.n	8002800 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80027bc:	4013      	ands	r3, r2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d035      	beq.n	800282e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	091b      	lsrs	r3, r3, #4
 80027ca:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	461a      	mov	r2, r3
 80027d4:	6a38      	ldr	r0, [r7, #32]
 80027d6:	f003 fbf5 	bl	8005fc4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	691a      	ldr	r2, [r3, #16]
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	091b      	lsrs	r3, r3, #4
 80027e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027e6:	441a      	add	r2, r3
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	6a1a      	ldr	r2, [r3, #32]
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	091b      	lsrs	r3, r3, #4
 80027f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027f8:	441a      	add	r2, r3
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	621a      	str	r2, [r3, #32]
 80027fe:	e016      	b.n	800282e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	0c5b      	lsrs	r3, r3, #17
 8002804:	f003 030f 	and.w	r3, r3, #15
 8002808:	2b06      	cmp	r3, #6
 800280a:	d110      	bne.n	800282e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002812:	2208      	movs	r2, #8
 8002814:	4619      	mov	r1, r3
 8002816:	6a38      	ldr	r0, [r7, #32]
 8002818:	f003 fbd4 	bl	8005fc4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	6a1a      	ldr	r2, [r3, #32]
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	091b      	lsrs	r3, r3, #4
 8002824:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002828:	441a      	add	r2, r3
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	699a      	ldr	r2, [r3, #24]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f042 0210 	orr.w	r2, r2, #16
 800283c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f003 fd52 	bl	80062ec <USB_ReadInterrupts>
 8002848:	4603      	mov	r3, r0
 800284a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800284e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002852:	f040 80a7 	bne.w	80029a4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002856:	2300      	movs	r3, #0
 8002858:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f003 fd57 	bl	8006312 <USB_ReadDevAllOutEpInterrupt>
 8002864:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002866:	e099      	b.n	800299c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	f000 808e 	beq.w	8002990 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	4611      	mov	r1, r2
 800287e:	4618      	mov	r0, r3
 8002880:	f003 fd7b 	bl	800637a <USB_ReadDevOutEPInterrupt>
 8002884:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00c      	beq.n	80028aa <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	015a      	lsls	r2, r3, #5
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	4413      	add	r3, r2
 8002898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800289c:	461a      	mov	r2, r3
 800289e:	2301      	movs	r3, #1
 80028a0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80028a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 fec3 	bl	8003630 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	f003 0308 	and.w	r3, r3, #8
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00c      	beq.n	80028ce <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80028b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b6:	015a      	lsls	r2, r3, #5
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	4413      	add	r3, r2
 80028bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028c0:	461a      	mov	r2, r3
 80028c2:	2308      	movs	r3, #8
 80028c4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80028c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 ff99 	bl	8003800 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	f003 0310 	and.w	r3, r3, #16
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d008      	beq.n	80028ea <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	015a      	lsls	r2, r3, #5
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	4413      	add	r3, r2
 80028e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028e4:	461a      	mov	r2, r3
 80028e6:	2310      	movs	r3, #16
 80028e8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d030      	beq.n	8002956 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80028f4:	6a3b      	ldr	r3, [r7, #32]
 80028f6:	695b      	ldr	r3, [r3, #20]
 80028f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028fc:	2b80      	cmp	r3, #128	; 0x80
 80028fe:	d109      	bne.n	8002914 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	69fa      	ldr	r2, [r7, #28]
 800290a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800290e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002912:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002916:	4613      	mov	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	4413      	add	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	4413      	add	r3, r2
 8002926:	3304      	adds	r3, #4
 8002928:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	78db      	ldrb	r3, [r3, #3]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d108      	bne.n	8002944 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	2200      	movs	r2, #0
 8002936:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	b2db      	uxtb	r3, r3
 800293c:	4619      	mov	r1, r3
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f006 f914 	bl	8008b6c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002946:	015a      	lsls	r2, r3, #5
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	4413      	add	r3, r2
 800294c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002950:	461a      	mov	r2, r3
 8002952:	2302      	movs	r3, #2
 8002954:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	f003 0320 	and.w	r3, r3, #32
 800295c:	2b00      	cmp	r3, #0
 800295e:	d008      	beq.n	8002972 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	015a      	lsls	r2, r3, #5
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	4413      	add	r3, r2
 8002968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800296c:	461a      	mov	r2, r3
 800296e:	2320      	movs	r3, #32
 8002970:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d009      	beq.n	8002990 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	015a      	lsls	r2, r3, #5
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	4413      	add	r3, r2
 8002984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002988:	461a      	mov	r2, r3
 800298a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800298e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	3301      	adds	r3, #1
 8002994:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002998:	085b      	lsrs	r3, r3, #1
 800299a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800299c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f47f af62 	bne.w	8002868 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f003 fc9f 	bl	80062ec <USB_ReadInterrupts>
 80029ae:	4603      	mov	r3, r0
 80029b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80029b8:	f040 80db 	bne.w	8002b72 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f003 fcc0 	bl	8006346 <USB_ReadDevAllInEpInterrupt>
 80029c6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80029cc:	e0cd      	b.n	8002b6a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80029ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 80c2 	beq.w	8002b5e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029e0:	b2d2      	uxtb	r2, r2
 80029e2:	4611      	mov	r1, r2
 80029e4:	4618      	mov	r0, r3
 80029e6:	f003 fce6 	bl	80063b6 <USB_ReadDevInEPInterrupt>
 80029ea:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d057      	beq.n	8002aa6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	f003 030f 	and.w	r3, r3, #15
 80029fc:	2201      	movs	r2, #1
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	69f9      	ldr	r1, [r7, #28]
 8002a12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002a16:	4013      	ands	r3, r2
 8002a18:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1c:	015a      	lsls	r2, r3, #5
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	4413      	add	r3, r2
 8002a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a26:	461a      	mov	r2, r3
 8002a28:	2301      	movs	r3, #1
 8002a2a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d132      	bne.n	8002a9a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a38:	4613      	mov	r3, r2
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	440b      	add	r3, r1
 8002a42:	334c      	adds	r3, #76	; 0x4c
 8002a44:	6819      	ldr	r1, [r3, #0]
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	4413      	add	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4403      	add	r3, r0
 8002a54:	3348      	adds	r3, #72	; 0x48
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4419      	add	r1, r3
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a5e:	4613      	mov	r3, r2
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	4413      	add	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4403      	add	r3, r0
 8002a68:	334c      	adds	r3, #76	; 0x4c
 8002a6a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d113      	bne.n	8002a9a <HAL_PCD_IRQHandler+0x3a2>
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a76:	4613      	mov	r3, r2
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	4413      	add	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	440b      	add	r3, r1
 8002a80:	3354      	adds	r3, #84	; 0x54
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d108      	bne.n	8002a9a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6818      	ldr	r0, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a92:	461a      	mov	r2, r3
 8002a94:	2101      	movs	r1, #1
 8002a96:	f003 fced 	bl	8006474 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f005 ffde 	bl	8008a62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	f003 0308 	and.w	r3, r3, #8
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d008      	beq.n	8002ac2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab2:	015a      	lsls	r2, r3, #5
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002abc:	461a      	mov	r2, r3
 8002abe:	2308      	movs	r3, #8
 8002ac0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	f003 0310 	and.w	r3, r3, #16
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d008      	beq.n	8002ade <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ace:	015a      	lsls	r2, r3, #5
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ad8:	461a      	mov	r2, r3
 8002ada:	2310      	movs	r3, #16
 8002adc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d008      	beq.n	8002afa <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aea:	015a      	lsls	r2, r3, #5
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	4413      	add	r3, r2
 8002af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002af4:	461a      	mov	r2, r3
 8002af6:	2340      	movs	r3, #64	; 0x40
 8002af8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d023      	beq.n	8002b4c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002b04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b06:	6a38      	ldr	r0, [r7, #32]
 8002b08:	f002 fbce 	bl	80052a8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b0e:	4613      	mov	r3, r2
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	4413      	add	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	3338      	adds	r3, #56	; 0x38
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	78db      	ldrb	r3, [r3, #3]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d108      	bne.n	8002b3a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	4619      	mov	r1, r3
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f006 f82b 	bl	8008b90 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	015a      	lsls	r2, r3, #5
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	4413      	add	r3, r2
 8002b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b46:	461a      	mov	r2, r3
 8002b48:	2302      	movs	r3, #2
 8002b4a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d003      	beq.n	8002b5e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002b56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 fcdb 	bl	8003514 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	3301      	adds	r3, #1
 8002b62:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b66:	085b      	lsrs	r3, r3, #1
 8002b68:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f47f af2e 	bne.w	80029ce <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f003 fbb8 	bl	80062ec <USB_ReadInterrupts>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b86:	d122      	bne.n	8002bce <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	69fa      	ldr	r2, [r7, #28]
 8002b92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b96:	f023 0301 	bic.w	r3, r3, #1
 8002b9a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d108      	bne.n	8002bb8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002bae:	2100      	movs	r1, #0
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 fec3 	bl	800393c <HAL_PCDEx_LPM_Callback>
 8002bb6:	e002      	b.n	8002bbe <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f005 ffc9 	bl	8008b50 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	695a      	ldr	r2, [r3, #20]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002bcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f003 fb8a 	bl	80062ec <USB_ReadInterrupts>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002be2:	d112      	bne.n	8002c0a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d102      	bne.n	8002bfa <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f005 ff85 	bl	8008b04 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	695a      	ldr	r2, [r3, #20]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002c08:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f003 fb6c 	bl	80062ec <USB_ReadInterrupts>
 8002c14:	4603      	mov	r3, r0
 8002c16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c1e:	f040 80b7 	bne.w	8002d90 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	69fa      	ldr	r2, [r7, #28]
 8002c2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c30:	f023 0301 	bic.w	r3, r3, #1
 8002c34:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2110      	movs	r1, #16
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f002 fb33 	bl	80052a8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c42:	2300      	movs	r3, #0
 8002c44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c46:	e046      	b.n	8002cd6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c4a:	015a      	lsls	r2, r3, #5
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	4413      	add	r3, r2
 8002c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c54:	461a      	mov	r2, r3
 8002c56:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002c5a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c5e:	015a      	lsls	r2, r3, #5
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	4413      	add	r3, r2
 8002c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c6c:	0151      	lsls	r1, r2, #5
 8002c6e:	69fa      	ldr	r2, [r7, #28]
 8002c70:	440a      	add	r2, r1
 8002c72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c7a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c7e:	015a      	lsls	r2, r3, #5
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	4413      	add	r3, r2
 8002c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c88:	461a      	mov	r2, r3
 8002c8a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002c8e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c92:	015a      	lsls	r2, r3, #5
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	4413      	add	r3, r2
 8002c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ca0:	0151      	lsls	r1, r2, #5
 8002ca2:	69fa      	ldr	r2, [r7, #28]
 8002ca4:	440a      	add	r2, r1
 8002ca6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002caa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002cae:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb2:	015a      	lsls	r2, r3, #5
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cc0:	0151      	lsls	r1, r2, #5
 8002cc2:	69fa      	ldr	r2, [r7, #28]
 8002cc4:	440a      	add	r2, r1
 8002cc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002cca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002cce:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d3b3      	bcc.n	8002c48 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ce6:	69db      	ldr	r3, [r3, #28]
 8002ce8:	69fa      	ldr	r2, [r7, #28]
 8002cea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cee:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002cf2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d016      	beq.n	8002d2a <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d06:	69fa      	ldr	r2, [r7, #28]
 8002d08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d0c:	f043 030b 	orr.w	r3, r3, #11
 8002d10:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1c:	69fa      	ldr	r2, [r7, #28]
 8002d1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d22:	f043 030b 	orr.w	r3, r3, #11
 8002d26:	6453      	str	r3, [r2, #68]	; 0x44
 8002d28:	e015      	b.n	8002d56 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	69fa      	ldr	r2, [r7, #28]
 8002d34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d38:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d3c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002d40:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	69fa      	ldr	r2, [r7, #28]
 8002d4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d50:	f043 030b 	orr.w	r3, r3, #11
 8002d54:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	69fa      	ldr	r2, [r7, #28]
 8002d60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d64:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002d68:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6818      	ldr	r0, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	f003 fb7a 	bl	8006474 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	695a      	ldr	r2, [r3, #20]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002d8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f003 faa9 	bl	80062ec <USB_ReadInterrupts>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002da0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002da4:	d124      	bne.n	8002df0 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f003 fb3f 	bl	800642e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f002 faf4 	bl	80053a2 <USB_GetDevSpeed>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681c      	ldr	r4, [r3, #0]
 8002dc6:	f001 fa29 	bl	800421c <HAL_RCC_GetHCLKFreq>
 8002dca:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	4620      	mov	r0, r4
 8002dd6:	f001 fff3 	bl	8004dc0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f005 fe69 	bl	8008ab2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	695a      	ldr	r2, [r3, #20]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002dee:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f003 fa79 	bl	80062ec <USB_ReadInterrupts>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	f003 0308 	and.w	r3, r3, #8
 8002e00:	2b08      	cmp	r3, #8
 8002e02:	d10a      	bne.n	8002e1a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f005 fe46 	bl	8008a96 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	695a      	ldr	r2, [r3, #20]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f002 0208 	and.w	r2, r2, #8
 8002e18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f003 fa64 	bl	80062ec <USB_ReadInterrupts>
 8002e24:	4603      	mov	r3, r0
 8002e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e2a:	2b80      	cmp	r3, #128	; 0x80
 8002e2c:	d122      	bne.n	8002e74 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e36:	6a3b      	ldr	r3, [r7, #32]
 8002e38:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e3e:	e014      	b.n	8002e6a <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002e40:	6879      	ldr	r1, [r7, #4]
 8002e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e44:	4613      	mov	r3, r2
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	4413      	add	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	440b      	add	r3, r1
 8002e4e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d105      	bne.n	8002e64 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 fb27 	bl	80034b2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e66:	3301      	adds	r3, #1
 8002e68:	627b      	str	r3, [r7, #36]	; 0x24
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d3e5      	bcc.n	8002e40 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f003 fa37 	bl	80062ec <USB_ReadInterrupts>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e88:	d13b      	bne.n	8002f02 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e8e:	e02b      	b.n	8002ee8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e92:	015a      	lsls	r2, r3, #5
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	4413      	add	r3, r2
 8002e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	4413      	add	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	3340      	adds	r3, #64	; 0x40
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d115      	bne.n	8002ee2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002eb6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	da12      	bge.n	8002ee2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002ebc:	6879      	ldr	r1, [r7, #4]
 8002ebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	4413      	add	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	333f      	adds	r3, #63	; 0x3f
 8002ecc:	2201      	movs	r2, #1
 8002ece:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	4619      	mov	r1, r3
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 fae8 	bl	80034b2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d3ce      	bcc.n	8002e90 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	695a      	ldr	r2, [r3, #20]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002f00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f003 f9f0 	bl	80062ec <USB_ReadInterrupts>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f16:	d155      	bne.n	8002fc4 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f18:	2301      	movs	r3, #1
 8002f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f1c:	e045      	b.n	8002faa <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f20:	015a      	lsls	r2, r3, #5
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	4413      	add	r3, r2
 8002f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f32:	4613      	mov	r3, r2
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	4413      	add	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	440b      	add	r3, r1
 8002f3c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d12e      	bne.n	8002fa4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f46:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	da2b      	bge.n	8002fa4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002f58:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d121      	bne.n	8002fa4 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002f60:	6879      	ldr	r1, [r7, #4]
 8002f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f64:	4613      	mov	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	4413      	add	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002f72:	2201      	movs	r2, #1
 8002f74:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002f76:	6a3b      	ldr	r3, [r7, #32]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002f7e:	6a3b      	ldr	r3, [r7, #32]
 8002f80:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002f82:	6a3b      	ldr	r3, [r7, #32]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10a      	bne.n	8002fa4 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	69fa      	ldr	r2, [r7, #28]
 8002f98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fa0:	6053      	str	r3, [r2, #4]
            break;
 8002fa2:	e007      	b.n	8002fb4 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d3b4      	bcc.n	8002f1e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	695a      	ldr	r2, [r3, #20]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002fc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f003 f98f 	bl	80062ec <USB_ReadInterrupts>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd8:	d10a      	bne.n	8002ff0 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f005 fdea 	bl	8008bb4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	695a      	ldr	r2, [r3, #20]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002fee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f003 f979 	bl	80062ec <USB_ReadInterrupts>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	2b04      	cmp	r3, #4
 8003002:	d115      	bne.n	8003030 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	f003 0304 	and.w	r3, r3, #4
 8003012:	2b00      	cmp	r3, #0
 8003014:	d002      	beq.n	800301c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f005 fdda 	bl	8008bd0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6859      	ldr	r1, [r3, #4]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	430a      	orrs	r2, r1
 800302a:	605a      	str	r2, [r3, #4]
 800302c:	e000      	b.n	8003030 <HAL_PCD_IRQHandler+0x938>
      return;
 800302e:	bf00      	nop
    }
  }
}
 8003030:	3734      	adds	r7, #52	; 0x34
 8003032:	46bd      	mov	sp, r7
 8003034:	bd90      	pop	{r4, r7, pc}

08003036 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b082      	sub	sp, #8
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
 800303e:	460b      	mov	r3, r1
 8003040:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003048:	2b01      	cmp	r3, #1
 800304a:	d101      	bne.n	8003050 <HAL_PCD_SetAddress+0x1a>
 800304c:	2302      	movs	r3, #2
 800304e:	e013      	b.n	8003078 <HAL_PCD_SetAddress+0x42>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	78fa      	ldrb	r2, [r7, #3]
 800305c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	78fa      	ldrb	r2, [r7, #3]
 8003066:	4611      	mov	r1, r2
 8003068:	4618      	mov	r0, r3
 800306a:	f003 f8d7 	bl	800621c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	4608      	mov	r0, r1
 800308a:	4611      	mov	r1, r2
 800308c:	461a      	mov	r2, r3
 800308e:	4603      	mov	r3, r0
 8003090:	70fb      	strb	r3, [r7, #3]
 8003092:	460b      	mov	r3, r1
 8003094:	803b      	strh	r3, [r7, #0]
 8003096:	4613      	mov	r3, r2
 8003098:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800309a:	2300      	movs	r3, #0
 800309c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800309e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	da0f      	bge.n	80030c6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030a6:	78fb      	ldrb	r3, [r7, #3]
 80030a8:	f003 020f 	and.w	r2, r3, #15
 80030ac:	4613      	mov	r3, r2
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	4413      	add	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	3338      	adds	r3, #56	; 0x38
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	4413      	add	r3, r2
 80030ba:	3304      	adds	r3, #4
 80030bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2201      	movs	r2, #1
 80030c2:	705a      	strb	r2, [r3, #1]
 80030c4:	e00f      	b.n	80030e6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030c6:	78fb      	ldrb	r3, [r7, #3]
 80030c8:	f003 020f 	and.w	r2, r3, #15
 80030cc:	4613      	mov	r3, r2
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	4413      	add	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	4413      	add	r3, r2
 80030dc:	3304      	adds	r3, #4
 80030de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80030e6:	78fb      	ldrb	r3, [r7, #3]
 80030e8:	f003 030f 	and.w	r3, r3, #15
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80030f2:	883a      	ldrh	r2, [r7, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	78ba      	ldrb	r2, [r7, #2]
 80030fc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	785b      	ldrb	r3, [r3, #1]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d004      	beq.n	8003110 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	b29a      	uxth	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003110:	78bb      	ldrb	r3, [r7, #2]
 8003112:	2b02      	cmp	r3, #2
 8003114:	d102      	bne.n	800311c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003122:	2b01      	cmp	r3, #1
 8003124:	d101      	bne.n	800312a <HAL_PCD_EP_Open+0xaa>
 8003126:	2302      	movs	r3, #2
 8003128:	e00e      	b.n	8003148 <HAL_PCD_EP_Open+0xc8>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68f9      	ldr	r1, [r7, #12]
 8003138:	4618      	mov	r0, r3
 800313a:	f002 f957 	bl	80053ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003146:	7afb      	ldrb	r3, [r7, #11]
}
 8003148:	4618      	mov	r0, r3
 800314a:	3710      	adds	r7, #16
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	460b      	mov	r3, r1
 800315a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800315c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003160:	2b00      	cmp	r3, #0
 8003162:	da0f      	bge.n	8003184 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003164:	78fb      	ldrb	r3, [r7, #3]
 8003166:	f003 020f 	and.w	r2, r3, #15
 800316a:	4613      	mov	r3, r2
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	4413      	add	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	3338      	adds	r3, #56	; 0x38
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	4413      	add	r3, r2
 8003178:	3304      	adds	r3, #4
 800317a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2201      	movs	r2, #1
 8003180:	705a      	strb	r2, [r3, #1]
 8003182:	e00f      	b.n	80031a4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003184:	78fb      	ldrb	r3, [r7, #3]
 8003186:	f003 020f 	and.w	r2, r3, #15
 800318a:	4613      	mov	r3, r2
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	4413      	add	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	4413      	add	r3, r2
 800319a:	3304      	adds	r3, #4
 800319c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80031a4:	78fb      	ldrb	r3, [r7, #3]
 80031a6:	f003 030f 	and.w	r3, r3, #15
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d101      	bne.n	80031be <HAL_PCD_EP_Close+0x6e>
 80031ba:	2302      	movs	r3, #2
 80031bc:	e00e      	b.n	80031dc <HAL_PCD_EP_Close+0x8c>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68f9      	ldr	r1, [r7, #12]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f002 f995 	bl	80054fc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	607a      	str	r2, [r7, #4]
 80031ee:	603b      	str	r3, [r7, #0]
 80031f0:	460b      	mov	r3, r1
 80031f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031f4:	7afb      	ldrb	r3, [r7, #11]
 80031f6:	f003 020f 	and.w	r2, r3, #15
 80031fa:	4613      	mov	r3, r2
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	4413      	add	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	4413      	add	r3, r2
 800320a:	3304      	adds	r3, #4
 800320c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	2200      	movs	r2, #0
 800321e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	2200      	movs	r2, #0
 8003224:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003226:	7afb      	ldrb	r3, [r7, #11]
 8003228:	f003 030f 	and.w	r3, r3, #15
 800322c:	b2da      	uxtb	r2, r3
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d102      	bne.n	8003240 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003240:	7afb      	ldrb	r3, [r7, #11]
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	2b00      	cmp	r3, #0
 8003248:	d109      	bne.n	800325e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6818      	ldr	r0, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	b2db      	uxtb	r3, r3
 8003254:	461a      	mov	r2, r3
 8003256:	6979      	ldr	r1, [r7, #20]
 8003258:	f002 fc74 	bl	8005b44 <USB_EP0StartXfer>
 800325c:	e008      	b.n	8003270 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6818      	ldr	r0, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	b2db      	uxtb	r3, r3
 8003268:	461a      	mov	r2, r3
 800326a:	6979      	ldr	r1, [r7, #20]
 800326c:	f002 fa22 	bl	80056b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3718      	adds	r7, #24
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800327a:	b480      	push	{r7}
 800327c:	b083      	sub	sp, #12
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
 8003282:	460b      	mov	r3, r1
 8003284:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003286:	78fb      	ldrb	r3, [r7, #3]
 8003288:	f003 020f 	and.w	r2, r3, #15
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	4613      	mov	r3, r2
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	4413      	add	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	440b      	add	r3, r1
 8003298:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800329c:	681b      	ldr	r3, [r3, #0]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr

080032aa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b086      	sub	sp, #24
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	60f8      	str	r0, [r7, #12]
 80032b2:	607a      	str	r2, [r7, #4]
 80032b4:	603b      	str	r3, [r7, #0]
 80032b6:	460b      	mov	r3, r1
 80032b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032ba:	7afb      	ldrb	r3, [r7, #11]
 80032bc:	f003 020f 	and.w	r2, r3, #15
 80032c0:	4613      	mov	r3, r2
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	4413      	add	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	3338      	adds	r3, #56	; 0x38
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	4413      	add	r3, r2
 80032ce:	3304      	adds	r3, #4
 80032d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	2200      	movs	r2, #0
 80032e2:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	2201      	movs	r2, #1
 80032e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032ea:	7afb      	ldrb	r3, [r7, #11]
 80032ec:	f003 030f 	and.w	r3, r3, #15
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d102      	bne.n	8003304 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003304:	7afb      	ldrb	r3, [r7, #11]
 8003306:	f003 030f 	and.w	r3, r3, #15
 800330a:	2b00      	cmp	r3, #0
 800330c:	d109      	bne.n	8003322 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6818      	ldr	r0, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	b2db      	uxtb	r3, r3
 8003318:	461a      	mov	r2, r3
 800331a:	6979      	ldr	r1, [r7, #20]
 800331c:	f002 fc12 	bl	8005b44 <USB_EP0StartXfer>
 8003320:	e008      	b.n	8003334 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6818      	ldr	r0, [r3, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	b2db      	uxtb	r3, r3
 800332c:	461a      	mov	r2, r3
 800332e:	6979      	ldr	r1, [r7, #20]
 8003330:	f002 f9c0 	bl	80056b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3718      	adds	r7, #24
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b084      	sub	sp, #16
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
 8003346:	460b      	mov	r3, r1
 8003348:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800334a:	78fb      	ldrb	r3, [r7, #3]
 800334c:	f003 020f 	and.w	r2, r3, #15
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	429a      	cmp	r2, r3
 8003356:	d901      	bls.n	800335c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e050      	b.n	80033fe <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800335c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003360:	2b00      	cmp	r3, #0
 8003362:	da0f      	bge.n	8003384 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003364:	78fb      	ldrb	r3, [r7, #3]
 8003366:	f003 020f 	and.w	r2, r3, #15
 800336a:	4613      	mov	r3, r2
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	4413      	add	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	3338      	adds	r3, #56	; 0x38
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	4413      	add	r3, r2
 8003378:	3304      	adds	r3, #4
 800337a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2201      	movs	r2, #1
 8003380:	705a      	strb	r2, [r3, #1]
 8003382:	e00d      	b.n	80033a0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003384:	78fa      	ldrb	r2, [r7, #3]
 8003386:	4613      	mov	r3, r2
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	4413      	add	r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	4413      	add	r3, r2
 8003396:	3304      	adds	r3, #4
 8003398:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2201      	movs	r2, #1
 80033a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033a6:	78fb      	ldrb	r3, [r7, #3]
 80033a8:	f003 030f 	and.w	r3, r3, #15
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d101      	bne.n	80033c0 <HAL_PCD_EP_SetStall+0x82>
 80033bc:	2302      	movs	r3, #2
 80033be:	e01e      	b.n	80033fe <HAL_PCD_EP_SetStall+0xc0>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68f9      	ldr	r1, [r7, #12]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f002 fe50 	bl	8006074 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033d4:	78fb      	ldrb	r3, [r7, #3]
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10a      	bne.n	80033f4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6818      	ldr	r0, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	b2d9      	uxtb	r1, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80033ee:	461a      	mov	r2, r3
 80033f0:	f003 f840 	bl	8006474 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b084      	sub	sp, #16
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
 800340e:	460b      	mov	r3, r1
 8003410:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003412:	78fb      	ldrb	r3, [r7, #3]
 8003414:	f003 020f 	and.w	r2, r3, #15
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	429a      	cmp	r2, r3
 800341e:	d901      	bls.n	8003424 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e042      	b.n	80034aa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003424:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003428:	2b00      	cmp	r3, #0
 800342a:	da0f      	bge.n	800344c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800342c:	78fb      	ldrb	r3, [r7, #3]
 800342e:	f003 020f 	and.w	r2, r3, #15
 8003432:	4613      	mov	r3, r2
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	4413      	add	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	3338      	adds	r3, #56	; 0x38
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	4413      	add	r3, r2
 8003440:	3304      	adds	r3, #4
 8003442:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2201      	movs	r2, #1
 8003448:	705a      	strb	r2, [r3, #1]
 800344a:	e00f      	b.n	800346c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800344c:	78fb      	ldrb	r3, [r7, #3]
 800344e:	f003 020f 	and.w	r2, r3, #15
 8003452:	4613      	mov	r3, r2
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	4413      	add	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	4413      	add	r3, r2
 8003462:	3304      	adds	r3, #4
 8003464:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003472:	78fb      	ldrb	r3, [r7, #3]
 8003474:	f003 030f 	and.w	r3, r3, #15
 8003478:	b2da      	uxtb	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003484:	2b01      	cmp	r3, #1
 8003486:	d101      	bne.n	800348c <HAL_PCD_EP_ClrStall+0x86>
 8003488:	2302      	movs	r3, #2
 800348a:	e00e      	b.n	80034aa <HAL_PCD_EP_ClrStall+0xa4>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68f9      	ldr	r1, [r7, #12]
 800349a:	4618      	mov	r0, r3
 800349c:	f002 fe58 	bl	8006150 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b084      	sub	sp, #16
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
 80034ba:	460b      	mov	r3, r1
 80034bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80034be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	da0c      	bge.n	80034e0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034c6:	78fb      	ldrb	r3, [r7, #3]
 80034c8:	f003 020f 	and.w	r2, r3, #15
 80034cc:	4613      	mov	r3, r2
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	4413      	add	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	3338      	adds	r3, #56	; 0x38
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	4413      	add	r3, r2
 80034da:	3304      	adds	r3, #4
 80034dc:	60fb      	str	r3, [r7, #12]
 80034de:	e00c      	b.n	80034fa <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034e0:	78fb      	ldrb	r3, [r7, #3]
 80034e2:	f003 020f 	and.w	r2, r3, #15
 80034e6:	4613      	mov	r3, r2
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	4413      	add	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	4413      	add	r3, r2
 80034f6:	3304      	adds	r3, #4
 80034f8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68f9      	ldr	r1, [r7, #12]
 8003500:	4618      	mov	r0, r3
 8003502:	f002 fc77 	bl	8005df4 <USB_EPStopXfer>
 8003506:	4603      	mov	r3, r0
 8003508:	72fb      	strb	r3, [r7, #11]

  return ret;
 800350a:	7afb      	ldrb	r3, [r7, #11]
}
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b08a      	sub	sp, #40	; 0x28
 8003518:	af02      	add	r7, sp, #8
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003528:	683a      	ldr	r2, [r7, #0]
 800352a:	4613      	mov	r3, r2
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	4413      	add	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	3338      	adds	r3, #56	; 0x38
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	4413      	add	r3, r2
 8003538:	3304      	adds	r3, #4
 800353a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6a1a      	ldr	r2, [r3, #32]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	429a      	cmp	r2, r3
 8003546:	d901      	bls.n	800354c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e06c      	b.n	8003626 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	699a      	ldr	r2, [r3, #24]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	69fa      	ldr	r2, [r7, #28]
 800355e:	429a      	cmp	r2, r3
 8003560:	d902      	bls.n	8003568 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	3303      	adds	r3, #3
 800356c:	089b      	lsrs	r3, r3, #2
 800356e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003570:	e02b      	b.n	80035ca <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	699a      	ldr	r2, [r3, #24]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	69fa      	ldr	r2, [r7, #28]
 8003584:	429a      	cmp	r2, r3
 8003586:	d902      	bls.n	800358e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	3303      	adds	r3, #3
 8003592:	089b      	lsrs	r3, r3, #2
 8003594:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6919      	ldr	r1, [r3, #16]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	b2da      	uxtb	r2, r3
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	9300      	str	r3, [sp, #0]
 80035aa:	4603      	mov	r3, r0
 80035ac:	6978      	ldr	r0, [r7, #20]
 80035ae:	f002 fccb 	bl	8005f48 <USB_WritePacket>

    ep->xfer_buff  += len;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	691a      	ldr	r2, [r3, #16]
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	441a      	add	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6a1a      	ldr	r2, [r3, #32]
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	441a      	add	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	015a      	lsls	r2, r3, #5
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	4413      	add	r3, r2
 80035d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	b29b      	uxth	r3, r3
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d809      	bhi.n	80035f4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6a1a      	ldr	r2, [r3, #32]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d203      	bcs.n	80035f4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1be      	bne.n	8003572 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	699a      	ldr	r2, [r3, #24]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d811      	bhi.n	8003624 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	f003 030f 	and.w	r3, r3, #15
 8003606:	2201      	movs	r2, #1
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003614:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	43db      	mvns	r3, r3
 800361a:	6939      	ldr	r1, [r7, #16]
 800361c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003620:	4013      	ands	r3, r2
 8003622:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3720      	adds	r7, #32
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
	...

08003630 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b088      	sub	sp, #32
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	333c      	adds	r3, #60	; 0x3c
 8003648:	3304      	adds	r3, #4
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	015a      	lsls	r2, r3, #5
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	4413      	add	r3, r2
 8003656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d17b      	bne.n	800375e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	f003 0308 	and.w	r3, r3, #8
 800366c:	2b00      	cmp	r3, #0
 800366e:	d015      	beq.n	800369c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	4a61      	ldr	r2, [pc, #388]	; (80037f8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003674:	4293      	cmp	r3, r2
 8003676:	f240 80b9 	bls.w	80037ec <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003680:	2b00      	cmp	r3, #0
 8003682:	f000 80b3 	beq.w	80037ec <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	015a      	lsls	r2, r3, #5
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	4413      	add	r3, r2
 800368e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003692:	461a      	mov	r2, r3
 8003694:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003698:	6093      	str	r3, [r2, #8]
 800369a:	e0a7      	b.n	80037ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	f003 0320 	and.w	r3, r3, #32
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d009      	beq.n	80036ba <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	015a      	lsls	r2, r3, #5
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	4413      	add	r3, r2
 80036ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036b2:	461a      	mov	r2, r3
 80036b4:	2320      	movs	r3, #32
 80036b6:	6093      	str	r3, [r2, #8]
 80036b8:	e098      	b.n	80037ec <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f040 8093 	bne.w	80037ec <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	4a4b      	ldr	r2, [pc, #300]	; (80037f8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d90f      	bls.n	80036ee <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00a      	beq.n	80036ee <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	015a      	lsls	r2, r3, #5
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	4413      	add	r3, r2
 80036e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036e4:	461a      	mov	r2, r3
 80036e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036ea:	6093      	str	r3, [r2, #8]
 80036ec:	e07e      	b.n	80037ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	4613      	mov	r3, r2
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	4413      	add	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	4413      	add	r3, r2
 8003700:	3304      	adds	r3, #4
 8003702:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	69da      	ldr	r2, [r3, #28]
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	0159      	lsls	r1, r3, #5
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	440b      	add	r3, r1
 8003710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800371a:	1ad2      	subs	r2, r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d114      	bne.n	8003750 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d109      	bne.n	8003742 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6818      	ldr	r0, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003738:	461a      	mov	r2, r3
 800373a:	2101      	movs	r1, #1
 800373c:	f002 fe9a 	bl	8006474 <USB_EP0_OutStart>
 8003740:	e006      	b.n	8003750 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	691a      	ldr	r2, [r3, #16]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	441a      	add	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	b2db      	uxtb	r3, r3
 8003754:	4619      	mov	r1, r3
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f005 f968 	bl	8008a2c <HAL_PCD_DataOutStageCallback>
 800375c:	e046      	b.n	80037ec <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	4a26      	ldr	r2, [pc, #152]	; (80037fc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d124      	bne.n	80037b0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00a      	beq.n	8003786 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	015a      	lsls	r2, r3, #5
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	4413      	add	r3, r2
 8003778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800377c:	461a      	mov	r2, r3
 800377e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003782:	6093      	str	r3, [r2, #8]
 8003784:	e032      	b.n	80037ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	f003 0320 	and.w	r3, r3, #32
 800378c:	2b00      	cmp	r3, #0
 800378e:	d008      	beq.n	80037a2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	015a      	lsls	r2, r3, #5
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	4413      	add	r3, r2
 8003798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800379c:	461a      	mov	r2, r3
 800379e:	2320      	movs	r3, #32
 80037a0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	4619      	mov	r1, r3
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f005 f93f 	bl	8008a2c <HAL_PCD_DataOutStageCallback>
 80037ae:	e01d      	b.n	80037ec <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d114      	bne.n	80037e0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80037b6:	6879      	ldr	r1, [r7, #4]
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	4613      	mov	r3, r2
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	4413      	add	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	440b      	add	r3, r1
 80037c4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d108      	bne.n	80037e0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6818      	ldr	r0, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80037d8:	461a      	mov	r2, r3
 80037da:	2100      	movs	r1, #0
 80037dc:	f002 fe4a 	bl	8006474 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	4619      	mov	r1, r3
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f005 f920 	bl	8008a2c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3720      	adds	r7, #32
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	4f54300a 	.word	0x4f54300a
 80037fc:	4f54310a 	.word	0x4f54310a

08003800 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	333c      	adds	r3, #60	; 0x3c
 8003818:	3304      	adds	r3, #4
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	015a      	lsls	r2, r3, #5
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	4413      	add	r3, r2
 8003826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	4a15      	ldr	r2, [pc, #84]	; (8003888 <PCD_EP_OutSetupPacket_int+0x88>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d90e      	bls.n	8003854 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800383c:	2b00      	cmp	r3, #0
 800383e:	d009      	beq.n	8003854 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	015a      	lsls	r2, r3, #5
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	4413      	add	r3, r2
 8003848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800384c:	461a      	mov	r2, r3
 800384e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003852:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f005 f8d7 	bl	8008a08 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	4a0a      	ldr	r2, [pc, #40]	; (8003888 <PCD_EP_OutSetupPacket_int+0x88>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d90c      	bls.n	800387c <PCD_EP_OutSetupPacket_int+0x7c>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d108      	bne.n	800387c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6818      	ldr	r0, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003874:	461a      	mov	r2, r3
 8003876:	2101      	movs	r1, #1
 8003878:	f002 fdfc 	bl	8006474 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3718      	adds	r7, #24
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	4f54300a 	.word	0x4f54300a

0800388c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	460b      	mov	r3, r1
 8003896:	70fb      	strb	r3, [r7, #3]
 8003898:	4613      	mov	r3, r2
 800389a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80038a4:	78fb      	ldrb	r3, [r7, #3]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d107      	bne.n	80038ba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80038aa:	883b      	ldrh	r3, [r7, #0]
 80038ac:	0419      	lsls	r1, r3, #16
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68ba      	ldr	r2, [r7, #8]
 80038b4:	430a      	orrs	r2, r1
 80038b6:	629a      	str	r2, [r3, #40]	; 0x28
 80038b8:	e028      	b.n	800390c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c0:	0c1b      	lsrs	r3, r3, #16
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	4413      	add	r3, r2
 80038c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80038c8:	2300      	movs	r3, #0
 80038ca:	73fb      	strb	r3, [r7, #15]
 80038cc:	e00d      	b.n	80038ea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	7bfb      	ldrb	r3, [r7, #15]
 80038d4:	3340      	adds	r3, #64	; 0x40
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	4413      	add	r3, r2
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	0c1b      	lsrs	r3, r3, #16
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	4413      	add	r3, r2
 80038e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80038e4:	7bfb      	ldrb	r3, [r7, #15]
 80038e6:	3301      	adds	r3, #1
 80038e8:	73fb      	strb	r3, [r7, #15]
 80038ea:	7bfa      	ldrb	r2, [r7, #15]
 80038ec:	78fb      	ldrb	r3, [r7, #3]
 80038ee:	3b01      	subs	r3, #1
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d3ec      	bcc.n	80038ce <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80038f4:	883b      	ldrh	r3, [r7, #0]
 80038f6:	0418      	lsls	r0, r3, #16
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6819      	ldr	r1, [r3, #0]
 80038fc:	78fb      	ldrb	r3, [r7, #3]
 80038fe:	3b01      	subs	r3, #1
 8003900:	68ba      	ldr	r2, [r7, #8]
 8003902:	4302      	orrs	r2, r0
 8003904:	3340      	adds	r3, #64	; 0x40
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	440b      	add	r3, r1
 800390a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3714      	adds	r7, #20
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800391a:	b480      	push	{r7}
 800391c:	b083      	sub	sp, #12
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
 8003922:	460b      	mov	r3, r1
 8003924:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	887a      	ldrh	r2, [r7, #2]
 800392c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	460b      	mov	r3, r1
 8003946:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e267      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d075      	beq.n	8003a5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003972:	4b88      	ldr	r3, [pc, #544]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 030c 	and.w	r3, r3, #12
 800397a:	2b04      	cmp	r3, #4
 800397c:	d00c      	beq.n	8003998 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800397e:	4b85      	ldr	r3, [pc, #532]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003986:	2b08      	cmp	r3, #8
 8003988:	d112      	bne.n	80039b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800398a:	4b82      	ldr	r3, [pc, #520]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003992:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003996:	d10b      	bne.n	80039b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003998:	4b7e      	ldr	r3, [pc, #504]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d05b      	beq.n	8003a5c <HAL_RCC_OscConfig+0x108>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d157      	bne.n	8003a5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e242      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039b8:	d106      	bne.n	80039c8 <HAL_RCC_OscConfig+0x74>
 80039ba:	4b76      	ldr	r3, [pc, #472]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a75      	ldr	r2, [pc, #468]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	e01d      	b.n	8003a04 <HAL_RCC_OscConfig+0xb0>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039d0:	d10c      	bne.n	80039ec <HAL_RCC_OscConfig+0x98>
 80039d2:	4b70      	ldr	r3, [pc, #448]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a6f      	ldr	r2, [pc, #444]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	4b6d      	ldr	r3, [pc, #436]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a6c      	ldr	r2, [pc, #432]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	e00b      	b.n	8003a04 <HAL_RCC_OscConfig+0xb0>
 80039ec:	4b69      	ldr	r3, [pc, #420]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a68      	ldr	r2, [pc, #416]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039f6:	6013      	str	r3, [r2, #0]
 80039f8:	4b66      	ldr	r3, [pc, #408]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a65      	ldr	r2, [pc, #404]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 80039fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d013      	beq.n	8003a34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0c:	f7fd fbe6 	bl	80011dc <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a14:	f7fd fbe2 	bl	80011dc <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b64      	cmp	r3, #100	; 0x64
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e207      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a26:	4b5b      	ldr	r3, [pc, #364]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0f0      	beq.n	8003a14 <HAL_RCC_OscConfig+0xc0>
 8003a32:	e014      	b.n	8003a5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a34:	f7fd fbd2 	bl	80011dc <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a3c:	f7fd fbce 	bl	80011dc <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b64      	cmp	r3, #100	; 0x64
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e1f3      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a4e:	4b51      	ldr	r3, [pc, #324]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1f0      	bne.n	8003a3c <HAL_RCC_OscConfig+0xe8>
 8003a5a:	e000      	b.n	8003a5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d063      	beq.n	8003b32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a6a:	4b4a      	ldr	r3, [pc, #296]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f003 030c 	and.w	r3, r3, #12
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00b      	beq.n	8003a8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a76:	4b47      	ldr	r3, [pc, #284]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a7e:	2b08      	cmp	r3, #8
 8003a80:	d11c      	bne.n	8003abc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a82:	4b44      	ldr	r3, [pc, #272]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d116      	bne.n	8003abc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a8e:	4b41      	ldr	r3, [pc, #260]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d005      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x152>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d001      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e1c7      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa6:	4b3b      	ldr	r3, [pc, #236]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	4937      	ldr	r1, [pc, #220]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aba:	e03a      	b.n	8003b32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d020      	beq.n	8003b06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ac4:	4b34      	ldr	r3, [pc, #208]	; (8003b98 <HAL_RCC_OscConfig+0x244>)
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aca:	f7fd fb87 	bl	80011dc <HAL_GetTick>
 8003ace:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ad2:	f7fd fb83 	bl	80011dc <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e1a8      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae4:	4b2b      	ldr	r3, [pc, #172]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0f0      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af0:	4b28      	ldr	r3, [pc, #160]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	4925      	ldr	r1, [pc, #148]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	600b      	str	r3, [r1, #0]
 8003b04:	e015      	b.n	8003b32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b06:	4b24      	ldr	r3, [pc, #144]	; (8003b98 <HAL_RCC_OscConfig+0x244>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0c:	f7fd fb66 	bl	80011dc <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b14:	f7fd fb62 	bl	80011dc <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e187      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b26:	4b1b      	ldr	r3, [pc, #108]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1f0      	bne.n	8003b14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d036      	beq.n	8003bac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d016      	beq.n	8003b74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b46:	4b15      	ldr	r3, [pc, #84]	; (8003b9c <HAL_RCC_OscConfig+0x248>)
 8003b48:	2201      	movs	r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b4c:	f7fd fb46 	bl	80011dc <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b54:	f7fd fb42 	bl	80011dc <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e167      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b66:	4b0b      	ldr	r3, [pc, #44]	; (8003b94 <HAL_RCC_OscConfig+0x240>)
 8003b68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0f0      	beq.n	8003b54 <HAL_RCC_OscConfig+0x200>
 8003b72:	e01b      	b.n	8003bac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b74:	4b09      	ldr	r3, [pc, #36]	; (8003b9c <HAL_RCC_OscConfig+0x248>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b7a:	f7fd fb2f 	bl	80011dc <HAL_GetTick>
 8003b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b80:	e00e      	b.n	8003ba0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b82:	f7fd fb2b 	bl	80011dc <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d907      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e150      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
 8003b94:	40023800 	.word	0x40023800
 8003b98:	42470000 	.word	0x42470000
 8003b9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ba0:	4b88      	ldr	r3, [pc, #544]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003ba2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1ea      	bne.n	8003b82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0304 	and.w	r3, r3, #4
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 8097 	beq.w	8003ce8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bbe:	4b81      	ldr	r3, [pc, #516]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10f      	bne.n	8003bea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bca:	2300      	movs	r3, #0
 8003bcc:	60bb      	str	r3, [r7, #8]
 8003bce:	4b7d      	ldr	r3, [pc, #500]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd2:	4a7c      	ldr	r2, [pc, #496]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8003bda:	4b7a      	ldr	r3, [pc, #488]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be2:	60bb      	str	r3, [r7, #8]
 8003be4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003be6:	2301      	movs	r3, #1
 8003be8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bea:	4b77      	ldr	r3, [pc, #476]	; (8003dc8 <HAL_RCC_OscConfig+0x474>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d118      	bne.n	8003c28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bf6:	4b74      	ldr	r3, [pc, #464]	; (8003dc8 <HAL_RCC_OscConfig+0x474>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a73      	ldr	r2, [pc, #460]	; (8003dc8 <HAL_RCC_OscConfig+0x474>)
 8003bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c02:	f7fd faeb 	bl	80011dc <HAL_GetTick>
 8003c06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c08:	e008      	b.n	8003c1c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c0a:	f7fd fae7 	bl	80011dc <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e10c      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c1c:	4b6a      	ldr	r3, [pc, #424]	; (8003dc8 <HAL_RCC_OscConfig+0x474>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0f0      	beq.n	8003c0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d106      	bne.n	8003c3e <HAL_RCC_OscConfig+0x2ea>
 8003c30:	4b64      	ldr	r3, [pc, #400]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c34:	4a63      	ldr	r2, [pc, #396]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003c36:	f043 0301 	orr.w	r3, r3, #1
 8003c3a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c3c:	e01c      	b.n	8003c78 <HAL_RCC_OscConfig+0x324>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	2b05      	cmp	r3, #5
 8003c44:	d10c      	bne.n	8003c60 <HAL_RCC_OscConfig+0x30c>
 8003c46:	4b5f      	ldr	r3, [pc, #380]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4a:	4a5e      	ldr	r2, [pc, #376]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003c4c:	f043 0304 	orr.w	r3, r3, #4
 8003c50:	6713      	str	r3, [r2, #112]	; 0x70
 8003c52:	4b5c      	ldr	r3, [pc, #368]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c56:	4a5b      	ldr	r2, [pc, #364]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003c58:	f043 0301 	orr.w	r3, r3, #1
 8003c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c5e:	e00b      	b.n	8003c78 <HAL_RCC_OscConfig+0x324>
 8003c60:	4b58      	ldr	r3, [pc, #352]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c64:	4a57      	ldr	r2, [pc, #348]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003c66:	f023 0301 	bic.w	r3, r3, #1
 8003c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c6c:	4b55      	ldr	r3, [pc, #340]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c70:	4a54      	ldr	r2, [pc, #336]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003c72:	f023 0304 	bic.w	r3, r3, #4
 8003c76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d015      	beq.n	8003cac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c80:	f7fd faac 	bl	80011dc <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c86:	e00a      	b.n	8003c9e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c88:	f7fd faa8 	bl	80011dc <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e0cb      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c9e:	4b49      	ldr	r3, [pc, #292]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d0ee      	beq.n	8003c88 <HAL_RCC_OscConfig+0x334>
 8003caa:	e014      	b.n	8003cd6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cac:	f7fd fa96 	bl	80011dc <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cb2:	e00a      	b.n	8003cca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cb4:	f7fd fa92 	bl	80011dc <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e0b5      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cca:	4b3e      	ldr	r3, [pc, #248]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1ee      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cd6:	7dfb      	ldrb	r3, [r7, #23]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d105      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cdc:	4b39      	ldr	r3, [pc, #228]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce0:	4a38      	ldr	r2, [pc, #224]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003ce2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ce6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 80a1 	beq.w	8003e34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cf2:	4b34      	ldr	r3, [pc, #208]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 030c 	and.w	r3, r3, #12
 8003cfa:	2b08      	cmp	r3, #8
 8003cfc:	d05c      	beq.n	8003db8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d141      	bne.n	8003d8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d06:	4b31      	ldr	r3, [pc, #196]	; (8003dcc <HAL_RCC_OscConfig+0x478>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d0c:	f7fd fa66 	bl	80011dc <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d14:	f7fd fa62 	bl	80011dc <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e087      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d26:	4b27      	ldr	r3, [pc, #156]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1f0      	bne.n	8003d14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	69da      	ldr	r2, [r3, #28]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	019b      	lsls	r3, r3, #6
 8003d42:	431a      	orrs	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d48:	085b      	lsrs	r3, r3, #1
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	041b      	lsls	r3, r3, #16
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d54:	061b      	lsls	r3, r3, #24
 8003d56:	491b      	ldr	r1, [pc, #108]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d5c:	4b1b      	ldr	r3, [pc, #108]	; (8003dcc <HAL_RCC_OscConfig+0x478>)
 8003d5e:	2201      	movs	r2, #1
 8003d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d62:	f7fd fa3b 	bl	80011dc <HAL_GetTick>
 8003d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d68:	e008      	b.n	8003d7c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d6a:	f7fd fa37 	bl	80011dc <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e05c      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d7c:	4b11      	ldr	r3, [pc, #68]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d0f0      	beq.n	8003d6a <HAL_RCC_OscConfig+0x416>
 8003d88:	e054      	b.n	8003e34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d8a:	4b10      	ldr	r3, [pc, #64]	; (8003dcc <HAL_RCC_OscConfig+0x478>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d90:	f7fd fa24 	bl	80011dc <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d98:	f7fd fa20 	bl	80011dc <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e045      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003daa:	4b06      	ldr	r3, [pc, #24]	; (8003dc4 <HAL_RCC_OscConfig+0x470>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1f0      	bne.n	8003d98 <HAL_RCC_OscConfig+0x444>
 8003db6:	e03d      	b.n	8003e34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d107      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e038      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	40007000 	.word	0x40007000
 8003dcc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003dd0:	4b1b      	ldr	r3, [pc, #108]	; (8003e40 <HAL_RCC_OscConfig+0x4ec>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d028      	beq.n	8003e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d121      	bne.n	8003e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d11a      	bne.n	8003e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e00:	4013      	ands	r3, r2
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d111      	bne.n	8003e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e16:	085b      	lsrs	r3, r3, #1
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d107      	bne.n	8003e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d001      	beq.n	8003e34 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e000      	b.n	8003e36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3718      	adds	r7, #24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	40023800 	.word	0x40023800

08003e44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d101      	bne.n	8003e58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e0cc      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e58:	4b68      	ldr	r3, [pc, #416]	; (8003ffc <HAL_RCC_ClockConfig+0x1b8>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d90c      	bls.n	8003e80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e66:	4b65      	ldr	r3, [pc, #404]	; (8003ffc <HAL_RCC_ClockConfig+0x1b8>)
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	b2d2      	uxtb	r2, r2
 8003e6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e6e:	4b63      	ldr	r3, [pc, #396]	; (8003ffc <HAL_RCC_ClockConfig+0x1b8>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0307 	and.w	r3, r3, #7
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d001      	beq.n	8003e80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e0b8      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d020      	beq.n	8003ece <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0304 	and.w	r3, r3, #4
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d005      	beq.n	8003ea4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e98:	4b59      	ldr	r3, [pc, #356]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	4a58      	ldr	r2, [pc, #352]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ea2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0308 	and.w	r3, r3, #8
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d005      	beq.n	8003ebc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003eb0:	4b53      	ldr	r3, [pc, #332]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	4a52      	ldr	r2, [pc, #328]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003eba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ebc:	4b50      	ldr	r3, [pc, #320]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	494d      	ldr	r1, [pc, #308]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d044      	beq.n	8003f64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d107      	bne.n	8003ef2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ee2:	4b47      	ldr	r3, [pc, #284]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d119      	bne.n	8003f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e07f      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d003      	beq.n	8003f02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003efe:	2b03      	cmp	r3, #3
 8003f00:	d107      	bne.n	8003f12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f02:	4b3f      	ldr	r3, [pc, #252]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d109      	bne.n	8003f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e06f      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f12:	4b3b      	ldr	r3, [pc, #236]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e067      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f22:	4b37      	ldr	r3, [pc, #220]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f023 0203 	bic.w	r2, r3, #3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	4934      	ldr	r1, [pc, #208]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f34:	f7fd f952 	bl	80011dc <HAL_GetTick>
 8003f38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f3a:	e00a      	b.n	8003f52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f3c:	f7fd f94e 	bl	80011dc <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e04f      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f52:	4b2b      	ldr	r3, [pc, #172]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f003 020c 	and.w	r2, r3, #12
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d1eb      	bne.n	8003f3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f64:	4b25      	ldr	r3, [pc, #148]	; (8003ffc <HAL_RCC_ClockConfig+0x1b8>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d20c      	bcs.n	8003f8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f72:	4b22      	ldr	r3, [pc, #136]	; (8003ffc <HAL_RCC_ClockConfig+0x1b8>)
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	b2d2      	uxtb	r2, r2
 8003f78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f7a:	4b20      	ldr	r3, [pc, #128]	; (8003ffc <HAL_RCC_ClockConfig+0x1b8>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0307 	and.w	r3, r3, #7
 8003f82:	683a      	ldr	r2, [r7, #0]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d001      	beq.n	8003f8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e032      	b.n	8003ff2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0304 	and.w	r3, r3, #4
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d008      	beq.n	8003faa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f98:	4b19      	ldr	r3, [pc, #100]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	4916      	ldr	r1, [pc, #88]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0308 	and.w	r3, r3, #8
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d009      	beq.n	8003fca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fb6:	4b12      	ldr	r3, [pc, #72]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	490e      	ldr	r1, [pc, #56]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fca:	f000 f821 	bl	8004010 <HAL_RCC_GetSysClockFreq>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	4b0b      	ldr	r3, [pc, #44]	; (8004000 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	091b      	lsrs	r3, r3, #4
 8003fd6:	f003 030f 	and.w	r3, r3, #15
 8003fda:	490a      	ldr	r1, [pc, #40]	; (8004004 <HAL_RCC_ClockConfig+0x1c0>)
 8003fdc:	5ccb      	ldrb	r3, [r1, r3]
 8003fde:	fa22 f303 	lsr.w	r3, r2, r3
 8003fe2:	4a09      	ldr	r2, [pc, #36]	; (8004008 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fe6:	4b09      	ldr	r3, [pc, #36]	; (800400c <HAL_RCC_ClockConfig+0x1c8>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fd f8b2 	bl	8001154 <HAL_InitTick>

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	40023c00 	.word	0x40023c00
 8004000:	40023800 	.word	0x40023800
 8004004:	080091c8 	.word	0x080091c8
 8004008:	20000120 	.word	0x20000120
 800400c:	20000124 	.word	0x20000124

08004010 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004010:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004014:	b094      	sub	sp, #80	; 0x50
 8004016:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004018:	2300      	movs	r3, #0
 800401a:	647b      	str	r3, [r7, #68]	; 0x44
 800401c:	2300      	movs	r3, #0
 800401e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004020:	2300      	movs	r3, #0
 8004022:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004024:	2300      	movs	r3, #0
 8004026:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004028:	4b79      	ldr	r3, [pc, #484]	; (8004210 <HAL_RCC_GetSysClockFreq+0x200>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f003 030c 	and.w	r3, r3, #12
 8004030:	2b08      	cmp	r3, #8
 8004032:	d00d      	beq.n	8004050 <HAL_RCC_GetSysClockFreq+0x40>
 8004034:	2b08      	cmp	r3, #8
 8004036:	f200 80e1 	bhi.w	80041fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800403a:	2b00      	cmp	r3, #0
 800403c:	d002      	beq.n	8004044 <HAL_RCC_GetSysClockFreq+0x34>
 800403e:	2b04      	cmp	r3, #4
 8004040:	d003      	beq.n	800404a <HAL_RCC_GetSysClockFreq+0x3a>
 8004042:	e0db      	b.n	80041fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004044:	4b73      	ldr	r3, [pc, #460]	; (8004214 <HAL_RCC_GetSysClockFreq+0x204>)
 8004046:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004048:	e0db      	b.n	8004202 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800404a:	4b73      	ldr	r3, [pc, #460]	; (8004218 <HAL_RCC_GetSysClockFreq+0x208>)
 800404c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800404e:	e0d8      	b.n	8004202 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004050:	4b6f      	ldr	r3, [pc, #444]	; (8004210 <HAL_RCC_GetSysClockFreq+0x200>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004058:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800405a:	4b6d      	ldr	r3, [pc, #436]	; (8004210 <HAL_RCC_GetSysClockFreq+0x200>)
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d063      	beq.n	800412e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004066:	4b6a      	ldr	r3, [pc, #424]	; (8004210 <HAL_RCC_GetSysClockFreq+0x200>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	099b      	lsrs	r3, r3, #6
 800406c:	2200      	movs	r2, #0
 800406e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004070:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004074:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004078:	633b      	str	r3, [r7, #48]	; 0x30
 800407a:	2300      	movs	r3, #0
 800407c:	637b      	str	r3, [r7, #52]	; 0x34
 800407e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004082:	4622      	mov	r2, r4
 8004084:	462b      	mov	r3, r5
 8004086:	f04f 0000 	mov.w	r0, #0
 800408a:	f04f 0100 	mov.w	r1, #0
 800408e:	0159      	lsls	r1, r3, #5
 8004090:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004094:	0150      	lsls	r0, r2, #5
 8004096:	4602      	mov	r2, r0
 8004098:	460b      	mov	r3, r1
 800409a:	4621      	mov	r1, r4
 800409c:	1a51      	subs	r1, r2, r1
 800409e:	6139      	str	r1, [r7, #16]
 80040a0:	4629      	mov	r1, r5
 80040a2:	eb63 0301 	sbc.w	r3, r3, r1
 80040a6:	617b      	str	r3, [r7, #20]
 80040a8:	f04f 0200 	mov.w	r2, #0
 80040ac:	f04f 0300 	mov.w	r3, #0
 80040b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040b4:	4659      	mov	r1, fp
 80040b6:	018b      	lsls	r3, r1, #6
 80040b8:	4651      	mov	r1, sl
 80040ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040be:	4651      	mov	r1, sl
 80040c0:	018a      	lsls	r2, r1, #6
 80040c2:	4651      	mov	r1, sl
 80040c4:	ebb2 0801 	subs.w	r8, r2, r1
 80040c8:	4659      	mov	r1, fp
 80040ca:	eb63 0901 	sbc.w	r9, r3, r1
 80040ce:	f04f 0200 	mov.w	r2, #0
 80040d2:	f04f 0300 	mov.w	r3, #0
 80040d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040e2:	4690      	mov	r8, r2
 80040e4:	4699      	mov	r9, r3
 80040e6:	4623      	mov	r3, r4
 80040e8:	eb18 0303 	adds.w	r3, r8, r3
 80040ec:	60bb      	str	r3, [r7, #8]
 80040ee:	462b      	mov	r3, r5
 80040f0:	eb49 0303 	adc.w	r3, r9, r3
 80040f4:	60fb      	str	r3, [r7, #12]
 80040f6:	f04f 0200 	mov.w	r2, #0
 80040fa:	f04f 0300 	mov.w	r3, #0
 80040fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004102:	4629      	mov	r1, r5
 8004104:	024b      	lsls	r3, r1, #9
 8004106:	4621      	mov	r1, r4
 8004108:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800410c:	4621      	mov	r1, r4
 800410e:	024a      	lsls	r2, r1, #9
 8004110:	4610      	mov	r0, r2
 8004112:	4619      	mov	r1, r3
 8004114:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004116:	2200      	movs	r2, #0
 8004118:	62bb      	str	r3, [r7, #40]	; 0x28
 800411a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800411c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004120:	f7fc f864 	bl	80001ec <__aeabi_uldivmod>
 8004124:	4602      	mov	r2, r0
 8004126:	460b      	mov	r3, r1
 8004128:	4613      	mov	r3, r2
 800412a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800412c:	e058      	b.n	80041e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800412e:	4b38      	ldr	r3, [pc, #224]	; (8004210 <HAL_RCC_GetSysClockFreq+0x200>)
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	099b      	lsrs	r3, r3, #6
 8004134:	2200      	movs	r2, #0
 8004136:	4618      	mov	r0, r3
 8004138:	4611      	mov	r1, r2
 800413a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800413e:	623b      	str	r3, [r7, #32]
 8004140:	2300      	movs	r3, #0
 8004142:	627b      	str	r3, [r7, #36]	; 0x24
 8004144:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004148:	4642      	mov	r2, r8
 800414a:	464b      	mov	r3, r9
 800414c:	f04f 0000 	mov.w	r0, #0
 8004150:	f04f 0100 	mov.w	r1, #0
 8004154:	0159      	lsls	r1, r3, #5
 8004156:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800415a:	0150      	lsls	r0, r2, #5
 800415c:	4602      	mov	r2, r0
 800415e:	460b      	mov	r3, r1
 8004160:	4641      	mov	r1, r8
 8004162:	ebb2 0a01 	subs.w	sl, r2, r1
 8004166:	4649      	mov	r1, r9
 8004168:	eb63 0b01 	sbc.w	fp, r3, r1
 800416c:	f04f 0200 	mov.w	r2, #0
 8004170:	f04f 0300 	mov.w	r3, #0
 8004174:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004178:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800417c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004180:	ebb2 040a 	subs.w	r4, r2, sl
 8004184:	eb63 050b 	sbc.w	r5, r3, fp
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	f04f 0300 	mov.w	r3, #0
 8004190:	00eb      	lsls	r3, r5, #3
 8004192:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004196:	00e2      	lsls	r2, r4, #3
 8004198:	4614      	mov	r4, r2
 800419a:	461d      	mov	r5, r3
 800419c:	4643      	mov	r3, r8
 800419e:	18e3      	adds	r3, r4, r3
 80041a0:	603b      	str	r3, [r7, #0]
 80041a2:	464b      	mov	r3, r9
 80041a4:	eb45 0303 	adc.w	r3, r5, r3
 80041a8:	607b      	str	r3, [r7, #4]
 80041aa:	f04f 0200 	mov.w	r2, #0
 80041ae:	f04f 0300 	mov.w	r3, #0
 80041b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041b6:	4629      	mov	r1, r5
 80041b8:	028b      	lsls	r3, r1, #10
 80041ba:	4621      	mov	r1, r4
 80041bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041c0:	4621      	mov	r1, r4
 80041c2:	028a      	lsls	r2, r1, #10
 80041c4:	4610      	mov	r0, r2
 80041c6:	4619      	mov	r1, r3
 80041c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041ca:	2200      	movs	r2, #0
 80041cc:	61bb      	str	r3, [r7, #24]
 80041ce:	61fa      	str	r2, [r7, #28]
 80041d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041d4:	f7fc f80a 	bl	80001ec <__aeabi_uldivmod>
 80041d8:	4602      	mov	r2, r0
 80041da:	460b      	mov	r3, r1
 80041dc:	4613      	mov	r3, r2
 80041de:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041e0:	4b0b      	ldr	r3, [pc, #44]	; (8004210 <HAL_RCC_GetSysClockFreq+0x200>)
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	0c1b      	lsrs	r3, r3, #16
 80041e6:	f003 0303 	and.w	r3, r3, #3
 80041ea:	3301      	adds	r3, #1
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80041f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041fa:	e002      	b.n	8004202 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041fc:	4b05      	ldr	r3, [pc, #20]	; (8004214 <HAL_RCC_GetSysClockFreq+0x204>)
 80041fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004200:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004204:	4618      	mov	r0, r3
 8004206:	3750      	adds	r7, #80	; 0x50
 8004208:	46bd      	mov	sp, r7
 800420a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800420e:	bf00      	nop
 8004210:	40023800 	.word	0x40023800
 8004214:	00f42400 	.word	0x00f42400
 8004218:	007a1200 	.word	0x007a1200

0800421c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004220:	4b03      	ldr	r3, [pc, #12]	; (8004230 <HAL_RCC_GetHCLKFreq+0x14>)
 8004222:	681b      	ldr	r3, [r3, #0]
}
 8004224:	4618      	mov	r0, r3
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	20000120 	.word	0x20000120

08004234 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004238:	f7ff fff0 	bl	800421c <HAL_RCC_GetHCLKFreq>
 800423c:	4602      	mov	r2, r0
 800423e:	4b05      	ldr	r3, [pc, #20]	; (8004254 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	0a9b      	lsrs	r3, r3, #10
 8004244:	f003 0307 	and.w	r3, r3, #7
 8004248:	4903      	ldr	r1, [pc, #12]	; (8004258 <HAL_RCC_GetPCLK1Freq+0x24>)
 800424a:	5ccb      	ldrb	r3, [r1, r3]
 800424c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004250:	4618      	mov	r0, r3
 8004252:	bd80      	pop	{r7, pc}
 8004254:	40023800 	.word	0x40023800
 8004258:	080091d8 	.word	0x080091d8

0800425c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004264:	2300      	movs	r3, #0
 8004266:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004268:	2300      	movs	r3, #0
 800426a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0301 	and.w	r3, r3, #1
 8004274:	2b00      	cmp	r3, #0
 8004276:	d105      	bne.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004280:	2b00      	cmp	r3, #0
 8004282:	d035      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004284:	4b62      	ldr	r3, [pc, #392]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004286:	2200      	movs	r2, #0
 8004288:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800428a:	f7fc ffa7 	bl	80011dc <HAL_GetTick>
 800428e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004290:	e008      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004292:	f7fc ffa3 	bl	80011dc <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	2b02      	cmp	r3, #2
 800429e:	d901      	bls.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e0b0      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042a4:	4b5b      	ldr	r3, [pc, #364]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1f0      	bne.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	019a      	lsls	r2, r3, #6
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	071b      	lsls	r3, r3, #28
 80042bc:	4955      	ldr	r1, [pc, #340]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80042c4:	4b52      	ldr	r3, [pc, #328]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80042c6:	2201      	movs	r2, #1
 80042c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042ca:	f7fc ff87 	bl	80011dc <HAL_GetTick>
 80042ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042d0:	e008      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80042d2:	f7fc ff83 	bl	80011dc <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d901      	bls.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e090      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042e4:	4b4b      	ldr	r3, [pc, #300]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d0f0      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 8083 	beq.w	8004404 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80042fe:	2300      	movs	r3, #0
 8004300:	60fb      	str	r3, [r7, #12]
 8004302:	4b44      	ldr	r3, [pc, #272]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004306:	4a43      	ldr	r2, [pc, #268]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800430c:	6413      	str	r3, [r2, #64]	; 0x40
 800430e:	4b41      	ldr	r3, [pc, #260]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004316:	60fb      	str	r3, [r7, #12]
 8004318:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800431a:	4b3f      	ldr	r3, [pc, #252]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a3e      	ldr	r2, [pc, #248]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004324:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004326:	f7fc ff59 	bl	80011dc <HAL_GetTick>
 800432a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800432c:	e008      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800432e:	f7fc ff55 	bl	80011dc <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	2b02      	cmp	r3, #2
 800433a:	d901      	bls.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e062      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004340:	4b35      	ldr	r3, [pc, #212]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004348:	2b00      	cmp	r3, #0
 800434a:	d0f0      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800434c:	4b31      	ldr	r3, [pc, #196]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800434e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004350:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004354:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d02f      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	429a      	cmp	r2, r3
 8004368:	d028      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800436a:	4b2a      	ldr	r3, [pc, #168]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800436c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800436e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004372:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004374:	4b29      	ldr	r3, [pc, #164]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004376:	2201      	movs	r2, #1
 8004378:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800437a:	4b28      	ldr	r3, [pc, #160]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800437c:	2200      	movs	r2, #0
 800437e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004380:	4a24      	ldr	r2, [pc, #144]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004386:	4b23      	ldr	r3, [pc, #140]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b01      	cmp	r3, #1
 8004390:	d114      	bne.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004392:	f7fc ff23 	bl	80011dc <HAL_GetTick>
 8004396:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004398:	e00a      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800439a:	f7fc ff1f 	bl	80011dc <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d901      	bls.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e02a      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b0:	4b18      	ldr	r3, [pc, #96]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d0ee      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043c8:	d10d      	bne.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80043ca:	4b12      	ldr	r3, [pc, #72]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80043da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043de:	490d      	ldr	r1, [pc, #52]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	608b      	str	r3, [r1, #8]
 80043e4:	e005      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80043e6:	4b0b      	ldr	r3, [pc, #44]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	4a0a      	ldr	r2, [pc, #40]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043ec:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80043f0:	6093      	str	r3, [r2, #8]
 80043f2:	4b08      	ldr	r3, [pc, #32]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043fe:	4905      	ldr	r1, [pc, #20]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004400:	4313      	orrs	r3, r2
 8004402:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3718      	adds	r7, #24
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	42470068 	.word	0x42470068
 8004414:	40023800 	.word	0x40023800
 8004418:	40007000 	.word	0x40007000
 800441c:	42470e40 	.word	0x42470e40

08004420 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004420:	b480      	push	{r7}
 8004422:	b087      	sub	sp, #28
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004428:	2300      	movs	r3, #0
 800442a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800442c:	2300      	movs	r3, #0
 800442e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004430:	2300      	movs	r3, #0
 8004432:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004434:	2300      	movs	r3, #0
 8004436:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d13e      	bne.n	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800443e:	4b23      	ldr	r3, [pc, #140]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004446:	60fb      	str	r3, [r7, #12]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d005      	beq.n	800445a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d12f      	bne.n	80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004454:	4b1e      	ldr	r3, [pc, #120]	; (80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004456:	617b      	str	r3, [r7, #20]
          break;
 8004458:	e02f      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800445a:	4b1c      	ldr	r3, [pc, #112]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004462:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004466:	d108      	bne.n	800447a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004468:	4b18      	ldr	r3, [pc, #96]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004470:	4a18      	ldr	r2, [pc, #96]	; (80044d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004472:	fbb2 f3f3 	udiv	r3, r2, r3
 8004476:	613b      	str	r3, [r7, #16]
 8004478:	e007      	b.n	800448a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800447a:	4b14      	ldr	r3, [pc, #80]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004482:	4a15      	ldr	r2, [pc, #84]	; (80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004484:	fbb2 f3f3 	udiv	r3, r2, r3
 8004488:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800448a:	4b10      	ldr	r3, [pc, #64]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800448c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004490:	099b      	lsrs	r3, r3, #6
 8004492:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	fb02 f303 	mul.w	r3, r2, r3
 800449c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800449e:	4b0b      	ldr	r3, [pc, #44]	; (80044cc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044a4:	0f1b      	lsrs	r3, r3, #28
 80044a6:	f003 0307 	and.w	r3, r3, #7
 80044aa:	68ba      	ldr	r2, [r7, #8]
 80044ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b0:	617b      	str	r3, [r7, #20]
          break;
 80044b2:	e002      	b.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80044b4:	2300      	movs	r3, #0
 80044b6:	617b      	str	r3, [r7, #20]
          break;
 80044b8:	bf00      	nop
        }
      }
      break;
 80044ba:	bf00      	nop
    }
  }
  return frequency;
 80044bc:	697b      	ldr	r3, [r7, #20]
}
 80044be:	4618      	mov	r0, r3
 80044c0:	371c      	adds	r7, #28
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	40023800 	.word	0x40023800
 80044d0:	00bb8000 	.word	0x00bb8000
 80044d4:	007a1200 	.word	0x007a1200
 80044d8:	00f42400 	.word	0x00f42400

080044dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e07b      	b.n	80045e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d108      	bne.n	8004508 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044fe:	d009      	beq.n	8004514 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	61da      	str	r2, [r3, #28]
 8004506:	e005      	b.n	8004514 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d106      	bne.n	8004534 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f7fc fce0 	bl	8000ef4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2202      	movs	r2, #2
 8004538:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800454a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800455c:	431a      	orrs	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004566:	431a      	orrs	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	431a      	orrs	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	431a      	orrs	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004584:	431a      	orrs	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800458e:	431a      	orrs	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004598:	ea42 0103 	orr.w	r1, r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	430a      	orrs	r2, r1
 80045aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	0c1b      	lsrs	r3, r3, #16
 80045b2:	f003 0104 	and.w	r1, r3, #4
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ba:	f003 0210 	and.w	r2, r3, #16
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	430a      	orrs	r2, r1
 80045c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	69da      	ldr	r2, [r3, #28]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3708      	adds	r7, #8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b082      	sub	sp, #8
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d101      	bne.n	8004600 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e041      	b.n	8004684 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b00      	cmp	r3, #0
 800460a:	d106      	bne.n	800461a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f7fc fcb5 	bl	8000f84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2202      	movs	r2, #2
 800461e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	3304      	adds	r3, #4
 800462a:	4619      	mov	r1, r3
 800462c:	4610      	mov	r0, r2
 800462e:	f000 fa35 	bl	8004a9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004682:	2300      	movs	r3, #0
}
 8004684:	4618      	mov	r0, r3
 8004686:	3708      	adds	r7, #8
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b01      	cmp	r3, #1
 800469e:	d001      	beq.n	80046a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e046      	b.n	8004732 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2202      	movs	r2, #2
 80046a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a23      	ldr	r2, [pc, #140]	; (8004740 <HAL_TIM_Base_Start+0xb4>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d022      	beq.n	80046fc <HAL_TIM_Base_Start+0x70>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046be:	d01d      	beq.n	80046fc <HAL_TIM_Base_Start+0x70>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a1f      	ldr	r2, [pc, #124]	; (8004744 <HAL_TIM_Base_Start+0xb8>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d018      	beq.n	80046fc <HAL_TIM_Base_Start+0x70>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a1e      	ldr	r2, [pc, #120]	; (8004748 <HAL_TIM_Base_Start+0xbc>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d013      	beq.n	80046fc <HAL_TIM_Base_Start+0x70>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a1c      	ldr	r2, [pc, #112]	; (800474c <HAL_TIM_Base_Start+0xc0>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d00e      	beq.n	80046fc <HAL_TIM_Base_Start+0x70>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a1b      	ldr	r2, [pc, #108]	; (8004750 <HAL_TIM_Base_Start+0xc4>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d009      	beq.n	80046fc <HAL_TIM_Base_Start+0x70>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a19      	ldr	r2, [pc, #100]	; (8004754 <HAL_TIM_Base_Start+0xc8>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d004      	beq.n	80046fc <HAL_TIM_Base_Start+0x70>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a18      	ldr	r2, [pc, #96]	; (8004758 <HAL_TIM_Base_Start+0xcc>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d111      	bne.n	8004720 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 0307 	and.w	r3, r3, #7
 8004706:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2b06      	cmp	r3, #6
 800470c:	d010      	beq.n	8004730 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f042 0201 	orr.w	r2, r2, #1
 800471c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800471e:	e007      	b.n	8004730 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f042 0201 	orr.w	r2, r2, #1
 800472e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3714      	adds	r7, #20
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	40010000 	.word	0x40010000
 8004744:	40000400 	.word	0x40000400
 8004748:	40000800 	.word	0x40000800
 800474c:	40000c00 	.word	0x40000c00
 8004750:	40010400 	.word	0x40010400
 8004754:	40014000 	.word	0x40014000
 8004758:	40001800 	.word	0x40001800

0800475c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800475c:	b480      	push	{r7}
 800475e:	b085      	sub	sp, #20
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b01      	cmp	r3, #1
 800476e:	d001      	beq.n	8004774 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e04e      	b.n	8004812 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2202      	movs	r2, #2
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68da      	ldr	r2, [r3, #12]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f042 0201 	orr.w	r2, r2, #1
 800478a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a23      	ldr	r2, [pc, #140]	; (8004820 <HAL_TIM_Base_Start_IT+0xc4>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d022      	beq.n	80047dc <HAL_TIM_Base_Start_IT+0x80>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800479e:	d01d      	beq.n	80047dc <HAL_TIM_Base_Start_IT+0x80>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a1f      	ldr	r2, [pc, #124]	; (8004824 <HAL_TIM_Base_Start_IT+0xc8>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d018      	beq.n	80047dc <HAL_TIM_Base_Start_IT+0x80>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a1e      	ldr	r2, [pc, #120]	; (8004828 <HAL_TIM_Base_Start_IT+0xcc>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d013      	beq.n	80047dc <HAL_TIM_Base_Start_IT+0x80>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a1c      	ldr	r2, [pc, #112]	; (800482c <HAL_TIM_Base_Start_IT+0xd0>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d00e      	beq.n	80047dc <HAL_TIM_Base_Start_IT+0x80>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a1b      	ldr	r2, [pc, #108]	; (8004830 <HAL_TIM_Base_Start_IT+0xd4>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d009      	beq.n	80047dc <HAL_TIM_Base_Start_IT+0x80>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a19      	ldr	r2, [pc, #100]	; (8004834 <HAL_TIM_Base_Start_IT+0xd8>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d004      	beq.n	80047dc <HAL_TIM_Base_Start_IT+0x80>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a18      	ldr	r2, [pc, #96]	; (8004838 <HAL_TIM_Base_Start_IT+0xdc>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d111      	bne.n	8004800 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f003 0307 	and.w	r3, r3, #7
 80047e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2b06      	cmp	r3, #6
 80047ec:	d010      	beq.n	8004810 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f042 0201 	orr.w	r2, r2, #1
 80047fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047fe:	e007      	b.n	8004810 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f042 0201 	orr.w	r2, r2, #1
 800480e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3714      	adds	r7, #20
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	40010000 	.word	0x40010000
 8004824:	40000400 	.word	0x40000400
 8004828:	40000800 	.word	0x40000800
 800482c:	40000c00 	.word	0x40000c00
 8004830:	40010400 	.word	0x40010400
 8004834:	40014000 	.word	0x40014000
 8004838:	40001800 	.word	0x40001800

0800483c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b02      	cmp	r3, #2
 8004850:	d122      	bne.n	8004898 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	2b02      	cmp	r3, #2
 800485e:	d11b      	bne.n	8004898 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f06f 0202 	mvn.w	r2, #2
 8004868:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	f003 0303 	and.w	r3, r3, #3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d003      	beq.n	8004886 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 f8ee 	bl	8004a60 <HAL_TIM_IC_CaptureCallback>
 8004884:	e005      	b.n	8004892 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 f8e0 	bl	8004a4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 f8f1 	bl	8004a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	f003 0304 	and.w	r3, r3, #4
 80048a2:	2b04      	cmp	r3, #4
 80048a4:	d122      	bne.n	80048ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	f003 0304 	and.w	r3, r3, #4
 80048b0:	2b04      	cmp	r3, #4
 80048b2:	d11b      	bne.n	80048ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f06f 0204 	mvn.w	r2, #4
 80048bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2202      	movs	r2, #2
 80048c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d003      	beq.n	80048da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f8c4 	bl	8004a60 <HAL_TIM_IC_CaptureCallback>
 80048d8:	e005      	b.n	80048e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f8b6 	bl	8004a4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 f8c7 	bl	8004a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	f003 0308 	and.w	r3, r3, #8
 80048f6:	2b08      	cmp	r3, #8
 80048f8:	d122      	bne.n	8004940 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	f003 0308 	and.w	r3, r3, #8
 8004904:	2b08      	cmp	r3, #8
 8004906:	d11b      	bne.n	8004940 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f06f 0208 	mvn.w	r2, #8
 8004910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2204      	movs	r2, #4
 8004916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	69db      	ldr	r3, [r3, #28]
 800491e:	f003 0303 	and.w	r3, r3, #3
 8004922:	2b00      	cmp	r3, #0
 8004924:	d003      	beq.n	800492e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f89a 	bl	8004a60 <HAL_TIM_IC_CaptureCallback>
 800492c:	e005      	b.n	800493a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f88c 	bl	8004a4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 f89d 	bl	8004a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	f003 0310 	and.w	r3, r3, #16
 800494a:	2b10      	cmp	r3, #16
 800494c:	d122      	bne.n	8004994 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	f003 0310 	and.w	r3, r3, #16
 8004958:	2b10      	cmp	r3, #16
 800495a:	d11b      	bne.n	8004994 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f06f 0210 	mvn.w	r2, #16
 8004964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2208      	movs	r2, #8
 800496a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	69db      	ldr	r3, [r3, #28]
 8004972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004976:	2b00      	cmp	r3, #0
 8004978:	d003      	beq.n	8004982 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f870 	bl	8004a60 <HAL_TIM_IC_CaptureCallback>
 8004980:	e005      	b.n	800498e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f862 	bl	8004a4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 f873 	bl	8004a74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d10e      	bne.n	80049c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	f003 0301 	and.w	r3, r3, #1
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d107      	bne.n	80049c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f06f 0201 	mvn.w	r2, #1
 80049b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f7fc f990 	bl	8000ce0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ca:	2b80      	cmp	r3, #128	; 0x80
 80049cc:	d10e      	bne.n	80049ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d8:	2b80      	cmp	r3, #128	; 0x80
 80049da:	d107      	bne.n	80049ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f97e 	bl	8004ce8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f6:	2b40      	cmp	r3, #64	; 0x40
 80049f8:	d10e      	bne.n	8004a18 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a04:	2b40      	cmp	r3, #64	; 0x40
 8004a06:	d107      	bne.n	8004a18 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f838 	bl	8004a88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	f003 0320 	and.w	r3, r3, #32
 8004a22:	2b20      	cmp	r3, #32
 8004a24:	d10e      	bne.n	8004a44 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	f003 0320 	and.w	r3, r3, #32
 8004a30:	2b20      	cmp	r3, #32
 8004a32:	d107      	bne.n	8004a44 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f06f 0220 	mvn.w	r2, #32
 8004a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 f948 	bl	8004cd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a44:	bf00      	nop
 8004a46:	3708      	adds	r7, #8
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a40      	ldr	r2, [pc, #256]	; (8004bb0 <TIM_Base_SetConfig+0x114>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d013      	beq.n	8004adc <TIM_Base_SetConfig+0x40>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aba:	d00f      	beq.n	8004adc <TIM_Base_SetConfig+0x40>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a3d      	ldr	r2, [pc, #244]	; (8004bb4 <TIM_Base_SetConfig+0x118>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d00b      	beq.n	8004adc <TIM_Base_SetConfig+0x40>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a3c      	ldr	r2, [pc, #240]	; (8004bb8 <TIM_Base_SetConfig+0x11c>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d007      	beq.n	8004adc <TIM_Base_SetConfig+0x40>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a3b      	ldr	r2, [pc, #236]	; (8004bbc <TIM_Base_SetConfig+0x120>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d003      	beq.n	8004adc <TIM_Base_SetConfig+0x40>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a3a      	ldr	r2, [pc, #232]	; (8004bc0 <TIM_Base_SetConfig+0x124>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d108      	bne.n	8004aee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ae2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a2f      	ldr	r2, [pc, #188]	; (8004bb0 <TIM_Base_SetConfig+0x114>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d02b      	beq.n	8004b4e <TIM_Base_SetConfig+0xb2>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004afc:	d027      	beq.n	8004b4e <TIM_Base_SetConfig+0xb2>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a2c      	ldr	r2, [pc, #176]	; (8004bb4 <TIM_Base_SetConfig+0x118>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d023      	beq.n	8004b4e <TIM_Base_SetConfig+0xb2>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a2b      	ldr	r2, [pc, #172]	; (8004bb8 <TIM_Base_SetConfig+0x11c>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d01f      	beq.n	8004b4e <TIM_Base_SetConfig+0xb2>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a2a      	ldr	r2, [pc, #168]	; (8004bbc <TIM_Base_SetConfig+0x120>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d01b      	beq.n	8004b4e <TIM_Base_SetConfig+0xb2>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a29      	ldr	r2, [pc, #164]	; (8004bc0 <TIM_Base_SetConfig+0x124>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d017      	beq.n	8004b4e <TIM_Base_SetConfig+0xb2>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a28      	ldr	r2, [pc, #160]	; (8004bc4 <TIM_Base_SetConfig+0x128>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d013      	beq.n	8004b4e <TIM_Base_SetConfig+0xb2>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a27      	ldr	r2, [pc, #156]	; (8004bc8 <TIM_Base_SetConfig+0x12c>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d00f      	beq.n	8004b4e <TIM_Base_SetConfig+0xb2>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a26      	ldr	r2, [pc, #152]	; (8004bcc <TIM_Base_SetConfig+0x130>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d00b      	beq.n	8004b4e <TIM_Base_SetConfig+0xb2>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a25      	ldr	r2, [pc, #148]	; (8004bd0 <TIM_Base_SetConfig+0x134>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d007      	beq.n	8004b4e <TIM_Base_SetConfig+0xb2>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a24      	ldr	r2, [pc, #144]	; (8004bd4 <TIM_Base_SetConfig+0x138>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d003      	beq.n	8004b4e <TIM_Base_SetConfig+0xb2>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a23      	ldr	r2, [pc, #140]	; (8004bd8 <TIM_Base_SetConfig+0x13c>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d108      	bne.n	8004b60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	689a      	ldr	r2, [r3, #8]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a0a      	ldr	r2, [pc, #40]	; (8004bb0 <TIM_Base_SetConfig+0x114>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d003      	beq.n	8004b94 <TIM_Base_SetConfig+0xf8>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a0c      	ldr	r2, [pc, #48]	; (8004bc0 <TIM_Base_SetConfig+0x124>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d103      	bne.n	8004b9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	691a      	ldr	r2, [r3, #16]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	615a      	str	r2, [r3, #20]
}
 8004ba2:	bf00      	nop
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	40010000 	.word	0x40010000
 8004bb4:	40000400 	.word	0x40000400
 8004bb8:	40000800 	.word	0x40000800
 8004bbc:	40000c00 	.word	0x40000c00
 8004bc0:	40010400 	.word	0x40010400
 8004bc4:	40014000 	.word	0x40014000
 8004bc8:	40014400 	.word	0x40014400
 8004bcc:	40014800 	.word	0x40014800
 8004bd0:	40001800 	.word	0x40001800
 8004bd4:	40001c00 	.word	0x40001c00
 8004bd8:	40002000 	.word	0x40002000

08004bdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d101      	bne.n	8004bf4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	e05a      	b.n	8004caa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2202      	movs	r2, #2
 8004c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a21      	ldr	r2, [pc, #132]	; (8004cb8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d022      	beq.n	8004c7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c40:	d01d      	beq.n	8004c7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a1d      	ldr	r2, [pc, #116]	; (8004cbc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d018      	beq.n	8004c7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a1b      	ldr	r2, [pc, #108]	; (8004cc0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d013      	beq.n	8004c7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a1a      	ldr	r2, [pc, #104]	; (8004cc4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d00e      	beq.n	8004c7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a18      	ldr	r2, [pc, #96]	; (8004cc8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d009      	beq.n	8004c7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a17      	ldr	r2, [pc, #92]	; (8004ccc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d004      	beq.n	8004c7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a15      	ldr	r2, [pc, #84]	; (8004cd0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d10c      	bne.n	8004c98 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68ba      	ldr	r2, [r7, #8]
 8004c96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3714      	adds	r7, #20
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	40010000 	.word	0x40010000
 8004cbc:	40000400 	.word	0x40000400
 8004cc0:	40000800 	.word	0x40000800
 8004cc4:	40000c00 	.word	0x40000c00
 8004cc8:	40010400 	.word	0x40010400
 8004ccc:	40014000 	.word	0x40014000
 8004cd0:	40001800 	.word	0x40001800

08004cd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cf0:	bf00      	nop
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004cfc:	b084      	sub	sp, #16
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b084      	sub	sp, #16
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
 8004d06:	f107 001c 	add.w	r0, r7, #28
 8004d0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d122      	bne.n	8004d5a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004d28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d105      	bne.n	8004d4e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f001 fbee 	bl	8006530 <USB_CoreReset>
 8004d54:	4603      	mov	r3, r0
 8004d56:	73fb      	strb	r3, [r7, #15]
 8004d58:	e01a      	b.n	8004d90 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f001 fbe2 	bl	8006530 <USB_CoreReset>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004d70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d106      	bne.n	8004d84 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	639a      	str	r2, [r3, #56]	; 0x38
 8004d82:	e005      	b.n	8004d90 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d10b      	bne.n	8004dae <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f043 0206 	orr.w	r2, r3, #6
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f043 0220 	orr.w	r2, r3, #32
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3710      	adds	r7, #16
 8004db4:	46bd      	mov	sp, r7
 8004db6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004dba:	b004      	add	sp, #16
 8004dbc:	4770      	bx	lr
	...

08004dc0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b087      	sub	sp, #28
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004dce:	79fb      	ldrb	r3, [r7, #7]
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d165      	bne.n	8004ea0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	4a41      	ldr	r2, [pc, #260]	; (8004edc <USB_SetTurnaroundTime+0x11c>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d906      	bls.n	8004dea <USB_SetTurnaroundTime+0x2a>
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	4a40      	ldr	r2, [pc, #256]	; (8004ee0 <USB_SetTurnaroundTime+0x120>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d202      	bcs.n	8004dea <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004de4:	230f      	movs	r3, #15
 8004de6:	617b      	str	r3, [r7, #20]
 8004de8:	e062      	b.n	8004eb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	4a3c      	ldr	r2, [pc, #240]	; (8004ee0 <USB_SetTurnaroundTime+0x120>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d306      	bcc.n	8004e00 <USB_SetTurnaroundTime+0x40>
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	4a3b      	ldr	r2, [pc, #236]	; (8004ee4 <USB_SetTurnaroundTime+0x124>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d202      	bcs.n	8004e00 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004dfa:	230e      	movs	r3, #14
 8004dfc:	617b      	str	r3, [r7, #20]
 8004dfe:	e057      	b.n	8004eb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	4a38      	ldr	r2, [pc, #224]	; (8004ee4 <USB_SetTurnaroundTime+0x124>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d306      	bcc.n	8004e16 <USB_SetTurnaroundTime+0x56>
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	4a37      	ldr	r2, [pc, #220]	; (8004ee8 <USB_SetTurnaroundTime+0x128>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d202      	bcs.n	8004e16 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004e10:	230d      	movs	r3, #13
 8004e12:	617b      	str	r3, [r7, #20]
 8004e14:	e04c      	b.n	8004eb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	4a33      	ldr	r2, [pc, #204]	; (8004ee8 <USB_SetTurnaroundTime+0x128>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d306      	bcc.n	8004e2c <USB_SetTurnaroundTime+0x6c>
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	4a32      	ldr	r2, [pc, #200]	; (8004eec <USB_SetTurnaroundTime+0x12c>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d802      	bhi.n	8004e2c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004e26:	230c      	movs	r3, #12
 8004e28:	617b      	str	r3, [r7, #20]
 8004e2a:	e041      	b.n	8004eb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	4a2f      	ldr	r2, [pc, #188]	; (8004eec <USB_SetTurnaroundTime+0x12c>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d906      	bls.n	8004e42 <USB_SetTurnaroundTime+0x82>
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	4a2e      	ldr	r2, [pc, #184]	; (8004ef0 <USB_SetTurnaroundTime+0x130>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d802      	bhi.n	8004e42 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004e3c:	230b      	movs	r3, #11
 8004e3e:	617b      	str	r3, [r7, #20]
 8004e40:	e036      	b.n	8004eb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	4a2a      	ldr	r2, [pc, #168]	; (8004ef0 <USB_SetTurnaroundTime+0x130>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d906      	bls.n	8004e58 <USB_SetTurnaroundTime+0x98>
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	4a29      	ldr	r2, [pc, #164]	; (8004ef4 <USB_SetTurnaroundTime+0x134>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d802      	bhi.n	8004e58 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004e52:	230a      	movs	r3, #10
 8004e54:	617b      	str	r3, [r7, #20]
 8004e56:	e02b      	b.n	8004eb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	4a26      	ldr	r2, [pc, #152]	; (8004ef4 <USB_SetTurnaroundTime+0x134>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d906      	bls.n	8004e6e <USB_SetTurnaroundTime+0xae>
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	4a25      	ldr	r2, [pc, #148]	; (8004ef8 <USB_SetTurnaroundTime+0x138>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d202      	bcs.n	8004e6e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004e68:	2309      	movs	r3, #9
 8004e6a:	617b      	str	r3, [r7, #20]
 8004e6c:	e020      	b.n	8004eb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	4a21      	ldr	r2, [pc, #132]	; (8004ef8 <USB_SetTurnaroundTime+0x138>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d306      	bcc.n	8004e84 <USB_SetTurnaroundTime+0xc4>
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	4a20      	ldr	r2, [pc, #128]	; (8004efc <USB_SetTurnaroundTime+0x13c>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d802      	bhi.n	8004e84 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004e7e:	2308      	movs	r3, #8
 8004e80:	617b      	str	r3, [r7, #20]
 8004e82:	e015      	b.n	8004eb0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	4a1d      	ldr	r2, [pc, #116]	; (8004efc <USB_SetTurnaroundTime+0x13c>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d906      	bls.n	8004e9a <USB_SetTurnaroundTime+0xda>
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	4a1c      	ldr	r2, [pc, #112]	; (8004f00 <USB_SetTurnaroundTime+0x140>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d202      	bcs.n	8004e9a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004e94:	2307      	movs	r3, #7
 8004e96:	617b      	str	r3, [r7, #20]
 8004e98:	e00a      	b.n	8004eb0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004e9a:	2306      	movs	r3, #6
 8004e9c:	617b      	str	r3, [r7, #20]
 8004e9e:	e007      	b.n	8004eb0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004ea0:	79fb      	ldrb	r3, [r7, #7]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d102      	bne.n	8004eac <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004ea6:	2309      	movs	r3, #9
 8004ea8:	617b      	str	r3, [r7, #20]
 8004eaa:	e001      	b.n	8004eb0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004eac:	2309      	movs	r3, #9
 8004eae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	68da      	ldr	r2, [r3, #12]
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	029b      	lsls	r3, r3, #10
 8004ec4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004ec8:	431a      	orrs	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	371c      	adds	r7, #28
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	00d8acbf 	.word	0x00d8acbf
 8004ee0:	00e4e1c0 	.word	0x00e4e1c0
 8004ee4:	00f42400 	.word	0x00f42400
 8004ee8:	01067380 	.word	0x01067380
 8004eec:	011a499f 	.word	0x011a499f
 8004ef0:	01312cff 	.word	0x01312cff
 8004ef4:	014ca43f 	.word	0x014ca43f
 8004ef8:	016e3600 	.word	0x016e3600
 8004efc:	01a6ab1f 	.word	0x01a6ab1f
 8004f00:	01e84800 	.word	0x01e84800

08004f04 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f043 0201 	orr.w	r2, r3, #1
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	370c      	adds	r7, #12
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr

08004f26 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f26:	b480      	push	{r7}
 8004f28:	b083      	sub	sp, #12
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f023 0201 	bic.w	r2, r3, #1
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	460b      	mov	r3, r1
 8004f52:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f54:	2300      	movs	r3, #0
 8004f56:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f64:	78fb      	ldrb	r3, [r7, #3]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d115      	bne.n	8004f96 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f76:	2001      	movs	r0, #1
 8004f78:	f7fc f93c 	bl	80011f4 <HAL_Delay>
      ms++;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	3301      	adds	r3, #1
 8004f80:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f001 fa45 	bl	8006412 <USB_GetMode>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d01e      	beq.n	8004fcc <USB_SetCurrentMode+0x84>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2b31      	cmp	r3, #49	; 0x31
 8004f92:	d9f0      	bls.n	8004f76 <USB_SetCurrentMode+0x2e>
 8004f94:	e01a      	b.n	8004fcc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f96:	78fb      	ldrb	r3, [r7, #3]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d115      	bne.n	8004fc8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004fa8:	2001      	movs	r0, #1
 8004faa:	f7fc f923 	bl	80011f4 <HAL_Delay>
      ms++;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f001 fa2c 	bl	8006412 <USB_GetMode>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d005      	beq.n	8004fcc <USB_SetCurrentMode+0x84>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2b31      	cmp	r3, #49	; 0x31
 8004fc4:	d9f0      	bls.n	8004fa8 <USB_SetCurrentMode+0x60>
 8004fc6:	e001      	b.n	8004fcc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e005      	b.n	8004fd8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2b32      	cmp	r3, #50	; 0x32
 8004fd0:	d101      	bne.n	8004fd6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e000      	b.n	8004fd8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3710      	adds	r7, #16
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fe0:	b084      	sub	sp, #16
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b086      	sub	sp, #24
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
 8004fea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004fee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	613b      	str	r3, [r7, #16]
 8004ffe:	e009      	b.n	8005014 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	3340      	adds	r3, #64	; 0x40
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	4413      	add	r3, r2
 800500a:	2200      	movs	r2, #0
 800500c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	3301      	adds	r3, #1
 8005012:	613b      	str	r3, [r7, #16]
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	2b0e      	cmp	r3, #14
 8005018:	d9f2      	bls.n	8005000 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800501a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800501c:	2b00      	cmp	r3, #0
 800501e:	d11c      	bne.n	800505a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800502e:	f043 0302 	orr.w	r3, r3, #2
 8005032:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005038:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005044:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005050:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	639a      	str	r2, [r3, #56]	; 0x38
 8005058:	e00b      	b.n	8005072 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005078:	461a      	mov	r2, r3
 800507a:	2300      	movs	r3, #0
 800507c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005084:	4619      	mov	r1, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800508c:	461a      	mov	r2, r3
 800508e:	680b      	ldr	r3, [r1, #0]
 8005090:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005094:	2b01      	cmp	r3, #1
 8005096:	d10c      	bne.n	80050b2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800509a:	2b00      	cmp	r3, #0
 800509c:	d104      	bne.n	80050a8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800509e:	2100      	movs	r1, #0
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 f965 	bl	8005370 <USB_SetDevSpeed>
 80050a6:	e008      	b.n	80050ba <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80050a8:	2101      	movs	r1, #1
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 f960 	bl	8005370 <USB_SetDevSpeed>
 80050b0:	e003      	b.n	80050ba <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80050b2:	2103      	movs	r1, #3
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 f95b 	bl	8005370 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80050ba:	2110      	movs	r1, #16
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 f8f3 	bl	80052a8 <USB_FlushTxFifo>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d001      	beq.n	80050cc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 f91f 	bl	8005310 <USB_FlushRxFifo>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d001      	beq.n	80050dc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050e2:	461a      	mov	r2, r3
 80050e4:	2300      	movs	r3, #0
 80050e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ee:	461a      	mov	r2, r3
 80050f0:	2300      	movs	r3, #0
 80050f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050fa:	461a      	mov	r2, r3
 80050fc:	2300      	movs	r3, #0
 80050fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005100:	2300      	movs	r3, #0
 8005102:	613b      	str	r3, [r7, #16]
 8005104:	e043      	b.n	800518e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	015a      	lsls	r2, r3, #5
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	4413      	add	r3, r2
 800510e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005118:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800511c:	d118      	bne.n	8005150 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10a      	bne.n	800513a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	015a      	lsls	r2, r3, #5
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	4413      	add	r3, r2
 800512c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005130:	461a      	mov	r2, r3
 8005132:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005136:	6013      	str	r3, [r2, #0]
 8005138:	e013      	b.n	8005162 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	015a      	lsls	r2, r3, #5
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	4413      	add	r3, r2
 8005142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005146:	461a      	mov	r2, r3
 8005148:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800514c:	6013      	str	r3, [r2, #0]
 800514e:	e008      	b.n	8005162 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	015a      	lsls	r2, r3, #5
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	4413      	add	r3, r2
 8005158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800515c:	461a      	mov	r2, r3
 800515e:	2300      	movs	r3, #0
 8005160:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	015a      	lsls	r2, r3, #5
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	4413      	add	r3, r2
 800516a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800516e:	461a      	mov	r2, r3
 8005170:	2300      	movs	r3, #0
 8005172:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	015a      	lsls	r2, r3, #5
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	4413      	add	r3, r2
 800517c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005180:	461a      	mov	r2, r3
 8005182:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005186:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	3301      	adds	r3, #1
 800518c:	613b      	str	r3, [r7, #16]
 800518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005190:	693a      	ldr	r2, [r7, #16]
 8005192:	429a      	cmp	r2, r3
 8005194:	d3b7      	bcc.n	8005106 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005196:	2300      	movs	r3, #0
 8005198:	613b      	str	r3, [r7, #16]
 800519a:	e043      	b.n	8005224 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	015a      	lsls	r2, r3, #5
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	4413      	add	r3, r2
 80051a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051b2:	d118      	bne.n	80051e6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d10a      	bne.n	80051d0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	015a      	lsls	r2, r3, #5
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	4413      	add	r3, r2
 80051c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c6:	461a      	mov	r2, r3
 80051c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80051cc:	6013      	str	r3, [r2, #0]
 80051ce:	e013      	b.n	80051f8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	015a      	lsls	r2, r3, #5
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051dc:	461a      	mov	r2, r3
 80051de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051e2:	6013      	str	r3, [r2, #0]
 80051e4:	e008      	b.n	80051f8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	015a      	lsls	r2, r3, #5
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	4413      	add	r3, r2
 80051ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f2:	461a      	mov	r2, r3
 80051f4:	2300      	movs	r3, #0
 80051f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	015a      	lsls	r2, r3, #5
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4413      	add	r3, r2
 8005200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005204:	461a      	mov	r2, r3
 8005206:	2300      	movs	r3, #0
 8005208:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	015a      	lsls	r2, r3, #5
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	4413      	add	r3, r2
 8005212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005216:	461a      	mov	r2, r3
 8005218:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800521c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	3301      	adds	r3, #1
 8005222:	613b      	str	r3, [r7, #16]
 8005224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	429a      	cmp	r2, r3
 800522a:	d3b7      	bcc.n	800519c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800523a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800523e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800524c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800524e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005250:	2b00      	cmp	r3, #0
 8005252:	d105      	bne.n	8005260 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	f043 0210 	orr.w	r2, r3, #16
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	699a      	ldr	r2, [r3, #24]
 8005264:	4b0f      	ldr	r3, [pc, #60]	; (80052a4 <USB_DevInit+0x2c4>)
 8005266:	4313      	orrs	r3, r2
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800526c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800526e:	2b00      	cmp	r3, #0
 8005270:	d005      	beq.n	800527e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	f043 0208 	orr.w	r2, r3, #8
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800527e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005280:	2b01      	cmp	r3, #1
 8005282:	d107      	bne.n	8005294 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800528c:	f043 0304 	orr.w	r3, r3, #4
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005294:	7dfb      	ldrb	r3, [r7, #23]
}
 8005296:	4618      	mov	r0, r3
 8005298:	3718      	adds	r7, #24
 800529a:	46bd      	mov	sp, r7
 800529c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052a0:	b004      	add	sp, #16
 80052a2:	4770      	bx	lr
 80052a4:	803c3800 	.word	0x803c3800

080052a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80052b2:	2300      	movs	r3, #0
 80052b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	3301      	adds	r3, #1
 80052ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	4a13      	ldr	r2, [pc, #76]	; (800530c <USB_FlushTxFifo+0x64>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d901      	bls.n	80052c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e01b      	b.n	8005300 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	daf2      	bge.n	80052b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80052d0:	2300      	movs	r3, #0
 80052d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	019b      	lsls	r3, r3, #6
 80052d8:	f043 0220 	orr.w	r2, r3, #32
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	3301      	adds	r3, #1
 80052e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	4a08      	ldr	r2, [pc, #32]	; (800530c <USB_FlushTxFifo+0x64>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d901      	bls.n	80052f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e006      	b.n	8005300 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	f003 0320 	and.w	r3, r3, #32
 80052fa:	2b20      	cmp	r3, #32
 80052fc:	d0f0      	beq.n	80052e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3714      	adds	r7, #20
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	00030d40 	.word	0x00030d40

08005310 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005318:	2300      	movs	r3, #0
 800531a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	3301      	adds	r3, #1
 8005320:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	4a11      	ldr	r2, [pc, #68]	; (800536c <USB_FlushRxFifo+0x5c>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d901      	bls.n	800532e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e018      	b.n	8005360 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	2b00      	cmp	r3, #0
 8005334:	daf2      	bge.n	800531c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005336:	2300      	movs	r3, #0
 8005338:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2210      	movs	r2, #16
 800533e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	3301      	adds	r3, #1
 8005344:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	4a08      	ldr	r2, [pc, #32]	; (800536c <USB_FlushRxFifo+0x5c>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d901      	bls.n	8005352 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e006      	b.n	8005360 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	f003 0310 	and.w	r3, r3, #16
 800535a:	2b10      	cmp	r3, #16
 800535c:	d0f0      	beq.n	8005340 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3714      	adds	r7, #20
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr
 800536c:	00030d40 	.word	0x00030d40

08005370 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	460b      	mov	r3, r1
 800537a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	78fb      	ldrb	r3, [r7, #3]
 800538a:	68f9      	ldr	r1, [r7, #12]
 800538c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005390:	4313      	orrs	r3, r2
 8005392:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3714      	adds	r7, #20
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr

080053a2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b087      	sub	sp, #28
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f003 0306 	and.w	r3, r3, #6
 80053ba:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d102      	bne.n	80053c8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80053c2:	2300      	movs	r3, #0
 80053c4:	75fb      	strb	r3, [r7, #23]
 80053c6:	e00a      	b.n	80053de <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d002      	beq.n	80053d4 <USB_GetDevSpeed+0x32>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2b06      	cmp	r3, #6
 80053d2:	d102      	bne.n	80053da <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80053d4:	2302      	movs	r3, #2
 80053d6:	75fb      	strb	r3, [r7, #23]
 80053d8:	e001      	b.n	80053de <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80053da:	230f      	movs	r3, #15
 80053dc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80053de:	7dfb      	ldrb	r3, [r7, #23]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	371c      	adds	r7, #28
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	785b      	ldrb	r3, [r3, #1]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d13a      	bne.n	800547e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800540e:	69da      	ldr	r2, [r3, #28]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	f003 030f 	and.w	r3, r3, #15
 8005418:	2101      	movs	r1, #1
 800541a:	fa01 f303 	lsl.w	r3, r1, r3
 800541e:	b29b      	uxth	r3, r3
 8005420:	68f9      	ldr	r1, [r7, #12]
 8005422:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005426:	4313      	orrs	r3, r2
 8005428:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	015a      	lsls	r2, r3, #5
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	4413      	add	r3, r2
 8005432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d155      	bne.n	80054ec <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	015a      	lsls	r2, r3, #5
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	4413      	add	r3, r2
 8005448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	791b      	ldrb	r3, [r3, #4]
 800545a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800545c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	059b      	lsls	r3, r3, #22
 8005462:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005464:	4313      	orrs	r3, r2
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	0151      	lsls	r1, r2, #5
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	440a      	add	r2, r1
 800546e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005472:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800547a:	6013      	str	r3, [r2, #0]
 800547c:	e036      	b.n	80054ec <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005484:	69da      	ldr	r2, [r3, #28]
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	f003 030f 	and.w	r3, r3, #15
 800548e:	2101      	movs	r1, #1
 8005490:	fa01 f303 	lsl.w	r3, r1, r3
 8005494:	041b      	lsls	r3, r3, #16
 8005496:	68f9      	ldr	r1, [r7, #12]
 8005498:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800549c:	4313      	orrs	r3, r2
 800549e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	015a      	lsls	r2, r3, #5
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d11a      	bne.n	80054ec <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	015a      	lsls	r2, r3, #5
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	4413      	add	r3, r2
 80054be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	791b      	ldrb	r3, [r3, #4]
 80054d0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80054d2:	430b      	orrs	r3, r1
 80054d4:	4313      	orrs	r3, r2
 80054d6:	68ba      	ldr	r2, [r7, #8]
 80054d8:	0151      	lsls	r1, r2, #5
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	440a      	add	r2, r1
 80054de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054ea:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3714      	adds	r7, #20
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr
	...

080054fc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	785b      	ldrb	r3, [r3, #1]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d161      	bne.n	80055dc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	015a      	lsls	r2, r3, #5
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	4413      	add	r3, r2
 8005520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800552a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800552e:	d11f      	bne.n	8005570 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	015a      	lsls	r2, r3, #5
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	4413      	add	r3, r2
 8005538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	0151      	lsls	r1, r2, #5
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	440a      	add	r2, r1
 8005546:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800554a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800554e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	015a      	lsls	r2, r3, #5
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	4413      	add	r3, r2
 8005558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68ba      	ldr	r2, [r7, #8]
 8005560:	0151      	lsls	r1, r2, #5
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	440a      	add	r2, r1
 8005566:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800556a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800556e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005576:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	f003 030f 	and.w	r3, r3, #15
 8005580:	2101      	movs	r1, #1
 8005582:	fa01 f303 	lsl.w	r3, r1, r3
 8005586:	b29b      	uxth	r3, r3
 8005588:	43db      	mvns	r3, r3
 800558a:	68f9      	ldr	r1, [r7, #12]
 800558c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005590:	4013      	ands	r3, r2
 8005592:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800559a:	69da      	ldr	r2, [r3, #28]
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	f003 030f 	and.w	r3, r3, #15
 80055a4:	2101      	movs	r1, #1
 80055a6:	fa01 f303 	lsl.w	r3, r1, r3
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	43db      	mvns	r3, r3
 80055ae:	68f9      	ldr	r1, [r7, #12]
 80055b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055b4:	4013      	ands	r3, r2
 80055b6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	0159      	lsls	r1, r3, #5
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	440b      	add	r3, r1
 80055ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d2:	4619      	mov	r1, r3
 80055d4:	4b35      	ldr	r3, [pc, #212]	; (80056ac <USB_DeactivateEndpoint+0x1b0>)
 80055d6:	4013      	ands	r3, r2
 80055d8:	600b      	str	r3, [r1, #0]
 80055da:	e060      	b.n	800569e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	015a      	lsls	r2, r3, #5
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	4413      	add	r3, r2
 80055e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055f2:	d11f      	bne.n	8005634 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	015a      	lsls	r2, r3, #5
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	4413      	add	r3, r2
 80055fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68ba      	ldr	r2, [r7, #8]
 8005604:	0151      	lsls	r1, r2, #5
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	440a      	add	r2, r1
 800560a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800560e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005612:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	015a      	lsls	r2, r3, #5
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	4413      	add	r3, r2
 800561c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68ba      	ldr	r2, [r7, #8]
 8005624:	0151      	lsls	r1, r2, #5
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	440a      	add	r2, r1
 800562a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800562e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005632:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800563a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	f003 030f 	and.w	r3, r3, #15
 8005644:	2101      	movs	r1, #1
 8005646:	fa01 f303 	lsl.w	r3, r1, r3
 800564a:	041b      	lsls	r3, r3, #16
 800564c:	43db      	mvns	r3, r3
 800564e:	68f9      	ldr	r1, [r7, #12]
 8005650:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005654:	4013      	ands	r3, r2
 8005656:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800565e:	69da      	ldr	r2, [r3, #28]
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	f003 030f 	and.w	r3, r3, #15
 8005668:	2101      	movs	r1, #1
 800566a:	fa01 f303 	lsl.w	r3, r1, r3
 800566e:	041b      	lsls	r3, r3, #16
 8005670:	43db      	mvns	r3, r3
 8005672:	68f9      	ldr	r1, [r7, #12]
 8005674:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005678:	4013      	ands	r3, r2
 800567a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	015a      	lsls	r2, r3, #5
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	4413      	add	r3, r2
 8005684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	0159      	lsls	r1, r3, #5
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	440b      	add	r3, r1
 8005692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005696:	4619      	mov	r1, r3
 8005698:	4b05      	ldr	r3, [pc, #20]	; (80056b0 <USB_DeactivateEndpoint+0x1b4>)
 800569a:	4013      	ands	r3, r2
 800569c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800569e:	2300      	movs	r3, #0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3714      	adds	r7, #20
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr
 80056ac:	ec337800 	.word	0xec337800
 80056b0:	eff37800 	.word	0xeff37800

080056b4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b08a      	sub	sp, #40	; 0x28
 80056b8:	af02      	add	r7, sp, #8
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	4613      	mov	r3, r2
 80056c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	785b      	ldrb	r3, [r3, #1]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	f040 815c 	bne.w	800598e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d132      	bne.n	8005744 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	015a      	lsls	r2, r3, #5
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	4413      	add	r3, r2
 80056e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	69ba      	ldr	r2, [r7, #24]
 80056ee:	0151      	lsls	r1, r2, #5
 80056f0:	69fa      	ldr	r2, [r7, #28]
 80056f2:	440a      	add	r2, r1
 80056f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005700:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	015a      	lsls	r2, r3, #5
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	4413      	add	r3, r2
 800570a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	69ba      	ldr	r2, [r7, #24]
 8005712:	0151      	lsls	r1, r2, #5
 8005714:	69fa      	ldr	r2, [r7, #28]
 8005716:	440a      	add	r2, r1
 8005718:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800571c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005720:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	015a      	lsls	r2, r3, #5
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	4413      	add	r3, r2
 800572a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	69ba      	ldr	r2, [r7, #24]
 8005732:	0151      	lsls	r1, r2, #5
 8005734:	69fa      	ldr	r2, [r7, #28]
 8005736:	440a      	add	r2, r1
 8005738:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800573c:	0cdb      	lsrs	r3, r3, #19
 800573e:	04db      	lsls	r3, r3, #19
 8005740:	6113      	str	r3, [r2, #16]
 8005742:	e074      	b.n	800582e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	015a      	lsls	r2, r3, #5
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	4413      	add	r3, r2
 800574c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	69ba      	ldr	r2, [r7, #24]
 8005754:	0151      	lsls	r1, r2, #5
 8005756:	69fa      	ldr	r2, [r7, #28]
 8005758:	440a      	add	r2, r1
 800575a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800575e:	0cdb      	lsrs	r3, r3, #19
 8005760:	04db      	lsls	r3, r3, #19
 8005762:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	015a      	lsls	r2, r3, #5
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	4413      	add	r3, r2
 800576c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	69ba      	ldr	r2, [r7, #24]
 8005774:	0151      	lsls	r1, r2, #5
 8005776:	69fa      	ldr	r2, [r7, #28]
 8005778:	440a      	add	r2, r1
 800577a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800577e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005782:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005786:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	015a      	lsls	r2, r3, #5
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	4413      	add	r3, r2
 8005790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005794:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	6999      	ldr	r1, [r3, #24]
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	440b      	add	r3, r1
 80057a0:	1e59      	subs	r1, r3, #1
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80057aa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80057ac:	4b9d      	ldr	r3, [pc, #628]	; (8005a24 <USB_EPStartXfer+0x370>)
 80057ae:	400b      	ands	r3, r1
 80057b0:	69b9      	ldr	r1, [r7, #24]
 80057b2:	0148      	lsls	r0, r1, #5
 80057b4:	69f9      	ldr	r1, [r7, #28]
 80057b6:	4401      	add	r1, r0
 80057b8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80057bc:	4313      	orrs	r3, r2
 80057be:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	015a      	lsls	r2, r3, #5
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	4413      	add	r3, r2
 80057c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057cc:	691a      	ldr	r2, [r3, #16]
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057d6:	69b9      	ldr	r1, [r7, #24]
 80057d8:	0148      	lsls	r0, r1, #5
 80057da:	69f9      	ldr	r1, [r7, #28]
 80057dc:	4401      	add	r1, r0
 80057de:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80057e2:	4313      	orrs	r3, r2
 80057e4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	791b      	ldrb	r3, [r3, #4]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d11f      	bne.n	800582e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	015a      	lsls	r2, r3, #5
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	4413      	add	r3, r2
 80057f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	69ba      	ldr	r2, [r7, #24]
 80057fe:	0151      	lsls	r1, r2, #5
 8005800:	69fa      	ldr	r2, [r7, #28]
 8005802:	440a      	add	r2, r1
 8005804:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005808:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800580c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	015a      	lsls	r2, r3, #5
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	4413      	add	r3, r2
 8005816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	69ba      	ldr	r2, [r7, #24]
 800581e:	0151      	lsls	r1, r2, #5
 8005820:	69fa      	ldr	r2, [r7, #28]
 8005822:	440a      	add	r2, r1
 8005824:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005828:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800582c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800582e:	79fb      	ldrb	r3, [r7, #7]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d14b      	bne.n	80058cc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	695b      	ldr	r3, [r3, #20]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d009      	beq.n	8005850 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	015a      	lsls	r2, r3, #5
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	4413      	add	r3, r2
 8005844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005848:	461a      	mov	r2, r3
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	791b      	ldrb	r3, [r3, #4]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d128      	bne.n	80058aa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005864:	2b00      	cmp	r3, #0
 8005866:	d110      	bne.n	800588a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	015a      	lsls	r2, r3, #5
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	4413      	add	r3, r2
 8005870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	69ba      	ldr	r2, [r7, #24]
 8005878:	0151      	lsls	r1, r2, #5
 800587a:	69fa      	ldr	r2, [r7, #28]
 800587c:	440a      	add	r2, r1
 800587e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005882:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005886:	6013      	str	r3, [r2, #0]
 8005888:	e00f      	b.n	80058aa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	015a      	lsls	r2, r3, #5
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	4413      	add	r3, r2
 8005892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	69ba      	ldr	r2, [r7, #24]
 800589a:	0151      	lsls	r1, r2, #5
 800589c:	69fa      	ldr	r2, [r7, #28]
 800589e:	440a      	add	r2, r1
 80058a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058a8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	015a      	lsls	r2, r3, #5
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	4413      	add	r3, r2
 80058b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	69ba      	ldr	r2, [r7, #24]
 80058ba:	0151      	lsls	r1, r2, #5
 80058bc:	69fa      	ldr	r2, [r7, #28]
 80058be:	440a      	add	r2, r1
 80058c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058c8:	6013      	str	r3, [r2, #0]
 80058ca:	e133      	b.n	8005b34 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	015a      	lsls	r2, r3, #5
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	4413      	add	r3, r2
 80058d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	69ba      	ldr	r2, [r7, #24]
 80058dc:	0151      	lsls	r1, r2, #5
 80058de:	69fa      	ldr	r2, [r7, #28]
 80058e0:	440a      	add	r2, r1
 80058e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058ea:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	791b      	ldrb	r3, [r3, #4]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d015      	beq.n	8005920 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	f000 811b 	beq.w	8005b34 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005904:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	f003 030f 	and.w	r3, r3, #15
 800590e:	2101      	movs	r1, #1
 8005910:	fa01 f303 	lsl.w	r3, r1, r3
 8005914:	69f9      	ldr	r1, [r7, #28]
 8005916:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800591a:	4313      	orrs	r3, r2
 800591c:	634b      	str	r3, [r1, #52]	; 0x34
 800591e:	e109      	b.n	8005b34 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800592c:	2b00      	cmp	r3, #0
 800592e:	d110      	bne.n	8005952 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	015a      	lsls	r2, r3, #5
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	4413      	add	r3, r2
 8005938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	69ba      	ldr	r2, [r7, #24]
 8005940:	0151      	lsls	r1, r2, #5
 8005942:	69fa      	ldr	r2, [r7, #28]
 8005944:	440a      	add	r2, r1
 8005946:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800594a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800594e:	6013      	str	r3, [r2, #0]
 8005950:	e00f      	b.n	8005972 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	015a      	lsls	r2, r3, #5
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	4413      	add	r3, r2
 800595a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	69ba      	ldr	r2, [r7, #24]
 8005962:	0151      	lsls	r1, r2, #5
 8005964:	69fa      	ldr	r2, [r7, #28]
 8005966:	440a      	add	r2, r1
 8005968:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800596c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005970:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	6919      	ldr	r1, [r3, #16]
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	781a      	ldrb	r2, [r3, #0]
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	699b      	ldr	r3, [r3, #24]
 800597e:	b298      	uxth	r0, r3
 8005980:	79fb      	ldrb	r3, [r7, #7]
 8005982:	9300      	str	r3, [sp, #0]
 8005984:	4603      	mov	r3, r0
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f000 fade 	bl	8005f48 <USB_WritePacket>
 800598c:	e0d2      	b.n	8005b34 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	015a      	lsls	r2, r3, #5
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	4413      	add	r3, r2
 8005996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	69ba      	ldr	r2, [r7, #24]
 800599e:	0151      	lsls	r1, r2, #5
 80059a0:	69fa      	ldr	r2, [r7, #28]
 80059a2:	440a      	add	r2, r1
 80059a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059a8:	0cdb      	lsrs	r3, r3, #19
 80059aa:	04db      	lsls	r3, r3, #19
 80059ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	015a      	lsls	r2, r3, #5
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	4413      	add	r3, r2
 80059b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	69ba      	ldr	r2, [r7, #24]
 80059be:	0151      	lsls	r1, r2, #5
 80059c0:	69fa      	ldr	r2, [r7, #28]
 80059c2:	440a      	add	r2, r1
 80059c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059d0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d126      	bne.n	8005a28 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	015a      	lsls	r2, r3, #5
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	4413      	add	r3, r2
 80059e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e6:	691a      	ldr	r2, [r3, #16]
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059f0:	69b9      	ldr	r1, [r7, #24]
 80059f2:	0148      	lsls	r0, r1, #5
 80059f4:	69f9      	ldr	r1, [r7, #28]
 80059f6:	4401      	add	r1, r0
 80059f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059fc:	4313      	orrs	r3, r2
 80059fe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	015a      	lsls	r2, r3, #5
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	4413      	add	r3, r2
 8005a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	69ba      	ldr	r2, [r7, #24]
 8005a10:	0151      	lsls	r1, r2, #5
 8005a12:	69fa      	ldr	r2, [r7, #28]
 8005a14:	440a      	add	r2, r1
 8005a16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a1e:	6113      	str	r3, [r2, #16]
 8005a20:	e03a      	b.n	8005a98 <USB_EPStartXfer+0x3e4>
 8005a22:	bf00      	nop
 8005a24:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	699a      	ldr	r2, [r3, #24]
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	4413      	add	r3, r2
 8005a32:	1e5a      	subs	r2, r3, #1
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a3c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	8afa      	ldrh	r2, [r7, #22]
 8005a44:	fb03 f202 	mul.w	r2, r3, r2
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	015a      	lsls	r2, r3, #5
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	4413      	add	r3, r2
 8005a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a58:	691a      	ldr	r2, [r3, #16]
 8005a5a:	8afb      	ldrh	r3, [r7, #22]
 8005a5c:	04d9      	lsls	r1, r3, #19
 8005a5e:	4b38      	ldr	r3, [pc, #224]	; (8005b40 <USB_EPStartXfer+0x48c>)
 8005a60:	400b      	ands	r3, r1
 8005a62:	69b9      	ldr	r1, [r7, #24]
 8005a64:	0148      	lsls	r0, r1, #5
 8005a66:	69f9      	ldr	r1, [r7, #28]
 8005a68:	4401      	add	r1, r0
 8005a6a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	015a      	lsls	r2, r3, #5
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a7e:	691a      	ldr	r2, [r3, #16]
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	69db      	ldr	r3, [r3, #28]
 8005a84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a88:	69b9      	ldr	r1, [r7, #24]
 8005a8a:	0148      	lsls	r0, r1, #5
 8005a8c:	69f9      	ldr	r1, [r7, #28]
 8005a8e:	4401      	add	r1, r0
 8005a90:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a94:	4313      	orrs	r3, r2
 8005a96:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005a98:	79fb      	ldrb	r3, [r7, #7]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d10d      	bne.n	8005aba <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d009      	beq.n	8005aba <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	6919      	ldr	r1, [r3, #16]
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	015a      	lsls	r2, r3, #5
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab6:	460a      	mov	r2, r1
 8005ab8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	791b      	ldrb	r3, [r3, #4]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d128      	bne.n	8005b14 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d110      	bne.n	8005af4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	015a      	lsls	r2, r3, #5
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	4413      	add	r3, r2
 8005ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	69ba      	ldr	r2, [r7, #24]
 8005ae2:	0151      	lsls	r1, r2, #5
 8005ae4:	69fa      	ldr	r2, [r7, #28]
 8005ae6:	440a      	add	r2, r1
 8005ae8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005af0:	6013      	str	r3, [r2, #0]
 8005af2:	e00f      	b.n	8005b14 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	015a      	lsls	r2, r3, #5
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	4413      	add	r3, r2
 8005afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	69ba      	ldr	r2, [r7, #24]
 8005b04:	0151      	lsls	r1, r2, #5
 8005b06:	69fa      	ldr	r2, [r7, #28]
 8005b08:	440a      	add	r2, r1
 8005b0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b12:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	015a      	lsls	r2, r3, #5
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	69ba      	ldr	r2, [r7, #24]
 8005b24:	0151      	lsls	r1, r2, #5
 8005b26:	69fa      	ldr	r2, [r7, #28]
 8005b28:	440a      	add	r2, r1
 8005b2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b2e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3720      	adds	r7, #32
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	1ff80000 	.word	0x1ff80000

08005b44 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b087      	sub	sp, #28
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	4613      	mov	r3, r2
 8005b50:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	785b      	ldrb	r3, [r3, #1]
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	f040 80ce 	bne.w	8005d02 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d132      	bne.n	8005bd4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	015a      	lsls	r2, r3, #5
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	4413      	add	r3, r2
 8005b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	0151      	lsls	r1, r2, #5
 8005b80:	697a      	ldr	r2, [r7, #20]
 8005b82:	440a      	add	r2, r1
 8005b84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b88:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b8c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	015a      	lsls	r2, r3, #5
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	4413      	add	r3, r2
 8005b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	693a      	ldr	r2, [r7, #16]
 8005ba2:	0151      	lsls	r1, r2, #5
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	440a      	add	r2, r1
 8005ba8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bb0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	015a      	lsls	r2, r3, #5
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	4413      	add	r3, r2
 8005bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	693a      	ldr	r2, [r7, #16]
 8005bc2:	0151      	lsls	r1, r2, #5
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	440a      	add	r2, r1
 8005bc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bcc:	0cdb      	lsrs	r3, r3, #19
 8005bce:	04db      	lsls	r3, r3, #19
 8005bd0:	6113      	str	r3, [r2, #16]
 8005bd2:	e04e      	b.n	8005c72 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	015a      	lsls	r2, r3, #5
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	4413      	add	r3, r2
 8005bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	0151      	lsls	r1, r2, #5
 8005be6:	697a      	ldr	r2, [r7, #20]
 8005be8:	440a      	add	r2, r1
 8005bea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bee:	0cdb      	lsrs	r3, r3, #19
 8005bf0:	04db      	lsls	r3, r3, #19
 8005bf2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	015a      	lsls	r2, r3, #5
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	693a      	ldr	r2, [r7, #16]
 8005c04:	0151      	lsls	r1, r2, #5
 8005c06:	697a      	ldr	r2, [r7, #20]
 8005c08:	440a      	add	r2, r1
 8005c0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c0e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c12:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c16:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	699a      	ldr	r2, [r3, #24]
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d903      	bls.n	8005c2c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	68da      	ldr	r2, [r3, #12]
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	015a      	lsls	r2, r3, #5
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	4413      	add	r3, r2
 8005c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	693a      	ldr	r2, [r7, #16]
 8005c3c:	0151      	lsls	r1, r2, #5
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	440a      	add	r2, r1
 8005c42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	015a      	lsls	r2, r3, #5
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	4413      	add	r3, r2
 8005c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c58:	691a      	ldr	r2, [r3, #16]
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c62:	6939      	ldr	r1, [r7, #16]
 8005c64:	0148      	lsls	r0, r1, #5
 8005c66:	6979      	ldr	r1, [r7, #20]
 8005c68:	4401      	add	r1, r0
 8005c6a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005c72:	79fb      	ldrb	r3, [r7, #7]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d11e      	bne.n	8005cb6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	695b      	ldr	r3, [r3, #20]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d009      	beq.n	8005c94 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	015a      	lsls	r2, r3, #5
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	4413      	add	r3, r2
 8005c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	695b      	ldr	r3, [r3, #20]
 8005c92:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	015a      	lsls	r2, r3, #5
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	0151      	lsls	r1, r2, #5
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	440a      	add	r2, r1
 8005caa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005cb2:	6013      	str	r3, [r2, #0]
 8005cb4:	e097      	b.n	8005de6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	015a      	lsls	r2, r3, #5
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	0151      	lsls	r1, r2, #5
 8005cc8:	697a      	ldr	r2, [r7, #20]
 8005cca:	440a      	add	r2, r1
 8005ccc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cd0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005cd4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	f000 8083 	beq.w	8005de6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	f003 030f 	and.w	r3, r3, #15
 8005cf0:	2101      	movs	r1, #1
 8005cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8005cf6:	6979      	ldr	r1, [r7, #20]
 8005cf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	634b      	str	r3, [r1, #52]	; 0x34
 8005d00:	e071      	b.n	8005de6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	015a      	lsls	r2, r3, #5
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	4413      	add	r3, r2
 8005d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	0151      	lsls	r1, r2, #5
 8005d14:	697a      	ldr	r2, [r7, #20]
 8005d16:	440a      	add	r2, r1
 8005d18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d1c:	0cdb      	lsrs	r3, r3, #19
 8005d1e:	04db      	lsls	r3, r3, #19
 8005d20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	015a      	lsls	r2, r3, #5
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	4413      	add	r3, r2
 8005d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	0151      	lsls	r1, r2, #5
 8005d34:	697a      	ldr	r2, [r7, #20]
 8005d36:	440a      	add	r2, r1
 8005d38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d3c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d40:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d44:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	699b      	ldr	r3, [r3, #24]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d003      	beq.n	8005d56 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	68da      	ldr	r2, [r3, #12]
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	68da      	ldr	r2, [r3, #12]
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	015a      	lsls	r2, r3, #5
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	4413      	add	r3, r2
 8005d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	0151      	lsls	r1, r2, #5
 8005d70:	697a      	ldr	r2, [r7, #20]
 8005d72:	440a      	add	r2, r1
 8005d74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d7c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	015a      	lsls	r2, r3, #5
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	4413      	add	r3, r2
 8005d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d8a:	691a      	ldr	r2, [r3, #16]
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	69db      	ldr	r3, [r3, #28]
 8005d90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d94:	6939      	ldr	r1, [r7, #16]
 8005d96:	0148      	lsls	r0, r1, #5
 8005d98:	6979      	ldr	r1, [r7, #20]
 8005d9a:	4401      	add	r1, r0
 8005d9c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005da0:	4313      	orrs	r3, r2
 8005da2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005da4:	79fb      	ldrb	r3, [r7, #7]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d10d      	bne.n	8005dc6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d009      	beq.n	8005dc6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	6919      	ldr	r1, [r3, #16]
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	015a      	lsls	r2, r3, #5
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc2:	460a      	mov	r2, r1
 8005dc4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	015a      	lsls	r2, r3, #5
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	4413      	add	r3, r2
 8005dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	0151      	lsls	r1, r2, #5
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	440a      	add	r2, r1
 8005ddc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005de0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005de4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	371c      	adds	r7, #28
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b087      	sub	sp, #28
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e02:	2300      	movs	r3, #0
 8005e04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	785b      	ldrb	r3, [r3, #1]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d14a      	bne.n	8005ea8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	015a      	lsls	r2, r3, #5
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e2a:	f040 8086 	bne.w	8005f3a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	015a      	lsls	r2, r3, #5
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	4413      	add	r3, r2
 8005e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	683a      	ldr	r2, [r7, #0]
 8005e40:	7812      	ldrb	r2, [r2, #0]
 8005e42:	0151      	lsls	r1, r2, #5
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	440a      	add	r2, r1
 8005e48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e4c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e50:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	015a      	lsls	r2, r3, #5
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	683a      	ldr	r2, [r7, #0]
 8005e64:	7812      	ldrb	r2, [r2, #0]
 8005e66:	0151      	lsls	r1, r2, #5
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	440a      	add	r2, r1
 8005e6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e74:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d902      	bls.n	8005e8c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	75fb      	strb	r3, [r7, #23]
          break;
 8005e8a:	e056      	b.n	8005f3a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	015a      	lsls	r2, r3, #5
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	4413      	add	r3, r2
 8005e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ea0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ea4:	d0e7      	beq.n	8005e76 <USB_EPStopXfer+0x82>
 8005ea6:	e048      	b.n	8005f3a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ebc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ec0:	d13b      	bne.n	8005f3a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	015a      	lsls	r2, r3, #5
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	4413      	add	r3, r2
 8005ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	683a      	ldr	r2, [r7, #0]
 8005ed4:	7812      	ldrb	r2, [r2, #0]
 8005ed6:	0151      	lsls	r1, r2, #5
 8005ed8:	693a      	ldr	r2, [r7, #16]
 8005eda:	440a      	add	r2, r1
 8005edc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ee0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ee4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	015a      	lsls	r2, r3, #5
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	4413      	add	r3, r2
 8005ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	683a      	ldr	r2, [r7, #0]
 8005ef8:	7812      	ldrb	r2, [r2, #0]
 8005efa:	0151      	lsls	r1, r2, #5
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	440a      	add	r2, r1
 8005f00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f08:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f242 7210 	movw	r2, #10000	; 0x2710
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d902      	bls.n	8005f20 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	75fb      	strb	r3, [r7, #23]
          break;
 8005f1e:	e00c      	b.n	8005f3a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	015a      	lsls	r2, r3, #5
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	4413      	add	r3, r2
 8005f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f38:	d0e7      	beq.n	8005f0a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	371c      	adds	r7, #28
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b089      	sub	sp, #36	; 0x24
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	4611      	mov	r1, r2
 8005f54:	461a      	mov	r2, r3
 8005f56:	460b      	mov	r3, r1
 8005f58:	71fb      	strb	r3, [r7, #7]
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005f66:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d123      	bne.n	8005fb6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005f6e:	88bb      	ldrh	r3, [r7, #4]
 8005f70:	3303      	adds	r3, #3
 8005f72:	089b      	lsrs	r3, r3, #2
 8005f74:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005f76:	2300      	movs	r3, #0
 8005f78:	61bb      	str	r3, [r7, #24]
 8005f7a:	e018      	b.n	8005fae <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005f7c:	79fb      	ldrb	r3, [r7, #7]
 8005f7e:	031a      	lsls	r2, r3, #12
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	4413      	add	r3, r2
 8005f84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f88:	461a      	mov	r2, r3
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	3301      	adds	r3, #1
 8005f94:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	3301      	adds	r3, #1
 8005f9a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	3301      	adds	r3, #1
 8005fac:	61bb      	str	r3, [r7, #24]
 8005fae:	69ba      	ldr	r2, [r7, #24]
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d3e2      	bcc.n	8005f7c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3724      	adds	r7, #36	; 0x24
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b08b      	sub	sp, #44	; 0x2c
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	4613      	mov	r3, r2
 8005fd0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005fda:	88fb      	ldrh	r3, [r7, #6]
 8005fdc:	089b      	lsrs	r3, r3, #2
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005fe2:	88fb      	ldrh	r3, [r7, #6]
 8005fe4:	f003 0303 	and.w	r3, r3, #3
 8005fe8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005fea:	2300      	movs	r3, #0
 8005fec:	623b      	str	r3, [r7, #32]
 8005fee:	e014      	b.n	800601a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffa:	601a      	str	r2, [r3, #0]
    pDest++;
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffe:	3301      	adds	r3, #1
 8006000:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006004:	3301      	adds	r3, #1
 8006006:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600a:	3301      	adds	r3, #1
 800600c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800600e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006010:	3301      	adds	r3, #1
 8006012:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006014:	6a3b      	ldr	r3, [r7, #32]
 8006016:	3301      	adds	r3, #1
 8006018:	623b      	str	r3, [r7, #32]
 800601a:	6a3a      	ldr	r2, [r7, #32]
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	429a      	cmp	r2, r3
 8006020:	d3e6      	bcc.n	8005ff0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006022:	8bfb      	ldrh	r3, [r7, #30]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d01e      	beq.n	8006066 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006028:	2300      	movs	r3, #0
 800602a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006032:	461a      	mov	r2, r3
 8006034:	f107 0310 	add.w	r3, r7, #16
 8006038:	6812      	ldr	r2, [r2, #0]
 800603a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800603c:	693a      	ldr	r2, [r7, #16]
 800603e:	6a3b      	ldr	r3, [r7, #32]
 8006040:	b2db      	uxtb	r3, r3
 8006042:	00db      	lsls	r3, r3, #3
 8006044:	fa22 f303 	lsr.w	r3, r2, r3
 8006048:	b2da      	uxtb	r2, r3
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	701a      	strb	r2, [r3, #0]
      i++;
 800604e:	6a3b      	ldr	r3, [r7, #32]
 8006050:	3301      	adds	r3, #1
 8006052:	623b      	str	r3, [r7, #32]
      pDest++;
 8006054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006056:	3301      	adds	r3, #1
 8006058:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800605a:	8bfb      	ldrh	r3, [r7, #30]
 800605c:	3b01      	subs	r3, #1
 800605e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006060:	8bfb      	ldrh	r3, [r7, #30]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d1ea      	bne.n	800603c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006068:	4618      	mov	r0, r3
 800606a:	372c      	adds	r7, #44	; 0x2c
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006074:	b480      	push	{r7}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	785b      	ldrb	r3, [r3, #1]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d12c      	bne.n	80060ea <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	015a      	lsls	r2, r3, #5
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	4413      	add	r3, r2
 8006098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	db12      	blt.n	80060c8 <USB_EPSetStall+0x54>
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00f      	beq.n	80060c8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	015a      	lsls	r2, r3, #5
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	4413      	add	r3, r2
 80060b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68ba      	ldr	r2, [r7, #8]
 80060b8:	0151      	lsls	r1, r2, #5
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	440a      	add	r2, r1
 80060be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80060c6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	015a      	lsls	r2, r3, #5
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	4413      	add	r3, r2
 80060d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68ba      	ldr	r2, [r7, #8]
 80060d8:	0151      	lsls	r1, r2, #5
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	440a      	add	r2, r1
 80060de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80060e6:	6013      	str	r3, [r2, #0]
 80060e8:	e02b      	b.n	8006142 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	015a      	lsls	r2, r3, #5
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	4413      	add	r3, r2
 80060f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	db12      	blt.n	8006122 <USB_EPSetStall+0xae>
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00f      	beq.n	8006122 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	015a      	lsls	r2, r3, #5
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	4413      	add	r3, r2
 800610a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68ba      	ldr	r2, [r7, #8]
 8006112:	0151      	lsls	r1, r2, #5
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	440a      	add	r2, r1
 8006118:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800611c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006120:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	015a      	lsls	r2, r3, #5
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	4413      	add	r3, r2
 800612a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68ba      	ldr	r2, [r7, #8]
 8006132:	0151      	lsls	r1, r2, #5
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	440a      	add	r2, r1
 8006138:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800613c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006140:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	3714      	adds	r7, #20
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	785b      	ldrb	r3, [r3, #1]
 8006168:	2b01      	cmp	r3, #1
 800616a:	d128      	bne.n	80061be <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	015a      	lsls	r2, r3, #5
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	4413      	add	r3, r2
 8006174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	0151      	lsls	r1, r2, #5
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	440a      	add	r2, r1
 8006182:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006186:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800618a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	791b      	ldrb	r3, [r3, #4]
 8006190:	2b03      	cmp	r3, #3
 8006192:	d003      	beq.n	800619c <USB_EPClearStall+0x4c>
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	791b      	ldrb	r3, [r3, #4]
 8006198:	2b02      	cmp	r3, #2
 800619a:	d138      	bne.n	800620e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	015a      	lsls	r2, r3, #5
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	4413      	add	r3, r2
 80061a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	0151      	lsls	r1, r2, #5
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	440a      	add	r2, r1
 80061b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061ba:	6013      	str	r3, [r2, #0]
 80061bc:	e027      	b.n	800620e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	015a      	lsls	r2, r3, #5
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	4413      	add	r3, r2
 80061c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68ba      	ldr	r2, [r7, #8]
 80061ce:	0151      	lsls	r1, r2, #5
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	440a      	add	r2, r1
 80061d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061dc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	791b      	ldrb	r3, [r3, #4]
 80061e2:	2b03      	cmp	r3, #3
 80061e4:	d003      	beq.n	80061ee <USB_EPClearStall+0x9e>
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	791b      	ldrb	r3, [r3, #4]
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d10f      	bne.n	800620e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	015a      	lsls	r2, r3, #5
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	4413      	add	r3, r2
 80061f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68ba      	ldr	r2, [r7, #8]
 80061fe:	0151      	lsls	r1, r2, #5
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	440a      	add	r2, r1
 8006204:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800620c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3714      	adds	r7, #20
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800621c:	b480      	push	{r7}
 800621e:	b085      	sub	sp, #20
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	460b      	mov	r3, r1
 8006226:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800623a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800623e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	78fb      	ldrb	r3, [r7, #3]
 800624a:	011b      	lsls	r3, r3, #4
 800624c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006250:	68f9      	ldr	r1, [r7, #12]
 8006252:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006256:	4313      	orrs	r3, r2
 8006258:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3714      	adds	r7, #20
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006282:	f023 0303 	bic.w	r3, r3, #3
 8006286:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006296:	f023 0302 	bic.w	r3, r3, #2
 800629a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3714      	adds	r7, #20
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80062aa:	b480      	push	{r7}
 80062ac:	b085      	sub	sp, #20
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80062c4:	f023 0303 	bic.w	r3, r3, #3
 80062c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062d8:	f043 0302 	orr.w	r3, r3, #2
 80062dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3714      	adds	r7, #20
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	695b      	ldr	r3, [r3, #20]
 80062f8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	4013      	ands	r3, r2
 8006302:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006304:	68fb      	ldr	r3, [r7, #12]
}
 8006306:	4618      	mov	r0, r3
 8006308:	3714      	adds	r7, #20
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006312:	b480      	push	{r7}
 8006314:	b085      	sub	sp, #20
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800632e:	69db      	ldr	r3, [r3, #28]
 8006330:	68ba      	ldr	r2, [r7, #8]
 8006332:	4013      	ands	r3, r2
 8006334:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	0c1b      	lsrs	r3, r3, #16
}
 800633a:	4618      	mov	r0, r3
 800633c:	3714      	adds	r7, #20
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr

08006346 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006346:	b480      	push	{r7}
 8006348:	b085      	sub	sp, #20
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006362:	69db      	ldr	r3, [r3, #28]
 8006364:	68ba      	ldr	r2, [r7, #8]
 8006366:	4013      	ands	r3, r2
 8006368:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	b29b      	uxth	r3, r3
}
 800636e:	4618      	mov	r0, r3
 8006370:	3714      	adds	r7, #20
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr

0800637a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800637a:	b480      	push	{r7}
 800637c:	b085      	sub	sp, #20
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
 8006382:	460b      	mov	r3, r1
 8006384:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800638a:	78fb      	ldrb	r3, [r7, #3]
 800638c:	015a      	lsls	r2, r3, #5
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	4413      	add	r3, r2
 8006392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	68ba      	ldr	r2, [r7, #8]
 80063a4:	4013      	ands	r3, r2
 80063a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80063a8:	68bb      	ldr	r3, [r7, #8]
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3714      	adds	r7, #20
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr

080063b6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80063b6:	b480      	push	{r7}
 80063b8:	b087      	sub	sp, #28
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
 80063be:	460b      	mov	r3, r1
 80063c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063d8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80063da:	78fb      	ldrb	r3, [r7, #3]
 80063dc:	f003 030f 	and.w	r3, r3, #15
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	fa22 f303 	lsr.w	r3, r2, r3
 80063e6:	01db      	lsls	r3, r3, #7
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	693a      	ldr	r2, [r7, #16]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80063f0:	78fb      	ldrb	r3, [r7, #3]
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	693a      	ldr	r2, [r7, #16]
 8006400:	4013      	ands	r3, r2
 8006402:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006404:	68bb      	ldr	r3, [r7, #8]
}
 8006406:	4618      	mov	r0, r3
 8006408:	371c      	adds	r7, #28
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006412:	b480      	push	{r7}
 8006414:	b083      	sub	sp, #12
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	695b      	ldr	r3, [r3, #20]
 800641e:	f003 0301 	and.w	r3, r3, #1
}
 8006422:	4618      	mov	r0, r3
 8006424:	370c      	adds	r7, #12
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr

0800642e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800642e:	b480      	push	{r7}
 8006430:	b085      	sub	sp, #20
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006448:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800644c:	f023 0307 	bic.w	r3, r3, #7
 8006450:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006464:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3714      	adds	r7, #20
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006474:	b480      	push	{r7}
 8006476:	b087      	sub	sp, #28
 8006478:	af00      	add	r7, sp, #0
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	460b      	mov	r3, r1
 800647e:	607a      	str	r2, [r7, #4]
 8006480:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	333c      	adds	r3, #60	; 0x3c
 800648a:	3304      	adds	r3, #4
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	4a26      	ldr	r2, [pc, #152]	; (800652c <USB_EP0_OutStart+0xb8>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d90a      	bls.n	80064ae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064a8:	d101      	bne.n	80064ae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80064aa:	2300      	movs	r3, #0
 80064ac:	e037      	b.n	800651e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b4:	461a      	mov	r2, r3
 80064b6:	2300      	movs	r3, #0
 80064b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80064cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	697a      	ldr	r2, [r7, #20]
 80064d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064dc:	f043 0318 	orr.w	r3, r3, #24
 80064e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	697a      	ldr	r2, [r7, #20]
 80064ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064f0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80064f4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80064f6:	7afb      	ldrb	r3, [r7, #11]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d10f      	bne.n	800651c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006502:	461a      	mov	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	697a      	ldr	r2, [r7, #20]
 8006512:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006516:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800651a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	371c      	adds	r7, #28
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	4f54300a 	.word	0x4f54300a

08006530 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006530:	b480      	push	{r7}
 8006532:	b085      	sub	sp, #20
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006538:	2300      	movs	r3, #0
 800653a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	3301      	adds	r3, #1
 8006540:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	4a13      	ldr	r2, [pc, #76]	; (8006594 <USB_CoreReset+0x64>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d901      	bls.n	800654e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	e01b      	b.n	8006586 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	2b00      	cmp	r3, #0
 8006554:	daf2      	bge.n	800653c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006556:	2300      	movs	r3, #0
 8006558:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	f043 0201 	orr.w	r2, r3, #1
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	3301      	adds	r3, #1
 800656a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	4a09      	ldr	r2, [pc, #36]	; (8006594 <USB_CoreReset+0x64>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d901      	bls.n	8006578 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006574:	2303      	movs	r3, #3
 8006576:	e006      	b.n	8006586 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	f003 0301 	and.w	r3, r3, #1
 8006580:	2b01      	cmp	r3, #1
 8006582:	d0f0      	beq.n	8006566 <USB_CoreReset+0x36>

  return HAL_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3714      	adds	r7, #20
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	00030d40 	.word	0x00030d40

08006598 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	460b      	mov	r3, r1
 80065a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80065a4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80065a8:	f002 fcaa 	bl	8008f00 <USBD_static_malloc>
 80065ac:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d109      	bne.n	80065c8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	32b0      	adds	r2, #176	; 0xb0
 80065be:	2100      	movs	r1, #0
 80065c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80065c4:	2302      	movs	r3, #2
 80065c6:	e0d4      	b.n	8006772 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80065c8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80065cc:	2100      	movs	r1, #0
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	f002 fcfe 	bl	8008fd0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	32b0      	adds	r2, #176	; 0xb0
 80065de:	68f9      	ldr	r1, [r7, #12]
 80065e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	32b0      	adds	r2, #176	; 0xb0
 80065ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	7c1b      	ldrb	r3, [r3, #16]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d138      	bne.n	8006672 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006600:	4b5e      	ldr	r3, [pc, #376]	; (800677c <USBD_CDC_Init+0x1e4>)
 8006602:	7819      	ldrb	r1, [r3, #0]
 8006604:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006608:	2202      	movs	r2, #2
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f002 fb55 	bl	8008cba <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006610:	4b5a      	ldr	r3, [pc, #360]	; (800677c <USBD_CDC_Init+0x1e4>)
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	f003 020f 	and.w	r2, r3, #15
 8006618:	6879      	ldr	r1, [r7, #4]
 800661a:	4613      	mov	r3, r2
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	4413      	add	r3, r2
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	440b      	add	r3, r1
 8006624:	3324      	adds	r3, #36	; 0x24
 8006626:	2201      	movs	r2, #1
 8006628:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800662a:	4b55      	ldr	r3, [pc, #340]	; (8006780 <USBD_CDC_Init+0x1e8>)
 800662c:	7819      	ldrb	r1, [r3, #0]
 800662e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006632:	2202      	movs	r2, #2
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f002 fb40 	bl	8008cba <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800663a:	4b51      	ldr	r3, [pc, #324]	; (8006780 <USBD_CDC_Init+0x1e8>)
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	f003 020f 	and.w	r2, r3, #15
 8006642:	6879      	ldr	r1, [r7, #4]
 8006644:	4613      	mov	r3, r2
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	4413      	add	r3, r2
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	440b      	add	r3, r1
 800664e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006652:	2201      	movs	r2, #1
 8006654:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006656:	4b4b      	ldr	r3, [pc, #300]	; (8006784 <USBD_CDC_Init+0x1ec>)
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	f003 020f 	and.w	r2, r3, #15
 800665e:	6879      	ldr	r1, [r7, #4]
 8006660:	4613      	mov	r3, r2
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	4413      	add	r3, r2
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	440b      	add	r3, r1
 800666a:	3326      	adds	r3, #38	; 0x26
 800666c:	2210      	movs	r2, #16
 800666e:	801a      	strh	r2, [r3, #0]
 8006670:	e035      	b.n	80066de <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006672:	4b42      	ldr	r3, [pc, #264]	; (800677c <USBD_CDC_Init+0x1e4>)
 8006674:	7819      	ldrb	r1, [r3, #0]
 8006676:	2340      	movs	r3, #64	; 0x40
 8006678:	2202      	movs	r2, #2
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f002 fb1d 	bl	8008cba <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006680:	4b3e      	ldr	r3, [pc, #248]	; (800677c <USBD_CDC_Init+0x1e4>)
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	f003 020f 	and.w	r2, r3, #15
 8006688:	6879      	ldr	r1, [r7, #4]
 800668a:	4613      	mov	r3, r2
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	4413      	add	r3, r2
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	440b      	add	r3, r1
 8006694:	3324      	adds	r3, #36	; 0x24
 8006696:	2201      	movs	r2, #1
 8006698:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800669a:	4b39      	ldr	r3, [pc, #228]	; (8006780 <USBD_CDC_Init+0x1e8>)
 800669c:	7819      	ldrb	r1, [r3, #0]
 800669e:	2340      	movs	r3, #64	; 0x40
 80066a0:	2202      	movs	r2, #2
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f002 fb09 	bl	8008cba <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80066a8:	4b35      	ldr	r3, [pc, #212]	; (8006780 <USBD_CDC_Init+0x1e8>)
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	f003 020f 	and.w	r2, r3, #15
 80066b0:	6879      	ldr	r1, [r7, #4]
 80066b2:	4613      	mov	r3, r2
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	4413      	add	r3, r2
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	440b      	add	r3, r1
 80066bc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80066c0:	2201      	movs	r2, #1
 80066c2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80066c4:	4b2f      	ldr	r3, [pc, #188]	; (8006784 <USBD_CDC_Init+0x1ec>)
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	f003 020f 	and.w	r2, r3, #15
 80066cc:	6879      	ldr	r1, [r7, #4]
 80066ce:	4613      	mov	r3, r2
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	4413      	add	r3, r2
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	440b      	add	r3, r1
 80066d8:	3326      	adds	r3, #38	; 0x26
 80066da:	2210      	movs	r2, #16
 80066dc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80066de:	4b29      	ldr	r3, [pc, #164]	; (8006784 <USBD_CDC_Init+0x1ec>)
 80066e0:	7819      	ldrb	r1, [r3, #0]
 80066e2:	2308      	movs	r3, #8
 80066e4:	2203      	movs	r2, #3
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f002 fae7 	bl	8008cba <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80066ec:	4b25      	ldr	r3, [pc, #148]	; (8006784 <USBD_CDC_Init+0x1ec>)
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	f003 020f 	and.w	r2, r3, #15
 80066f4:	6879      	ldr	r1, [r7, #4]
 80066f6:	4613      	mov	r3, r2
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4413      	add	r3, r2
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	440b      	add	r3, r1
 8006700:	3324      	adds	r3, #36	; 0x24
 8006702:	2201      	movs	r2, #1
 8006704:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2200      	movs	r2, #0
 800670a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	33b0      	adds	r3, #176	; 0xb0
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	4413      	add	r3, r2
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2200      	movs	r2, #0
 800672e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006738:	2b00      	cmp	r3, #0
 800673a:	d101      	bne.n	8006740 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800673c:	2302      	movs	r3, #2
 800673e:	e018      	b.n	8006772 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	7c1b      	ldrb	r3, [r3, #16]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d10a      	bne.n	800675e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006748:	4b0d      	ldr	r3, [pc, #52]	; (8006780 <USBD_CDC_Init+0x1e8>)
 800674a:	7819      	ldrb	r1, [r3, #0]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006752:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f002 fb9e 	bl	8008e98 <USBD_LL_PrepareReceive>
 800675c:	e008      	b.n	8006770 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800675e:	4b08      	ldr	r3, [pc, #32]	; (8006780 <USBD_CDC_Init+0x1e8>)
 8006760:	7819      	ldrb	r1, [r3, #0]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006768:	2340      	movs	r3, #64	; 0x40
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f002 fb94 	bl	8008e98 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	200001b3 	.word	0x200001b3
 8006780:	200001b4 	.word	0x200001b4
 8006784:	200001b5 	.word	0x200001b5

08006788 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	460b      	mov	r3, r1
 8006792:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006794:	4b3a      	ldr	r3, [pc, #232]	; (8006880 <USBD_CDC_DeInit+0xf8>)
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	4619      	mov	r1, r3
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f002 fab3 	bl	8008d06 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80067a0:	4b37      	ldr	r3, [pc, #220]	; (8006880 <USBD_CDC_DeInit+0xf8>)
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	f003 020f 	and.w	r2, r3, #15
 80067a8:	6879      	ldr	r1, [r7, #4]
 80067aa:	4613      	mov	r3, r2
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	4413      	add	r3, r2
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	440b      	add	r3, r1
 80067b4:	3324      	adds	r3, #36	; 0x24
 80067b6:	2200      	movs	r2, #0
 80067b8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80067ba:	4b32      	ldr	r3, [pc, #200]	; (8006884 <USBD_CDC_DeInit+0xfc>)
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	4619      	mov	r1, r3
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f002 faa0 	bl	8008d06 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80067c6:	4b2f      	ldr	r3, [pc, #188]	; (8006884 <USBD_CDC_DeInit+0xfc>)
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	f003 020f 	and.w	r2, r3, #15
 80067ce:	6879      	ldr	r1, [r7, #4]
 80067d0:	4613      	mov	r3, r2
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	4413      	add	r3, r2
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	440b      	add	r3, r1
 80067da:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80067de:	2200      	movs	r2, #0
 80067e0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80067e2:	4b29      	ldr	r3, [pc, #164]	; (8006888 <USBD_CDC_DeInit+0x100>)
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	4619      	mov	r1, r3
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f002 fa8c 	bl	8008d06 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80067ee:	4b26      	ldr	r3, [pc, #152]	; (8006888 <USBD_CDC_DeInit+0x100>)
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	f003 020f 	and.w	r2, r3, #15
 80067f6:	6879      	ldr	r1, [r7, #4]
 80067f8:	4613      	mov	r3, r2
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	4413      	add	r3, r2
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	440b      	add	r3, r1
 8006802:	3324      	adds	r3, #36	; 0x24
 8006804:	2200      	movs	r2, #0
 8006806:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006808:	4b1f      	ldr	r3, [pc, #124]	; (8006888 <USBD_CDC_DeInit+0x100>)
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	f003 020f 	and.w	r2, r3, #15
 8006810:	6879      	ldr	r1, [r7, #4]
 8006812:	4613      	mov	r3, r2
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	4413      	add	r3, r2
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	440b      	add	r3, r1
 800681c:	3326      	adds	r3, #38	; 0x26
 800681e:	2200      	movs	r2, #0
 8006820:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	32b0      	adds	r2, #176	; 0xb0
 800682c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d01f      	beq.n	8006874 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	33b0      	adds	r3, #176	; 0xb0
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	4413      	add	r3, r2
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	32b0      	adds	r2, #176	; 0xb0
 8006852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006856:	4618      	mov	r0, r3
 8006858:	f002 fb60 	bl	8008f1c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	32b0      	adds	r2, #176	; 0xb0
 8006866:	2100      	movs	r1, #0
 8006868:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3708      	adds	r7, #8
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	200001b3 	.word	0x200001b3
 8006884:	200001b4 	.word	0x200001b4
 8006888:	200001b5 	.word	0x200001b5

0800688c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b086      	sub	sp, #24
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	32b0      	adds	r2, #176	; 0xb0
 80068a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068a4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80068a6:	2300      	movs	r3, #0
 80068a8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80068aa:	2300      	movs	r3, #0
 80068ac:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80068ae:	2300      	movs	r3, #0
 80068b0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d101      	bne.n	80068bc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80068b8:	2303      	movs	r3, #3
 80068ba:	e0bf      	b.n	8006a3c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d050      	beq.n	800696a <USBD_CDC_Setup+0xde>
 80068c8:	2b20      	cmp	r3, #32
 80068ca:	f040 80af 	bne.w	8006a2c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	88db      	ldrh	r3, [r3, #6]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d03a      	beq.n	800694c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	b25b      	sxtb	r3, r3
 80068dc:	2b00      	cmp	r3, #0
 80068de:	da1b      	bge.n	8006918 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	33b0      	adds	r3, #176	; 0xb0
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	4413      	add	r3, r2
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	683a      	ldr	r2, [r7, #0]
 80068f4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80068f6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80068f8:	683a      	ldr	r2, [r7, #0]
 80068fa:	88d2      	ldrh	r2, [r2, #6]
 80068fc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	88db      	ldrh	r3, [r3, #6]
 8006902:	2b07      	cmp	r3, #7
 8006904:	bf28      	it	cs
 8006906:	2307      	movcs	r3, #7
 8006908:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	89fa      	ldrh	r2, [r7, #14]
 800690e:	4619      	mov	r1, r3
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f001 fd89 	bl	8008428 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006916:	e090      	b.n	8006a3a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	785a      	ldrb	r2, [r3, #1]
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	88db      	ldrh	r3, [r3, #6]
 8006926:	2b3f      	cmp	r3, #63	; 0x3f
 8006928:	d803      	bhi.n	8006932 <USBD_CDC_Setup+0xa6>
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	88db      	ldrh	r3, [r3, #6]
 800692e:	b2da      	uxtb	r2, r3
 8006930:	e000      	b.n	8006934 <USBD_CDC_Setup+0xa8>
 8006932:	2240      	movs	r2, #64	; 0x40
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800693a:	6939      	ldr	r1, [r7, #16]
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006942:	461a      	mov	r2, r3
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f001 fd9b 	bl	8008480 <USBD_CtlPrepareRx>
      break;
 800694a:	e076      	b.n	8006a3a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	33b0      	adds	r3, #176	; 0xb0
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	4413      	add	r3, r2
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	683a      	ldr	r2, [r7, #0]
 8006960:	7850      	ldrb	r0, [r2, #1]
 8006962:	2200      	movs	r2, #0
 8006964:	6839      	ldr	r1, [r7, #0]
 8006966:	4798      	blx	r3
      break;
 8006968:	e067      	b.n	8006a3a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	785b      	ldrb	r3, [r3, #1]
 800696e:	2b0b      	cmp	r3, #11
 8006970:	d851      	bhi.n	8006a16 <USBD_CDC_Setup+0x18a>
 8006972:	a201      	add	r2, pc, #4	; (adr r2, 8006978 <USBD_CDC_Setup+0xec>)
 8006974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006978:	080069a9 	.word	0x080069a9
 800697c:	08006a25 	.word	0x08006a25
 8006980:	08006a17 	.word	0x08006a17
 8006984:	08006a17 	.word	0x08006a17
 8006988:	08006a17 	.word	0x08006a17
 800698c:	08006a17 	.word	0x08006a17
 8006990:	08006a17 	.word	0x08006a17
 8006994:	08006a17 	.word	0x08006a17
 8006998:	08006a17 	.word	0x08006a17
 800699c:	08006a17 	.word	0x08006a17
 80069a0:	080069d3 	.word	0x080069d3
 80069a4:	080069fd 	.word	0x080069fd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	2b03      	cmp	r3, #3
 80069b2:	d107      	bne.n	80069c4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80069b4:	f107 030a 	add.w	r3, r7, #10
 80069b8:	2202      	movs	r2, #2
 80069ba:	4619      	mov	r1, r3
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f001 fd33 	bl	8008428 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80069c2:	e032      	b.n	8006a2a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80069c4:	6839      	ldr	r1, [r7, #0]
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f001 fcbd 	bl	8008346 <USBD_CtlError>
            ret = USBD_FAIL;
 80069cc:	2303      	movs	r3, #3
 80069ce:	75fb      	strb	r3, [r7, #23]
          break;
 80069d0:	e02b      	b.n	8006a2a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	2b03      	cmp	r3, #3
 80069dc:	d107      	bne.n	80069ee <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80069de:	f107 030d 	add.w	r3, r7, #13
 80069e2:	2201      	movs	r2, #1
 80069e4:	4619      	mov	r1, r3
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f001 fd1e 	bl	8008428 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80069ec:	e01d      	b.n	8006a2a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80069ee:	6839      	ldr	r1, [r7, #0]
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f001 fca8 	bl	8008346 <USBD_CtlError>
            ret = USBD_FAIL;
 80069f6:	2303      	movs	r3, #3
 80069f8:	75fb      	strb	r3, [r7, #23]
          break;
 80069fa:	e016      	b.n	8006a2a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	2b03      	cmp	r3, #3
 8006a06:	d00f      	beq.n	8006a28 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006a08:	6839      	ldr	r1, [r7, #0]
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f001 fc9b 	bl	8008346 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a10:	2303      	movs	r3, #3
 8006a12:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006a14:	e008      	b.n	8006a28 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006a16:	6839      	ldr	r1, [r7, #0]
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f001 fc94 	bl	8008346 <USBD_CtlError>
          ret = USBD_FAIL;
 8006a1e:	2303      	movs	r3, #3
 8006a20:	75fb      	strb	r3, [r7, #23]
          break;
 8006a22:	e002      	b.n	8006a2a <USBD_CDC_Setup+0x19e>
          break;
 8006a24:	bf00      	nop
 8006a26:	e008      	b.n	8006a3a <USBD_CDC_Setup+0x1ae>
          break;
 8006a28:	bf00      	nop
      }
      break;
 8006a2a:	e006      	b.n	8006a3a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006a2c:	6839      	ldr	r1, [r7, #0]
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f001 fc89 	bl	8008346 <USBD_CtlError>
      ret = USBD_FAIL;
 8006a34:	2303      	movs	r3, #3
 8006a36:	75fb      	strb	r3, [r7, #23]
      break;
 8006a38:	bf00      	nop
  }

  return (uint8_t)ret;
 8006a3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3718      	adds	r7, #24
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006a56:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	32b0      	adds	r2, #176	; 0xb0
 8006a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d101      	bne.n	8006a6e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	e065      	b.n	8006b3a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	32b0      	adds	r2, #176	; 0xb0
 8006a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a7c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006a7e:	78fb      	ldrb	r3, [r7, #3]
 8006a80:	f003 020f 	and.w	r2, r3, #15
 8006a84:	6879      	ldr	r1, [r7, #4]
 8006a86:	4613      	mov	r3, r2
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4413      	add	r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	440b      	add	r3, r1
 8006a90:	3318      	adds	r3, #24
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d02f      	beq.n	8006af8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006a98:	78fb      	ldrb	r3, [r7, #3]
 8006a9a:	f003 020f 	and.w	r2, r3, #15
 8006a9e:	6879      	ldr	r1, [r7, #4]
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	4413      	add	r3, r2
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	440b      	add	r3, r1
 8006aaa:	3318      	adds	r3, #24
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	78fb      	ldrb	r3, [r7, #3]
 8006ab0:	f003 010f 	and.w	r1, r3, #15
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	00db      	lsls	r3, r3, #3
 8006aba:	440b      	add	r3, r1
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	4403      	add	r3, r0
 8006ac0:	3348      	adds	r3, #72	; 0x48
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	fbb2 f1f3 	udiv	r1, r2, r3
 8006ac8:	fb01 f303 	mul.w	r3, r1, r3
 8006acc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d112      	bne.n	8006af8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006ad2:	78fb      	ldrb	r3, [r7, #3]
 8006ad4:	f003 020f 	and.w	r2, r3, #15
 8006ad8:	6879      	ldr	r1, [r7, #4]
 8006ada:	4613      	mov	r3, r2
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	4413      	add	r3, r2
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	440b      	add	r3, r1
 8006ae4:	3318      	adds	r3, #24
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006aea:	78f9      	ldrb	r1, [r7, #3]
 8006aec:	2300      	movs	r3, #0
 8006aee:	2200      	movs	r2, #0
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f002 f9b0 	bl	8008e56 <USBD_LL_Transmit>
 8006af6:	e01f      	b.n	8006b38 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	33b0      	adds	r3, #176	; 0xb0
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	4413      	add	r3, r2
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d010      	beq.n	8006b38 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	33b0      	adds	r3, #176	; 0xb0
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	4413      	add	r3, r2
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	68ba      	ldr	r2, [r7, #8]
 8006b2a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006b2e:	68ba      	ldr	r2, [r7, #8]
 8006b30:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006b34:	78fa      	ldrb	r2, [r7, #3]
 8006b36:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}

08006b42 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b084      	sub	sp, #16
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	32b0      	adds	r2, #176	; 0xb0
 8006b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b5c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	32b0      	adds	r2, #176	; 0xb0
 8006b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d101      	bne.n	8006b74 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006b70:	2303      	movs	r3, #3
 8006b72:	e01a      	b.n	8006baa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006b74:	78fb      	ldrb	r3, [r7, #3]
 8006b76:	4619      	mov	r1, r3
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f002 f9ae 	bl	8008eda <USBD_LL_GetRxDataSize>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	33b0      	adds	r3, #176	; 0xb0
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	4413      	add	r3, r2
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	68fa      	ldr	r2, [r7, #12]
 8006b9a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006b9e:	68fa      	ldr	r2, [r7, #12]
 8006ba0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006ba4:	4611      	mov	r1, r2
 8006ba6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3710      	adds	r7, #16
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}

08006bb2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b084      	sub	sp, #16
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	32b0      	adds	r2, #176	; 0xb0
 8006bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bc8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d101      	bne.n	8006bd4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	e025      	b.n	8006c20 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	33b0      	adds	r3, #176	; 0xb0
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	4413      	add	r3, r2
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d01a      	beq.n	8006c1e <USBD_CDC_EP0_RxReady+0x6c>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006bee:	2bff      	cmp	r3, #255	; 0xff
 8006bf0:	d015      	beq.n	8006c1e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	33b0      	adds	r3, #176	; 0xb0
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	4413      	add	r3, r2
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	68fa      	ldr	r2, [r7, #12]
 8006c06:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006c0a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006c12:	b292      	uxth	r2, r2
 8006c14:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	22ff      	movs	r2, #255	; 0xff
 8006c1a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3710      	adds	r7, #16
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b086      	sub	sp, #24
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006c30:	2182      	movs	r1, #130	; 0x82
 8006c32:	4818      	ldr	r0, [pc, #96]	; (8006c94 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c34:	f000 fd4f 	bl	80076d6 <USBD_GetEpDesc>
 8006c38:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006c3a:	2101      	movs	r1, #1
 8006c3c:	4815      	ldr	r0, [pc, #84]	; (8006c94 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c3e:	f000 fd4a 	bl	80076d6 <USBD_GetEpDesc>
 8006c42:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006c44:	2181      	movs	r1, #129	; 0x81
 8006c46:	4813      	ldr	r0, [pc, #76]	; (8006c94 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c48:	f000 fd45 	bl	80076d6 <USBD_GetEpDesc>
 8006c4c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d002      	beq.n	8006c5a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	2210      	movs	r2, #16
 8006c58:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d006      	beq.n	8006c6e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c68:	711a      	strb	r2, [r3, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d006      	beq.n	8006c82 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c7c:	711a      	strb	r2, [r3, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2243      	movs	r2, #67	; 0x43
 8006c86:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006c88:	4b02      	ldr	r3, [pc, #8]	; (8006c94 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3718      	adds	r7, #24
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	20000170 	.word	0x20000170

08006c98 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b086      	sub	sp, #24
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006ca0:	2182      	movs	r1, #130	; 0x82
 8006ca2:	4818      	ldr	r0, [pc, #96]	; (8006d04 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006ca4:	f000 fd17 	bl	80076d6 <USBD_GetEpDesc>
 8006ca8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006caa:	2101      	movs	r1, #1
 8006cac:	4815      	ldr	r0, [pc, #84]	; (8006d04 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006cae:	f000 fd12 	bl	80076d6 <USBD_GetEpDesc>
 8006cb2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006cb4:	2181      	movs	r1, #129	; 0x81
 8006cb6:	4813      	ldr	r0, [pc, #76]	; (8006d04 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006cb8:	f000 fd0d 	bl	80076d6 <USBD_GetEpDesc>
 8006cbc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d002      	beq.n	8006cca <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	2210      	movs	r2, #16
 8006cc8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d006      	beq.n	8006cde <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	711a      	strb	r2, [r3, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f042 0202 	orr.w	r2, r2, #2
 8006cdc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d006      	beq.n	8006cf2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	711a      	strb	r2, [r3, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f042 0202 	orr.w	r2, r2, #2
 8006cf0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2243      	movs	r2, #67	; 0x43
 8006cf6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006cf8:	4b02      	ldr	r3, [pc, #8]	; (8006d04 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3718      	adds	r7, #24
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	20000170 	.word	0x20000170

08006d08 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b086      	sub	sp, #24
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006d10:	2182      	movs	r1, #130	; 0x82
 8006d12:	4818      	ldr	r0, [pc, #96]	; (8006d74 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d14:	f000 fcdf 	bl	80076d6 <USBD_GetEpDesc>
 8006d18:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d1a:	2101      	movs	r1, #1
 8006d1c:	4815      	ldr	r0, [pc, #84]	; (8006d74 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d1e:	f000 fcda 	bl	80076d6 <USBD_GetEpDesc>
 8006d22:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d24:	2181      	movs	r1, #129	; 0x81
 8006d26:	4813      	ldr	r0, [pc, #76]	; (8006d74 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d28:	f000 fcd5 	bl	80076d6 <USBD_GetEpDesc>
 8006d2c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d002      	beq.n	8006d3a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	2210      	movs	r2, #16
 8006d38:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d006      	beq.n	8006d4e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d48:	711a      	strb	r2, [r3, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d006      	beq.n	8006d62 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d5c:	711a      	strb	r2, [r3, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2243      	movs	r2, #67	; 0x43
 8006d66:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006d68:	4b02      	ldr	r3, [pc, #8]	; (8006d74 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3718      	adds	r7, #24
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	20000170 	.word	0x20000170

08006d78 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	220a      	movs	r2, #10
 8006d84:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006d86:	4b03      	ldr	r3, [pc, #12]	; (8006d94 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr
 8006d94:	2000012c 	.word	0x2000012c

08006d98 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d101      	bne.n	8006dac <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006da8:	2303      	movs	r3, #3
 8006daa:	e009      	b.n	8006dc0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	33b0      	adds	r3, #176	; 0xb0
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	4413      	add	r3, r2
 8006dba:	683a      	ldr	r2, [r7, #0]
 8006dbc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b087      	sub	sp, #28
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	32b0      	adds	r2, #176	; 0xb0
 8006de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006de6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d101      	bne.n	8006df2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006dee:	2303      	movs	r3, #3
 8006df0:	e008      	b.n	8006e04 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	68ba      	ldr	r2, [r7, #8]
 8006df6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	371c      	adds	r7, #28
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b085      	sub	sp, #20
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	32b0      	adds	r2, #176	; 0xb0
 8006e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e28:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d101      	bne.n	8006e34 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006e30:	2303      	movs	r3, #3
 8006e32:	e004      	b.n	8006e3e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	683a      	ldr	r2, [r7, #0]
 8006e38:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3714      	adds	r7, #20
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr
	...

08006e4c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	32b0      	adds	r2, #176	; 0xb0
 8006e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e62:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006e64:	2301      	movs	r3, #1
 8006e66:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	32b0      	adds	r2, #176	; 0xb0
 8006e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d101      	bne.n	8006e7e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e025      	b.n	8006eca <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d11f      	bne.n	8006ec8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006e90:	4b10      	ldr	r3, [pc, #64]	; (8006ed4 <USBD_CDC_TransmitPacket+0x88>)
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	f003 020f 	and.w	r2, r3, #15
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	4413      	add	r3, r2
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	4403      	add	r3, r0
 8006eaa:	3318      	adds	r3, #24
 8006eac:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006eae:	4b09      	ldr	r3, [pc, #36]	; (8006ed4 <USBD_CDC_TransmitPacket+0x88>)
 8006eb0:	7819      	ldrb	r1, [r3, #0]
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f001 ffc9 	bl	8008e56 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3710      	adds	r7, #16
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	200001b3 	.word	0x200001b3

08006ed8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	32b0      	adds	r2, #176	; 0xb0
 8006eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eee:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	32b0      	adds	r2, #176	; 0xb0
 8006efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d101      	bne.n	8006f06 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006f02:	2303      	movs	r3, #3
 8006f04:	e018      	b.n	8006f38 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	7c1b      	ldrb	r3, [r3, #16]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d10a      	bne.n	8006f24 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f0e:	4b0c      	ldr	r3, [pc, #48]	; (8006f40 <USBD_CDC_ReceivePacket+0x68>)
 8006f10:	7819      	ldrb	r1, [r3, #0]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f001 ffbb 	bl	8008e98 <USBD_LL_PrepareReceive>
 8006f22:	e008      	b.n	8006f36 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f24:	4b06      	ldr	r3, [pc, #24]	; (8006f40 <USBD_CDC_ReceivePacket+0x68>)
 8006f26:	7819      	ldrb	r1, [r3, #0]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f2e:	2340      	movs	r3, #64	; 0x40
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f001 ffb1 	bl	8008e98 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	200001b4 	.word	0x200001b4

08006f44 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b086      	sub	sp, #24
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	4613      	mov	r3, r2
 8006f50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d101      	bne.n	8006f5c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	e01f      	b.n	8006f9c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d003      	beq.n	8006f82 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	68ba      	ldr	r2, [r7, #8]
 8006f7e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	79fa      	ldrb	r2, [r7, #7]
 8006f8e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006f90:	68f8      	ldr	r0, [r7, #12]
 8006f92:	f001 fe2b 	bl	8008bec <USBD_LL_Init>
 8006f96:	4603      	mov	r3, r0
 8006f98:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3718      	adds	r7, #24
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d101      	bne.n	8006fbc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006fb8:	2303      	movs	r3, #3
 8006fba:	e025      	b.n	8007008 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	683a      	ldr	r2, [r7, #0]
 8006fc0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	32ae      	adds	r2, #174	; 0xae
 8006fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d00f      	beq.n	8006ff8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	32ae      	adds	r2, #174	; 0xae
 8006fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe8:	f107 020e 	add.w	r2, r7, #14
 8006fec:	4610      	mov	r0, r2
 8006fee:	4798      	blx	r3
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006ffe:	1c5a      	adds	r2, r3, #1
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007006:	2300      	movs	r3, #0
}
 8007008:	4618      	mov	r0, r3
 800700a:	3710      	adds	r7, #16
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f001 fe33 	bl	8008c84 <USBD_LL_Start>
 800701e:	4603      	mov	r3, r0
}
 8007020:	4618      	mov	r0, r3
 8007022:	3708      	adds	r7, #8
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007030:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007032:	4618      	mov	r0, r3
 8007034:	370c      	adds	r7, #12
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr

0800703e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800703e:	b580      	push	{r7, lr}
 8007040:	b084      	sub	sp, #16
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
 8007046:	460b      	mov	r3, r1
 8007048:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800704a:	2300      	movs	r3, #0
 800704c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007054:	2b00      	cmp	r3, #0
 8007056:	d009      	beq.n	800706c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	78fa      	ldrb	r2, [r7, #3]
 8007062:	4611      	mov	r1, r2
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	4798      	blx	r3
 8007068:	4603      	mov	r3, r0
 800706a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800706c:	7bfb      	ldrb	r3, [r7, #15]
}
 800706e:	4618      	mov	r0, r3
 8007070:	3710      	adds	r7, #16
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}

08007076 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007076:	b580      	push	{r7, lr}
 8007078:	b084      	sub	sp, #16
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
 800707e:	460b      	mov	r3, r1
 8007080:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007082:	2300      	movs	r3, #0
 8007084:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	78fa      	ldrb	r2, [r7, #3]
 8007090:	4611      	mov	r1, r2
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	4798      	blx	r3
 8007096:	4603      	mov	r3, r0
 8007098:	2b00      	cmp	r3, #0
 800709a:	d001      	beq.n	80070a0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800709c:	2303      	movs	r3, #3
 800709e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80070a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b084      	sub	sp, #16
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
 80070b2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80070ba:	6839      	ldr	r1, [r7, #0]
 80070bc:	4618      	mov	r0, r3
 80070be:	f001 f908 	bl	80082d2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2201      	movs	r2, #1
 80070c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80070d0:	461a      	mov	r2, r3
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80070de:	f003 031f 	and.w	r3, r3, #31
 80070e2:	2b02      	cmp	r3, #2
 80070e4:	d01a      	beq.n	800711c <USBD_LL_SetupStage+0x72>
 80070e6:	2b02      	cmp	r3, #2
 80070e8:	d822      	bhi.n	8007130 <USBD_LL_SetupStage+0x86>
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d002      	beq.n	80070f4 <USBD_LL_SetupStage+0x4a>
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d00a      	beq.n	8007108 <USBD_LL_SetupStage+0x5e>
 80070f2:	e01d      	b.n	8007130 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80070fa:	4619      	mov	r1, r3
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 fb5f 	bl	80077c0 <USBD_StdDevReq>
 8007102:	4603      	mov	r3, r0
 8007104:	73fb      	strb	r3, [r7, #15]
      break;
 8007106:	e020      	b.n	800714a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800710e:	4619      	mov	r1, r3
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 fbc7 	bl	80078a4 <USBD_StdItfReq>
 8007116:	4603      	mov	r3, r0
 8007118:	73fb      	strb	r3, [r7, #15]
      break;
 800711a:	e016      	b.n	800714a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007122:	4619      	mov	r1, r3
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 fc29 	bl	800797c <USBD_StdEPReq>
 800712a:	4603      	mov	r3, r0
 800712c:	73fb      	strb	r3, [r7, #15]
      break;
 800712e:	e00c      	b.n	800714a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007136:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800713a:	b2db      	uxtb	r3, r3
 800713c:	4619      	mov	r1, r3
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f001 fe00 	bl	8008d44 <USBD_LL_StallEP>
 8007144:	4603      	mov	r3, r0
 8007146:	73fb      	strb	r3, [r7, #15]
      break;
 8007148:	bf00      	nop
  }

  return ret;
 800714a:	7bfb      	ldrb	r3, [r7, #15]
}
 800714c:	4618      	mov	r0, r3
 800714e:	3710      	adds	r7, #16
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b086      	sub	sp, #24
 8007158:	af00      	add	r7, sp, #0
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	460b      	mov	r3, r1
 800715e:	607a      	str	r2, [r7, #4]
 8007160:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007162:	2300      	movs	r3, #0
 8007164:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007166:	7afb      	ldrb	r3, [r7, #11]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d16e      	bne.n	800724a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007172:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800717a:	2b03      	cmp	r3, #3
 800717c:	f040 8098 	bne.w	80072b0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	689a      	ldr	r2, [r3, #8]
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	429a      	cmp	r2, r3
 800718a:	d913      	bls.n	80071b4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	689a      	ldr	r2, [r3, #8]
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	1ad2      	subs	r2, r2, r3
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	68da      	ldr	r2, [r3, #12]
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	4293      	cmp	r3, r2
 80071a4:	bf28      	it	cs
 80071a6:	4613      	movcs	r3, r2
 80071a8:	461a      	mov	r2, r3
 80071aa:	6879      	ldr	r1, [r7, #4]
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	f001 f984 	bl	80084ba <USBD_CtlContinueRx>
 80071b2:	e07d      	b.n	80072b0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80071ba:	f003 031f 	and.w	r3, r3, #31
 80071be:	2b02      	cmp	r3, #2
 80071c0:	d014      	beq.n	80071ec <USBD_LL_DataOutStage+0x98>
 80071c2:	2b02      	cmp	r3, #2
 80071c4:	d81d      	bhi.n	8007202 <USBD_LL_DataOutStage+0xae>
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d002      	beq.n	80071d0 <USBD_LL_DataOutStage+0x7c>
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d003      	beq.n	80071d6 <USBD_LL_DataOutStage+0x82>
 80071ce:	e018      	b.n	8007202 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80071d0:	2300      	movs	r3, #0
 80071d2:	75bb      	strb	r3, [r7, #22]
            break;
 80071d4:	e018      	b.n	8007208 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	4619      	mov	r1, r3
 80071e0:	68f8      	ldr	r0, [r7, #12]
 80071e2:	f000 fa5e 	bl	80076a2 <USBD_CoreFindIF>
 80071e6:	4603      	mov	r3, r0
 80071e8:	75bb      	strb	r3, [r7, #22]
            break;
 80071ea:	e00d      	b.n	8007208 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	4619      	mov	r1, r3
 80071f6:	68f8      	ldr	r0, [r7, #12]
 80071f8:	f000 fa60 	bl	80076bc <USBD_CoreFindEP>
 80071fc:	4603      	mov	r3, r0
 80071fe:	75bb      	strb	r3, [r7, #22]
            break;
 8007200:	e002      	b.n	8007208 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007202:	2300      	movs	r3, #0
 8007204:	75bb      	strb	r3, [r7, #22]
            break;
 8007206:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007208:	7dbb      	ldrb	r3, [r7, #22]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d119      	bne.n	8007242 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007214:	b2db      	uxtb	r3, r3
 8007216:	2b03      	cmp	r3, #3
 8007218:	d113      	bne.n	8007242 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800721a:	7dba      	ldrb	r2, [r7, #22]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	32ae      	adds	r2, #174	; 0xae
 8007220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d00b      	beq.n	8007242 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800722a:	7dba      	ldrb	r2, [r7, #22]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007232:	7dba      	ldrb	r2, [r7, #22]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	32ae      	adds	r2, #174	; 0xae
 8007238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	68f8      	ldr	r0, [r7, #12]
 8007240:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007242:	68f8      	ldr	r0, [r7, #12]
 8007244:	f001 f94a 	bl	80084dc <USBD_CtlSendStatus>
 8007248:	e032      	b.n	80072b0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800724a:	7afb      	ldrb	r3, [r7, #11]
 800724c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007250:	b2db      	uxtb	r3, r3
 8007252:	4619      	mov	r1, r3
 8007254:	68f8      	ldr	r0, [r7, #12]
 8007256:	f000 fa31 	bl	80076bc <USBD_CoreFindEP>
 800725a:	4603      	mov	r3, r0
 800725c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800725e:	7dbb      	ldrb	r3, [r7, #22]
 8007260:	2bff      	cmp	r3, #255	; 0xff
 8007262:	d025      	beq.n	80072b0 <USBD_LL_DataOutStage+0x15c>
 8007264:	7dbb      	ldrb	r3, [r7, #22]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d122      	bne.n	80072b0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007270:	b2db      	uxtb	r3, r3
 8007272:	2b03      	cmp	r3, #3
 8007274:	d117      	bne.n	80072a6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007276:	7dba      	ldrb	r2, [r7, #22]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	32ae      	adds	r2, #174	; 0xae
 800727c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007280:	699b      	ldr	r3, [r3, #24]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00f      	beq.n	80072a6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007286:	7dba      	ldrb	r2, [r7, #22]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800728e:	7dba      	ldrb	r2, [r7, #22]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	32ae      	adds	r2, #174	; 0xae
 8007294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007298:	699b      	ldr	r3, [r3, #24]
 800729a:	7afa      	ldrb	r2, [r7, #11]
 800729c:	4611      	mov	r1, r2
 800729e:	68f8      	ldr	r0, [r7, #12]
 80072a0:	4798      	blx	r3
 80072a2:	4603      	mov	r3, r0
 80072a4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80072a6:	7dfb      	ldrb	r3, [r7, #23]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d001      	beq.n	80072b0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80072ac:	7dfb      	ldrb	r3, [r7, #23]
 80072ae:	e000      	b.n	80072b2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80072b0:	2300      	movs	r3, #0
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3718      	adds	r7, #24
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}

080072ba <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80072ba:	b580      	push	{r7, lr}
 80072bc:	b086      	sub	sp, #24
 80072be:	af00      	add	r7, sp, #0
 80072c0:	60f8      	str	r0, [r7, #12]
 80072c2:	460b      	mov	r3, r1
 80072c4:	607a      	str	r2, [r7, #4]
 80072c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80072c8:	7afb      	ldrb	r3, [r7, #11]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d16f      	bne.n	80073ae <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	3314      	adds	r3, #20
 80072d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80072da:	2b02      	cmp	r3, #2
 80072dc:	d15a      	bne.n	8007394 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	689a      	ldr	r2, [r3, #8]
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d914      	bls.n	8007314 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	689a      	ldr	r2, [r3, #8]
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	1ad2      	subs	r2, r2, r3
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	461a      	mov	r2, r3
 80072fe:	6879      	ldr	r1, [r7, #4]
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	f001 f8ac 	bl	800845e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007306:	2300      	movs	r3, #0
 8007308:	2200      	movs	r2, #0
 800730a:	2100      	movs	r1, #0
 800730c:	68f8      	ldr	r0, [r7, #12]
 800730e:	f001 fdc3 	bl	8008e98 <USBD_LL_PrepareReceive>
 8007312:	e03f      	b.n	8007394 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	68da      	ldr	r2, [r3, #12]
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	429a      	cmp	r2, r3
 800731e:	d11c      	bne.n	800735a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	685a      	ldr	r2, [r3, #4]
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007328:	429a      	cmp	r2, r3
 800732a:	d316      	bcc.n	800735a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	685a      	ldr	r2, [r3, #4]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007336:	429a      	cmp	r2, r3
 8007338:	d20f      	bcs.n	800735a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800733a:	2200      	movs	r2, #0
 800733c:	2100      	movs	r1, #0
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	f001 f88d 	bl	800845e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2200      	movs	r2, #0
 8007348:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800734c:	2300      	movs	r3, #0
 800734e:	2200      	movs	r2, #0
 8007350:	2100      	movs	r1, #0
 8007352:	68f8      	ldr	r0, [r7, #12]
 8007354:	f001 fda0 	bl	8008e98 <USBD_LL_PrepareReceive>
 8007358:	e01c      	b.n	8007394 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007360:	b2db      	uxtb	r3, r3
 8007362:	2b03      	cmp	r3, #3
 8007364:	d10f      	bne.n	8007386 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d009      	beq.n	8007386 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2200      	movs	r2, #0
 8007376:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007386:	2180      	movs	r1, #128	; 0x80
 8007388:	68f8      	ldr	r0, [r7, #12]
 800738a:	f001 fcdb 	bl	8008d44 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800738e:	68f8      	ldr	r0, [r7, #12]
 8007390:	f001 f8b7 	bl	8008502 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d03a      	beq.n	8007414 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800739e:	68f8      	ldr	r0, [r7, #12]
 80073a0:	f7ff fe42 	bl	8007028 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80073ac:	e032      	b.n	8007414 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80073ae:	7afb      	ldrb	r3, [r7, #11]
 80073b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	4619      	mov	r1, r3
 80073b8:	68f8      	ldr	r0, [r7, #12]
 80073ba:	f000 f97f 	bl	80076bc <USBD_CoreFindEP>
 80073be:	4603      	mov	r3, r0
 80073c0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80073c2:	7dfb      	ldrb	r3, [r7, #23]
 80073c4:	2bff      	cmp	r3, #255	; 0xff
 80073c6:	d025      	beq.n	8007414 <USBD_LL_DataInStage+0x15a>
 80073c8:	7dfb      	ldrb	r3, [r7, #23]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d122      	bne.n	8007414 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	2b03      	cmp	r3, #3
 80073d8:	d11c      	bne.n	8007414 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80073da:	7dfa      	ldrb	r2, [r7, #23]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	32ae      	adds	r2, #174	; 0xae
 80073e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073e4:	695b      	ldr	r3, [r3, #20]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d014      	beq.n	8007414 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80073ea:	7dfa      	ldrb	r2, [r7, #23]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80073f2:	7dfa      	ldrb	r2, [r7, #23]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	32ae      	adds	r2, #174	; 0xae
 80073f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073fc:	695b      	ldr	r3, [r3, #20]
 80073fe:	7afa      	ldrb	r2, [r7, #11]
 8007400:	4611      	mov	r1, r2
 8007402:	68f8      	ldr	r0, [r7, #12]
 8007404:	4798      	blx	r3
 8007406:	4603      	mov	r3, r0
 8007408:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800740a:	7dbb      	ldrb	r3, [r7, #22]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d001      	beq.n	8007414 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007410:	7dbb      	ldrb	r3, [r7, #22]
 8007412:	e000      	b.n	8007416 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3718      	adds	r7, #24
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}

0800741e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800741e:	b580      	push	{r7, lr}
 8007420:	b084      	sub	sp, #16
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007426:	2300      	movs	r3, #0
 8007428:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2201      	movs	r2, #1
 800742e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007456:	2b00      	cmp	r3, #0
 8007458:	d014      	beq.n	8007484 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d00e      	beq.n	8007484 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	6852      	ldr	r2, [r2, #4]
 8007472:	b2d2      	uxtb	r2, r2
 8007474:	4611      	mov	r1, r2
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	4798      	blx	r3
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d001      	beq.n	8007484 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007480:	2303      	movs	r3, #3
 8007482:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007484:	2340      	movs	r3, #64	; 0x40
 8007486:	2200      	movs	r2, #0
 8007488:	2100      	movs	r1, #0
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f001 fc15 	bl	8008cba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2240      	movs	r2, #64	; 0x40
 800749c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074a0:	2340      	movs	r3, #64	; 0x40
 80074a2:	2200      	movs	r2, #0
 80074a4:	2180      	movs	r1, #128	; 0x80
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f001 fc07 	bl	8008cba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2201      	movs	r2, #1
 80074b0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2240      	movs	r2, #64	; 0x40
 80074b6:	621a      	str	r2, [r3, #32]

  return ret;
 80074b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3710      	adds	r7, #16
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}

080074c2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80074c2:	b480      	push	{r7}
 80074c4:	b083      	sub	sp, #12
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
 80074ca:	460b      	mov	r3, r1
 80074cc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	78fa      	ldrb	r2, [r7, #3]
 80074d2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	370c      	adds	r7, #12
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr

080074e2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80074e2:	b480      	push	{r7}
 80074e4:	b083      	sub	sp, #12
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074f0:	b2da      	uxtb	r2, r3
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2204      	movs	r2, #4
 80074fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007500:	2300      	movs	r3, #0
}
 8007502:	4618      	mov	r0, r3
 8007504:	370c      	adds	r7, #12
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr

0800750e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800750e:	b480      	push	{r7}
 8007510:	b083      	sub	sp, #12
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800751c:	b2db      	uxtb	r3, r3
 800751e:	2b04      	cmp	r3, #4
 8007520:	d106      	bne.n	8007530 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007528:	b2da      	uxtb	r2, r3
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	370c      	adds	r7, #12
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr

0800753e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b082      	sub	sp, #8
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800754c:	b2db      	uxtb	r3, r3
 800754e:	2b03      	cmp	r3, #3
 8007550:	d110      	bne.n	8007574 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00b      	beq.n	8007574 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007562:	69db      	ldr	r3, [r3, #28]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d005      	beq.n	8007574 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800756e:	69db      	ldr	r3, [r3, #28]
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	3708      	adds	r7, #8
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800757e:	b580      	push	{r7, lr}
 8007580:	b082      	sub	sp, #8
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
 8007586:	460b      	mov	r3, r1
 8007588:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	32ae      	adds	r2, #174	; 0xae
 8007594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d101      	bne.n	80075a0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800759c:	2303      	movs	r3, #3
 800759e:	e01c      	b.n	80075da <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	2b03      	cmp	r3, #3
 80075aa:	d115      	bne.n	80075d8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	32ae      	adds	r2, #174	; 0xae
 80075b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ba:	6a1b      	ldr	r3, [r3, #32]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d00b      	beq.n	80075d8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	32ae      	adds	r2, #174	; 0xae
 80075ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ce:	6a1b      	ldr	r3, [r3, #32]
 80075d0:	78fa      	ldrb	r2, [r7, #3]
 80075d2:	4611      	mov	r1, r2
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80075d8:	2300      	movs	r3, #0
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3708      	adds	r7, #8
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}

080075e2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b082      	sub	sp, #8
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
 80075ea:	460b      	mov	r3, r1
 80075ec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	32ae      	adds	r2, #174	; 0xae
 80075f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d101      	bne.n	8007604 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007600:	2303      	movs	r3, #3
 8007602:	e01c      	b.n	800763e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800760a:	b2db      	uxtb	r3, r3
 800760c:	2b03      	cmp	r3, #3
 800760e:	d115      	bne.n	800763c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	32ae      	adds	r2, #174	; 0xae
 800761a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800761e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007620:	2b00      	cmp	r3, #0
 8007622:	d00b      	beq.n	800763c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	32ae      	adds	r2, #174	; 0xae
 800762e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007634:	78fa      	ldrb	r2, [r7, #3]
 8007636:	4611      	mov	r1, r2
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3708      	adds	r7, #8
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007646:	b480      	push	{r7}
 8007648:	b083      	sub	sp, #12
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800764e:	2300      	movs	r3, #0
}
 8007650:	4618      	mov	r0, r3
 8007652:	370c      	adds	r7, #12
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007664:	2300      	movs	r3, #0
 8007666:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2201      	movs	r2, #1
 800766c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00e      	beq.n	8007698 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	6852      	ldr	r2, [r2, #4]
 8007686:	b2d2      	uxtb	r2, r2
 8007688:	4611      	mov	r1, r2
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	4798      	blx	r3
 800768e:	4603      	mov	r3, r0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d001      	beq.n	8007698 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007694:	2303      	movs	r3, #3
 8007696:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007698:	7bfb      	ldrb	r3, [r7, #15]
}
 800769a:	4618      	mov	r0, r3
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80076a2:	b480      	push	{r7}
 80076a4:	b083      	sub	sp, #12
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
 80076aa:	460b      	mov	r3, r1
 80076ac:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80076ae:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	460b      	mov	r3, r1
 80076c6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80076c8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	370c      	adds	r7, #12
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr

080076d6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b086      	sub	sp, #24
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
 80076de:	460b      	mov	r3, r1
 80076e0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80076ea:	2300      	movs	r3, #0
 80076ec:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	885b      	ldrh	r3, [r3, #2]
 80076f2:	b29a      	uxth	r2, r3
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d920      	bls.n	8007740 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	b29b      	uxth	r3, r3
 8007704:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007706:	e013      	b.n	8007730 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007708:	f107 030a 	add.w	r3, r7, #10
 800770c:	4619      	mov	r1, r3
 800770e:	6978      	ldr	r0, [r7, #20]
 8007710:	f000 f81b 	bl	800774a <USBD_GetNextDesc>
 8007714:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	785b      	ldrb	r3, [r3, #1]
 800771a:	2b05      	cmp	r3, #5
 800771c:	d108      	bne.n	8007730 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	789b      	ldrb	r3, [r3, #2]
 8007726:	78fa      	ldrb	r2, [r7, #3]
 8007728:	429a      	cmp	r2, r3
 800772a:	d008      	beq.n	800773e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800772c:	2300      	movs	r3, #0
 800772e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	885b      	ldrh	r3, [r3, #2]
 8007734:	b29a      	uxth	r2, r3
 8007736:	897b      	ldrh	r3, [r7, #10]
 8007738:	429a      	cmp	r2, r3
 800773a:	d8e5      	bhi.n	8007708 <USBD_GetEpDesc+0x32>
 800773c:	e000      	b.n	8007740 <USBD_GetEpDesc+0x6a>
          break;
 800773e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007740:	693b      	ldr	r3, [r7, #16]
}
 8007742:	4618      	mov	r0, r3
 8007744:	3718      	adds	r7, #24
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}

0800774a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800774a:	b480      	push	{r7}
 800774c:	b085      	sub	sp, #20
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
 8007752:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	881a      	ldrh	r2, [r3, #0]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	b29b      	uxth	r3, r3
 8007762:	4413      	add	r3, r2
 8007764:	b29a      	uxth	r2, r3
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	461a      	mov	r2, r3
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	4413      	add	r3, r2
 8007774:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007776:	68fb      	ldr	r3, [r7, #12]
}
 8007778:	4618      	mov	r0, r3
 800777a:	3714      	adds	r7, #20
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr

08007784 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007784:	b480      	push	{r7}
 8007786:	b087      	sub	sp, #28
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	3301      	adds	r3, #1
 800779a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80077a2:	8a3b      	ldrh	r3, [r7, #16]
 80077a4:	021b      	lsls	r3, r3, #8
 80077a6:	b21a      	sxth	r2, r3
 80077a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	b21b      	sxth	r3, r3
 80077b0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80077b2:	89fb      	ldrh	r3, [r7, #14]
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	371c      	adds	r7, #28
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077ca:	2300      	movs	r3, #0
 80077cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077d6:	2b40      	cmp	r3, #64	; 0x40
 80077d8:	d005      	beq.n	80077e6 <USBD_StdDevReq+0x26>
 80077da:	2b40      	cmp	r3, #64	; 0x40
 80077dc:	d857      	bhi.n	800788e <USBD_StdDevReq+0xce>
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d00f      	beq.n	8007802 <USBD_StdDevReq+0x42>
 80077e2:	2b20      	cmp	r3, #32
 80077e4:	d153      	bne.n	800788e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	32ae      	adds	r2, #174	; 0xae
 80077f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	6839      	ldr	r1, [r7, #0]
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	4798      	blx	r3
 80077fc:	4603      	mov	r3, r0
 80077fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007800:	e04a      	b.n	8007898 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	785b      	ldrb	r3, [r3, #1]
 8007806:	2b09      	cmp	r3, #9
 8007808:	d83b      	bhi.n	8007882 <USBD_StdDevReq+0xc2>
 800780a:	a201      	add	r2, pc, #4	; (adr r2, 8007810 <USBD_StdDevReq+0x50>)
 800780c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007810:	08007865 	.word	0x08007865
 8007814:	08007879 	.word	0x08007879
 8007818:	08007883 	.word	0x08007883
 800781c:	0800786f 	.word	0x0800786f
 8007820:	08007883 	.word	0x08007883
 8007824:	08007843 	.word	0x08007843
 8007828:	08007839 	.word	0x08007839
 800782c:	08007883 	.word	0x08007883
 8007830:	0800785b 	.word	0x0800785b
 8007834:	0800784d 	.word	0x0800784d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007838:	6839      	ldr	r1, [r7, #0]
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 fa3c 	bl	8007cb8 <USBD_GetDescriptor>
          break;
 8007840:	e024      	b.n	800788c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007842:	6839      	ldr	r1, [r7, #0]
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 fba1 	bl	8007f8c <USBD_SetAddress>
          break;
 800784a:	e01f      	b.n	800788c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800784c:	6839      	ldr	r1, [r7, #0]
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 fbe0 	bl	8008014 <USBD_SetConfig>
 8007854:	4603      	mov	r3, r0
 8007856:	73fb      	strb	r3, [r7, #15]
          break;
 8007858:	e018      	b.n	800788c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800785a:	6839      	ldr	r1, [r7, #0]
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 fc83 	bl	8008168 <USBD_GetConfig>
          break;
 8007862:	e013      	b.n	800788c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007864:	6839      	ldr	r1, [r7, #0]
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 fcb4 	bl	80081d4 <USBD_GetStatus>
          break;
 800786c:	e00e      	b.n	800788c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800786e:	6839      	ldr	r1, [r7, #0]
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 fce3 	bl	800823c <USBD_SetFeature>
          break;
 8007876:	e009      	b.n	800788c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007878:	6839      	ldr	r1, [r7, #0]
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 fd07 	bl	800828e <USBD_ClrFeature>
          break;
 8007880:	e004      	b.n	800788c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007882:	6839      	ldr	r1, [r7, #0]
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 fd5e 	bl	8008346 <USBD_CtlError>
          break;
 800788a:	bf00      	nop
      }
      break;
 800788c:	e004      	b.n	8007898 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800788e:	6839      	ldr	r1, [r7, #0]
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 fd58 	bl	8008346 <USBD_CtlError>
      break;
 8007896:	bf00      	nop
  }

  return ret;
 8007898:	7bfb      	ldrb	r3, [r7, #15]
}
 800789a:	4618      	mov	r0, r3
 800789c:	3710      	adds	r7, #16
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop

080078a4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078ae:	2300      	movs	r3, #0
 80078b0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078ba:	2b40      	cmp	r3, #64	; 0x40
 80078bc:	d005      	beq.n	80078ca <USBD_StdItfReq+0x26>
 80078be:	2b40      	cmp	r3, #64	; 0x40
 80078c0:	d852      	bhi.n	8007968 <USBD_StdItfReq+0xc4>
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d001      	beq.n	80078ca <USBD_StdItfReq+0x26>
 80078c6:	2b20      	cmp	r3, #32
 80078c8:	d14e      	bne.n	8007968 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	3b01      	subs	r3, #1
 80078d4:	2b02      	cmp	r3, #2
 80078d6:	d840      	bhi.n	800795a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	889b      	ldrh	r3, [r3, #4]
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d836      	bhi.n	8007950 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	889b      	ldrh	r3, [r3, #4]
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	4619      	mov	r1, r3
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f7ff fed9 	bl	80076a2 <USBD_CoreFindIF>
 80078f0:	4603      	mov	r3, r0
 80078f2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078f4:	7bbb      	ldrb	r3, [r7, #14]
 80078f6:	2bff      	cmp	r3, #255	; 0xff
 80078f8:	d01d      	beq.n	8007936 <USBD_StdItfReq+0x92>
 80078fa:	7bbb      	ldrb	r3, [r7, #14]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d11a      	bne.n	8007936 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007900:	7bba      	ldrb	r2, [r7, #14]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	32ae      	adds	r2, #174	; 0xae
 8007906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d00f      	beq.n	8007930 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007910:	7bba      	ldrb	r2, [r7, #14]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007918:	7bba      	ldrb	r2, [r7, #14]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	32ae      	adds	r2, #174	; 0xae
 800791e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	6839      	ldr	r1, [r7, #0]
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	4798      	blx	r3
 800792a:	4603      	mov	r3, r0
 800792c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800792e:	e004      	b.n	800793a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007930:	2303      	movs	r3, #3
 8007932:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007934:	e001      	b.n	800793a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007936:	2303      	movs	r3, #3
 8007938:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	88db      	ldrh	r3, [r3, #6]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d110      	bne.n	8007964 <USBD_StdItfReq+0xc0>
 8007942:	7bfb      	ldrb	r3, [r7, #15]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d10d      	bne.n	8007964 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 fdc7 	bl	80084dc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800794e:	e009      	b.n	8007964 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007950:	6839      	ldr	r1, [r7, #0]
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 fcf7 	bl	8008346 <USBD_CtlError>
          break;
 8007958:	e004      	b.n	8007964 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800795a:	6839      	ldr	r1, [r7, #0]
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 fcf2 	bl	8008346 <USBD_CtlError>
          break;
 8007962:	e000      	b.n	8007966 <USBD_StdItfReq+0xc2>
          break;
 8007964:	bf00      	nop
      }
      break;
 8007966:	e004      	b.n	8007972 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007968:	6839      	ldr	r1, [r7, #0]
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 fceb 	bl	8008346 <USBD_CtlError>
      break;
 8007970:	bf00      	nop
  }

  return ret;
 8007972:	7bfb      	ldrb	r3, [r7, #15]
}
 8007974:	4618      	mov	r0, r3
 8007976:	3710      	adds	r7, #16
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b084      	sub	sp, #16
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007986:	2300      	movs	r3, #0
 8007988:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	889b      	ldrh	r3, [r3, #4]
 800798e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007998:	2b40      	cmp	r3, #64	; 0x40
 800799a:	d007      	beq.n	80079ac <USBD_StdEPReq+0x30>
 800799c:	2b40      	cmp	r3, #64	; 0x40
 800799e:	f200 817f 	bhi.w	8007ca0 <USBD_StdEPReq+0x324>
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d02a      	beq.n	80079fc <USBD_StdEPReq+0x80>
 80079a6:	2b20      	cmp	r3, #32
 80079a8:	f040 817a 	bne.w	8007ca0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80079ac:	7bbb      	ldrb	r3, [r7, #14]
 80079ae:	4619      	mov	r1, r3
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f7ff fe83 	bl	80076bc <USBD_CoreFindEP>
 80079b6:	4603      	mov	r3, r0
 80079b8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80079ba:	7b7b      	ldrb	r3, [r7, #13]
 80079bc:	2bff      	cmp	r3, #255	; 0xff
 80079be:	f000 8174 	beq.w	8007caa <USBD_StdEPReq+0x32e>
 80079c2:	7b7b      	ldrb	r3, [r7, #13]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	f040 8170 	bne.w	8007caa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80079ca:	7b7a      	ldrb	r2, [r7, #13]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80079d2:	7b7a      	ldrb	r2, [r7, #13]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	32ae      	adds	r2, #174	; 0xae
 80079d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	f000 8163 	beq.w	8007caa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80079e4:	7b7a      	ldrb	r2, [r7, #13]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	32ae      	adds	r2, #174	; 0xae
 80079ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	6839      	ldr	r1, [r7, #0]
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	4798      	blx	r3
 80079f6:	4603      	mov	r3, r0
 80079f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80079fa:	e156      	b.n	8007caa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	785b      	ldrb	r3, [r3, #1]
 8007a00:	2b03      	cmp	r3, #3
 8007a02:	d008      	beq.n	8007a16 <USBD_StdEPReq+0x9a>
 8007a04:	2b03      	cmp	r3, #3
 8007a06:	f300 8145 	bgt.w	8007c94 <USBD_StdEPReq+0x318>
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	f000 809b 	beq.w	8007b46 <USBD_StdEPReq+0x1ca>
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d03c      	beq.n	8007a8e <USBD_StdEPReq+0x112>
 8007a14:	e13e      	b.n	8007c94 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	2b02      	cmp	r3, #2
 8007a20:	d002      	beq.n	8007a28 <USBD_StdEPReq+0xac>
 8007a22:	2b03      	cmp	r3, #3
 8007a24:	d016      	beq.n	8007a54 <USBD_StdEPReq+0xd8>
 8007a26:	e02c      	b.n	8007a82 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a28:	7bbb      	ldrb	r3, [r7, #14]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00d      	beq.n	8007a4a <USBD_StdEPReq+0xce>
 8007a2e:	7bbb      	ldrb	r3, [r7, #14]
 8007a30:	2b80      	cmp	r3, #128	; 0x80
 8007a32:	d00a      	beq.n	8007a4a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a34:	7bbb      	ldrb	r3, [r7, #14]
 8007a36:	4619      	mov	r1, r3
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f001 f983 	bl	8008d44 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a3e:	2180      	movs	r1, #128	; 0x80
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f001 f97f 	bl	8008d44 <USBD_LL_StallEP>
 8007a46:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a48:	e020      	b.n	8007a8c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007a4a:	6839      	ldr	r1, [r7, #0]
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 fc7a 	bl	8008346 <USBD_CtlError>
              break;
 8007a52:	e01b      	b.n	8007a8c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	885b      	ldrh	r3, [r3, #2]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d10e      	bne.n	8007a7a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007a5c:	7bbb      	ldrb	r3, [r7, #14]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d00b      	beq.n	8007a7a <USBD_StdEPReq+0xfe>
 8007a62:	7bbb      	ldrb	r3, [r7, #14]
 8007a64:	2b80      	cmp	r3, #128	; 0x80
 8007a66:	d008      	beq.n	8007a7a <USBD_StdEPReq+0xfe>
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	88db      	ldrh	r3, [r3, #6]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d104      	bne.n	8007a7a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a70:	7bbb      	ldrb	r3, [r7, #14]
 8007a72:	4619      	mov	r1, r3
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f001 f965 	bl	8008d44 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 fd2e 	bl	80084dc <USBD_CtlSendStatus>

              break;
 8007a80:	e004      	b.n	8007a8c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007a82:	6839      	ldr	r1, [r7, #0]
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 fc5e 	bl	8008346 <USBD_CtlError>
              break;
 8007a8a:	bf00      	nop
          }
          break;
 8007a8c:	e107      	b.n	8007c9e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	2b02      	cmp	r3, #2
 8007a98:	d002      	beq.n	8007aa0 <USBD_StdEPReq+0x124>
 8007a9a:	2b03      	cmp	r3, #3
 8007a9c:	d016      	beq.n	8007acc <USBD_StdEPReq+0x150>
 8007a9e:	e04b      	b.n	8007b38 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007aa0:	7bbb      	ldrb	r3, [r7, #14]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d00d      	beq.n	8007ac2 <USBD_StdEPReq+0x146>
 8007aa6:	7bbb      	ldrb	r3, [r7, #14]
 8007aa8:	2b80      	cmp	r3, #128	; 0x80
 8007aaa:	d00a      	beq.n	8007ac2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007aac:	7bbb      	ldrb	r3, [r7, #14]
 8007aae:	4619      	mov	r1, r3
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f001 f947 	bl	8008d44 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ab6:	2180      	movs	r1, #128	; 0x80
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f001 f943 	bl	8008d44 <USBD_LL_StallEP>
 8007abe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ac0:	e040      	b.n	8007b44 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007ac2:	6839      	ldr	r1, [r7, #0]
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 fc3e 	bl	8008346 <USBD_CtlError>
              break;
 8007aca:	e03b      	b.n	8007b44 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	885b      	ldrh	r3, [r3, #2]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d136      	bne.n	8007b42 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007ad4:	7bbb      	ldrb	r3, [r7, #14]
 8007ad6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d004      	beq.n	8007ae8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007ade:	7bbb      	ldrb	r3, [r7, #14]
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f001 f94d 	bl	8008d82 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 fcf7 	bl	80084dc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007aee:	7bbb      	ldrb	r3, [r7, #14]
 8007af0:	4619      	mov	r1, r3
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f7ff fde2 	bl	80076bc <USBD_CoreFindEP>
 8007af8:	4603      	mov	r3, r0
 8007afa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007afc:	7b7b      	ldrb	r3, [r7, #13]
 8007afe:	2bff      	cmp	r3, #255	; 0xff
 8007b00:	d01f      	beq.n	8007b42 <USBD_StdEPReq+0x1c6>
 8007b02:	7b7b      	ldrb	r3, [r7, #13]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d11c      	bne.n	8007b42 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007b08:	7b7a      	ldrb	r2, [r7, #13]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007b10:	7b7a      	ldrb	r2, [r7, #13]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	32ae      	adds	r2, #174	; 0xae
 8007b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d010      	beq.n	8007b42 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007b20:	7b7a      	ldrb	r2, [r7, #13]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	32ae      	adds	r2, #174	; 0xae
 8007b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	6839      	ldr	r1, [r7, #0]
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	4798      	blx	r3
 8007b32:	4603      	mov	r3, r0
 8007b34:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007b36:	e004      	b.n	8007b42 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007b38:	6839      	ldr	r1, [r7, #0]
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 fc03 	bl	8008346 <USBD_CtlError>
              break;
 8007b40:	e000      	b.n	8007b44 <USBD_StdEPReq+0x1c8>
              break;
 8007b42:	bf00      	nop
          }
          break;
 8007b44:	e0ab      	b.n	8007c9e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	2b02      	cmp	r3, #2
 8007b50:	d002      	beq.n	8007b58 <USBD_StdEPReq+0x1dc>
 8007b52:	2b03      	cmp	r3, #3
 8007b54:	d032      	beq.n	8007bbc <USBD_StdEPReq+0x240>
 8007b56:	e097      	b.n	8007c88 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b58:	7bbb      	ldrb	r3, [r7, #14]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d007      	beq.n	8007b6e <USBD_StdEPReq+0x1f2>
 8007b5e:	7bbb      	ldrb	r3, [r7, #14]
 8007b60:	2b80      	cmp	r3, #128	; 0x80
 8007b62:	d004      	beq.n	8007b6e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007b64:	6839      	ldr	r1, [r7, #0]
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 fbed 	bl	8008346 <USBD_CtlError>
                break;
 8007b6c:	e091      	b.n	8007c92 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	da0b      	bge.n	8007b8e <USBD_StdEPReq+0x212>
 8007b76:	7bbb      	ldrb	r3, [r7, #14]
 8007b78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	4413      	add	r3, r2
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	3310      	adds	r3, #16
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	4413      	add	r3, r2
 8007b8a:	3304      	adds	r3, #4
 8007b8c:	e00b      	b.n	8007ba6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b8e:	7bbb      	ldrb	r3, [r7, #14]
 8007b90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b94:	4613      	mov	r3, r2
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	4413      	add	r3, r2
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	3304      	adds	r3, #4
 8007ba6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	2200      	movs	r2, #0
 8007bac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	2202      	movs	r2, #2
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 fc37 	bl	8008428 <USBD_CtlSendData>
              break;
 8007bba:	e06a      	b.n	8007c92 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007bbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	da11      	bge.n	8007be8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007bc4:	7bbb      	ldrb	r3, [r7, #14]
 8007bc6:	f003 020f 	and.w	r2, r3, #15
 8007bca:	6879      	ldr	r1, [r7, #4]
 8007bcc:	4613      	mov	r3, r2
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	4413      	add	r3, r2
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	440b      	add	r3, r1
 8007bd6:	3324      	adds	r3, #36	; 0x24
 8007bd8:	881b      	ldrh	r3, [r3, #0]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d117      	bne.n	8007c0e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007bde:	6839      	ldr	r1, [r7, #0]
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 fbb0 	bl	8008346 <USBD_CtlError>
                  break;
 8007be6:	e054      	b.n	8007c92 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007be8:	7bbb      	ldrb	r3, [r7, #14]
 8007bea:	f003 020f 	and.w	r2, r3, #15
 8007bee:	6879      	ldr	r1, [r7, #4]
 8007bf0:	4613      	mov	r3, r2
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	4413      	add	r3, r2
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	440b      	add	r3, r1
 8007bfa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007bfe:	881b      	ldrh	r3, [r3, #0]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d104      	bne.n	8007c0e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007c04:	6839      	ldr	r1, [r7, #0]
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 fb9d 	bl	8008346 <USBD_CtlError>
                  break;
 8007c0c:	e041      	b.n	8007c92 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	da0b      	bge.n	8007c2e <USBD_StdEPReq+0x2b2>
 8007c16:	7bbb      	ldrb	r3, [r7, #14]
 8007c18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c1c:	4613      	mov	r3, r2
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	4413      	add	r3, r2
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	3310      	adds	r3, #16
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	4413      	add	r3, r2
 8007c2a:	3304      	adds	r3, #4
 8007c2c:	e00b      	b.n	8007c46 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c2e:	7bbb      	ldrb	r3, [r7, #14]
 8007c30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c34:	4613      	mov	r3, r2
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	4413      	add	r3, r2
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	4413      	add	r3, r2
 8007c44:	3304      	adds	r3, #4
 8007c46:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007c48:	7bbb      	ldrb	r3, [r7, #14]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d002      	beq.n	8007c54 <USBD_StdEPReq+0x2d8>
 8007c4e:	7bbb      	ldrb	r3, [r7, #14]
 8007c50:	2b80      	cmp	r3, #128	; 0x80
 8007c52:	d103      	bne.n	8007c5c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	2200      	movs	r2, #0
 8007c58:	601a      	str	r2, [r3, #0]
 8007c5a:	e00e      	b.n	8007c7a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007c5c:	7bbb      	ldrb	r3, [r7, #14]
 8007c5e:	4619      	mov	r1, r3
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f001 f8ad 	bl	8008dc0 <USBD_LL_IsStallEP>
 8007c66:	4603      	mov	r3, r0
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d003      	beq.n	8007c74 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	601a      	str	r2, [r3, #0]
 8007c72:	e002      	b.n	8007c7a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	2200      	movs	r2, #0
 8007c78:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	2202      	movs	r2, #2
 8007c7e:	4619      	mov	r1, r3
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 fbd1 	bl	8008428 <USBD_CtlSendData>
              break;
 8007c86:	e004      	b.n	8007c92 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007c88:	6839      	ldr	r1, [r7, #0]
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 fb5b 	bl	8008346 <USBD_CtlError>
              break;
 8007c90:	bf00      	nop
          }
          break;
 8007c92:	e004      	b.n	8007c9e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007c94:	6839      	ldr	r1, [r7, #0]
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 fb55 	bl	8008346 <USBD_CtlError>
          break;
 8007c9c:	bf00      	nop
      }
      break;
 8007c9e:	e005      	b.n	8007cac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007ca0:	6839      	ldr	r1, [r7, #0]
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 fb4f 	bl	8008346 <USBD_CtlError>
      break;
 8007ca8:	e000      	b.n	8007cac <USBD_StdEPReq+0x330>
      break;
 8007caa:	bf00      	nop
  }

  return ret;
 8007cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
	...

08007cb8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	885b      	ldrh	r3, [r3, #2]
 8007cd2:	0a1b      	lsrs	r3, r3, #8
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	3b01      	subs	r3, #1
 8007cd8:	2b06      	cmp	r3, #6
 8007cda:	f200 8128 	bhi.w	8007f2e <USBD_GetDescriptor+0x276>
 8007cde:	a201      	add	r2, pc, #4	; (adr r2, 8007ce4 <USBD_GetDescriptor+0x2c>)
 8007ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ce4:	08007d01 	.word	0x08007d01
 8007ce8:	08007d19 	.word	0x08007d19
 8007cec:	08007d59 	.word	0x08007d59
 8007cf0:	08007f2f 	.word	0x08007f2f
 8007cf4:	08007f2f 	.word	0x08007f2f
 8007cf8:	08007ecf 	.word	0x08007ecf
 8007cfc:	08007efb 	.word	0x08007efb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	7c12      	ldrb	r2, [r2, #16]
 8007d0c:	f107 0108 	add.w	r1, r7, #8
 8007d10:	4610      	mov	r0, r2
 8007d12:	4798      	blx	r3
 8007d14:	60f8      	str	r0, [r7, #12]
      break;
 8007d16:	e112      	b.n	8007f3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	7c1b      	ldrb	r3, [r3, #16]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d10d      	bne.n	8007d3c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d28:	f107 0208 	add.w	r2, r7, #8
 8007d2c:	4610      	mov	r0, r2
 8007d2e:	4798      	blx	r3
 8007d30:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	3301      	adds	r3, #1
 8007d36:	2202      	movs	r2, #2
 8007d38:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007d3a:	e100      	b.n	8007f3e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d44:	f107 0208 	add.w	r2, r7, #8
 8007d48:	4610      	mov	r0, r2
 8007d4a:	4798      	blx	r3
 8007d4c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	3301      	adds	r3, #1
 8007d52:	2202      	movs	r2, #2
 8007d54:	701a      	strb	r2, [r3, #0]
      break;
 8007d56:	e0f2      	b.n	8007f3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	885b      	ldrh	r3, [r3, #2]
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	2b05      	cmp	r3, #5
 8007d60:	f200 80ac 	bhi.w	8007ebc <USBD_GetDescriptor+0x204>
 8007d64:	a201      	add	r2, pc, #4	; (adr r2, 8007d6c <USBD_GetDescriptor+0xb4>)
 8007d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d6a:	bf00      	nop
 8007d6c:	08007d85 	.word	0x08007d85
 8007d70:	08007db9 	.word	0x08007db9
 8007d74:	08007ded 	.word	0x08007ded
 8007d78:	08007e21 	.word	0x08007e21
 8007d7c:	08007e55 	.word	0x08007e55
 8007d80:	08007e89 	.word	0x08007e89
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d00b      	beq.n	8007da8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	7c12      	ldrb	r2, [r2, #16]
 8007d9c:	f107 0108 	add.w	r1, r7, #8
 8007da0:	4610      	mov	r0, r2
 8007da2:	4798      	blx	r3
 8007da4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007da6:	e091      	b.n	8007ecc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007da8:	6839      	ldr	r1, [r7, #0]
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 facb 	bl	8008346 <USBD_CtlError>
            err++;
 8007db0:	7afb      	ldrb	r3, [r7, #11]
 8007db2:	3301      	adds	r3, #1
 8007db4:	72fb      	strb	r3, [r7, #11]
          break;
 8007db6:	e089      	b.n	8007ecc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d00b      	beq.n	8007ddc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dca:	689b      	ldr	r3, [r3, #8]
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	7c12      	ldrb	r2, [r2, #16]
 8007dd0:	f107 0108 	add.w	r1, r7, #8
 8007dd4:	4610      	mov	r0, r2
 8007dd6:	4798      	blx	r3
 8007dd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dda:	e077      	b.n	8007ecc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ddc:	6839      	ldr	r1, [r7, #0]
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 fab1 	bl	8008346 <USBD_CtlError>
            err++;
 8007de4:	7afb      	ldrb	r3, [r7, #11]
 8007de6:	3301      	adds	r3, #1
 8007de8:	72fb      	strb	r3, [r7, #11]
          break;
 8007dea:	e06f      	b.n	8007ecc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d00b      	beq.n	8007e10 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	7c12      	ldrb	r2, [r2, #16]
 8007e04:	f107 0108 	add.w	r1, r7, #8
 8007e08:	4610      	mov	r0, r2
 8007e0a:	4798      	blx	r3
 8007e0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e0e:	e05d      	b.n	8007ecc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e10:	6839      	ldr	r1, [r7, #0]
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 fa97 	bl	8008346 <USBD_CtlError>
            err++;
 8007e18:	7afb      	ldrb	r3, [r7, #11]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e1e:	e055      	b.n	8007ecc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d00b      	beq.n	8007e44 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e32:	691b      	ldr	r3, [r3, #16]
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	7c12      	ldrb	r2, [r2, #16]
 8007e38:	f107 0108 	add.w	r1, r7, #8
 8007e3c:	4610      	mov	r0, r2
 8007e3e:	4798      	blx	r3
 8007e40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e42:	e043      	b.n	8007ecc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e44:	6839      	ldr	r1, [r7, #0]
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 fa7d 	bl	8008346 <USBD_CtlError>
            err++;
 8007e4c:	7afb      	ldrb	r3, [r7, #11]
 8007e4e:	3301      	adds	r3, #1
 8007e50:	72fb      	strb	r3, [r7, #11]
          break;
 8007e52:	e03b      	b.n	8007ecc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e5a:	695b      	ldr	r3, [r3, #20]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d00b      	beq.n	8007e78 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e66:	695b      	ldr	r3, [r3, #20]
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	7c12      	ldrb	r2, [r2, #16]
 8007e6c:	f107 0108 	add.w	r1, r7, #8
 8007e70:	4610      	mov	r0, r2
 8007e72:	4798      	blx	r3
 8007e74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e76:	e029      	b.n	8007ecc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e78:	6839      	ldr	r1, [r7, #0]
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 fa63 	bl	8008346 <USBD_CtlError>
            err++;
 8007e80:	7afb      	ldrb	r3, [r7, #11]
 8007e82:	3301      	adds	r3, #1
 8007e84:	72fb      	strb	r3, [r7, #11]
          break;
 8007e86:	e021      	b.n	8007ecc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e8e:	699b      	ldr	r3, [r3, #24]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d00b      	beq.n	8007eac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e9a:	699b      	ldr	r3, [r3, #24]
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	7c12      	ldrb	r2, [r2, #16]
 8007ea0:	f107 0108 	add.w	r1, r7, #8
 8007ea4:	4610      	mov	r0, r2
 8007ea6:	4798      	blx	r3
 8007ea8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007eaa:	e00f      	b.n	8007ecc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007eac:	6839      	ldr	r1, [r7, #0]
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 fa49 	bl	8008346 <USBD_CtlError>
            err++;
 8007eb4:	7afb      	ldrb	r3, [r7, #11]
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	72fb      	strb	r3, [r7, #11]
          break;
 8007eba:	e007      	b.n	8007ecc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007ebc:	6839      	ldr	r1, [r7, #0]
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 fa41 	bl	8008346 <USBD_CtlError>
          err++;
 8007ec4:	7afb      	ldrb	r3, [r7, #11]
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007eca:	bf00      	nop
      }
      break;
 8007ecc:	e037      	b.n	8007f3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	7c1b      	ldrb	r3, [r3, #16]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d109      	bne.n	8007eea <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ede:	f107 0208 	add.w	r2, r7, #8
 8007ee2:	4610      	mov	r0, r2
 8007ee4:	4798      	blx	r3
 8007ee6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ee8:	e029      	b.n	8007f3e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007eea:	6839      	ldr	r1, [r7, #0]
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 fa2a 	bl	8008346 <USBD_CtlError>
        err++;
 8007ef2:	7afb      	ldrb	r3, [r7, #11]
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	72fb      	strb	r3, [r7, #11]
      break;
 8007ef8:	e021      	b.n	8007f3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	7c1b      	ldrb	r3, [r3, #16]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d10d      	bne.n	8007f1e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f0a:	f107 0208 	add.w	r2, r7, #8
 8007f0e:	4610      	mov	r0, r2
 8007f10:	4798      	blx	r3
 8007f12:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	3301      	adds	r3, #1
 8007f18:	2207      	movs	r2, #7
 8007f1a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f1c:	e00f      	b.n	8007f3e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f1e:	6839      	ldr	r1, [r7, #0]
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 fa10 	bl	8008346 <USBD_CtlError>
        err++;
 8007f26:	7afb      	ldrb	r3, [r7, #11]
 8007f28:	3301      	adds	r3, #1
 8007f2a:	72fb      	strb	r3, [r7, #11]
      break;
 8007f2c:	e007      	b.n	8007f3e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007f2e:	6839      	ldr	r1, [r7, #0]
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 fa08 	bl	8008346 <USBD_CtlError>
      err++;
 8007f36:	7afb      	ldrb	r3, [r7, #11]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	72fb      	strb	r3, [r7, #11]
      break;
 8007f3c:	bf00      	nop
  }

  if (err != 0U)
 8007f3e:	7afb      	ldrb	r3, [r7, #11]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d11e      	bne.n	8007f82 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	88db      	ldrh	r3, [r3, #6]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d016      	beq.n	8007f7a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007f4c:	893b      	ldrh	r3, [r7, #8]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d00e      	beq.n	8007f70 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	88da      	ldrh	r2, [r3, #6]
 8007f56:	893b      	ldrh	r3, [r7, #8]
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	bf28      	it	cs
 8007f5c:	4613      	movcs	r3, r2
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007f62:	893b      	ldrh	r3, [r7, #8]
 8007f64:	461a      	mov	r2, r3
 8007f66:	68f9      	ldr	r1, [r7, #12]
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 fa5d 	bl	8008428 <USBD_CtlSendData>
 8007f6e:	e009      	b.n	8007f84 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007f70:	6839      	ldr	r1, [r7, #0]
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 f9e7 	bl	8008346 <USBD_CtlError>
 8007f78:	e004      	b.n	8007f84 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 faae 	bl	80084dc <USBD_CtlSendStatus>
 8007f80:	e000      	b.n	8007f84 <USBD_GetDescriptor+0x2cc>
    return;
 8007f82:	bf00      	nop
  }
}
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop

08007f8c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	889b      	ldrh	r3, [r3, #4]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d131      	bne.n	8008002 <USBD_SetAddress+0x76>
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	88db      	ldrh	r3, [r3, #6]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d12d      	bne.n	8008002 <USBD_SetAddress+0x76>
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	885b      	ldrh	r3, [r3, #2]
 8007faa:	2b7f      	cmp	r3, #127	; 0x7f
 8007fac:	d829      	bhi.n	8008002 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	885b      	ldrh	r3, [r3, #2]
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fb8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	2b03      	cmp	r3, #3
 8007fc4:	d104      	bne.n	8007fd0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007fc6:	6839      	ldr	r1, [r7, #0]
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 f9bc 	bl	8008346 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fce:	e01d      	b.n	800800c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	7bfa      	ldrb	r2, [r7, #15]
 8007fd4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007fd8:	7bfb      	ldrb	r3, [r7, #15]
 8007fda:	4619      	mov	r1, r3
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 ff1b 	bl	8008e18 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 fa7a 	bl	80084dc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007fe8:	7bfb      	ldrb	r3, [r7, #15]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d004      	beq.n	8007ff8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2202      	movs	r2, #2
 8007ff2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ff6:	e009      	b.n	800800c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008000:	e004      	b.n	800800c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008002:	6839      	ldr	r1, [r7, #0]
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 f99e 	bl	8008346 <USBD_CtlError>
  }
}
 800800a:	bf00      	nop
 800800c:	bf00      	nop
 800800e:	3710      	adds	r7, #16
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800801e:	2300      	movs	r3, #0
 8008020:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	885b      	ldrh	r3, [r3, #2]
 8008026:	b2da      	uxtb	r2, r3
 8008028:	4b4e      	ldr	r3, [pc, #312]	; (8008164 <USBD_SetConfig+0x150>)
 800802a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800802c:	4b4d      	ldr	r3, [pc, #308]	; (8008164 <USBD_SetConfig+0x150>)
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	2b01      	cmp	r3, #1
 8008032:	d905      	bls.n	8008040 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008034:	6839      	ldr	r1, [r7, #0]
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 f985 	bl	8008346 <USBD_CtlError>
    return USBD_FAIL;
 800803c:	2303      	movs	r3, #3
 800803e:	e08c      	b.n	800815a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008046:	b2db      	uxtb	r3, r3
 8008048:	2b02      	cmp	r3, #2
 800804a:	d002      	beq.n	8008052 <USBD_SetConfig+0x3e>
 800804c:	2b03      	cmp	r3, #3
 800804e:	d029      	beq.n	80080a4 <USBD_SetConfig+0x90>
 8008050:	e075      	b.n	800813e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008052:	4b44      	ldr	r3, [pc, #272]	; (8008164 <USBD_SetConfig+0x150>)
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d020      	beq.n	800809c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800805a:	4b42      	ldr	r3, [pc, #264]	; (8008164 <USBD_SetConfig+0x150>)
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	461a      	mov	r2, r3
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008064:	4b3f      	ldr	r3, [pc, #252]	; (8008164 <USBD_SetConfig+0x150>)
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	4619      	mov	r1, r3
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f7fe ffe7 	bl	800703e <USBD_SetClassConfig>
 8008070:	4603      	mov	r3, r0
 8008072:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008074:	7bfb      	ldrb	r3, [r7, #15]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d008      	beq.n	800808c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800807a:	6839      	ldr	r1, [r7, #0]
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 f962 	bl	8008346 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2202      	movs	r2, #2
 8008086:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800808a:	e065      	b.n	8008158 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 fa25 	bl	80084dc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2203      	movs	r2, #3
 8008096:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800809a:	e05d      	b.n	8008158 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f000 fa1d 	bl	80084dc <USBD_CtlSendStatus>
      break;
 80080a2:	e059      	b.n	8008158 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80080a4:	4b2f      	ldr	r3, [pc, #188]	; (8008164 <USBD_SetConfig+0x150>)
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d112      	bne.n	80080d2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2202      	movs	r2, #2
 80080b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80080b4:	4b2b      	ldr	r3, [pc, #172]	; (8008164 <USBD_SetConfig+0x150>)
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	461a      	mov	r2, r3
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80080be:	4b29      	ldr	r3, [pc, #164]	; (8008164 <USBD_SetConfig+0x150>)
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	4619      	mov	r1, r3
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f7fe ffd6 	bl	8007076 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 fa06 	bl	80084dc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80080d0:	e042      	b.n	8008158 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80080d2:	4b24      	ldr	r3, [pc, #144]	; (8008164 <USBD_SetConfig+0x150>)
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	461a      	mov	r2, r3
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	429a      	cmp	r2, r3
 80080de:	d02a      	beq.n	8008136 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	4619      	mov	r1, r3
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f7fe ffc4 	bl	8007076 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80080ee:	4b1d      	ldr	r3, [pc, #116]	; (8008164 <USBD_SetConfig+0x150>)
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	461a      	mov	r2, r3
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80080f8:	4b1a      	ldr	r3, [pc, #104]	; (8008164 <USBD_SetConfig+0x150>)
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	4619      	mov	r1, r3
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f7fe ff9d 	bl	800703e <USBD_SetClassConfig>
 8008104:	4603      	mov	r3, r0
 8008106:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008108:	7bfb      	ldrb	r3, [r7, #15]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d00f      	beq.n	800812e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800810e:	6839      	ldr	r1, [r7, #0]
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 f918 	bl	8008346 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	b2db      	uxtb	r3, r3
 800811c:	4619      	mov	r1, r3
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f7fe ffa9 	bl	8007076 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2202      	movs	r2, #2
 8008128:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800812c:	e014      	b.n	8008158 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 f9d4 	bl	80084dc <USBD_CtlSendStatus>
      break;
 8008134:	e010      	b.n	8008158 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 f9d0 	bl	80084dc <USBD_CtlSendStatus>
      break;
 800813c:	e00c      	b.n	8008158 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800813e:	6839      	ldr	r1, [r7, #0]
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 f900 	bl	8008346 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008146:	4b07      	ldr	r3, [pc, #28]	; (8008164 <USBD_SetConfig+0x150>)
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	4619      	mov	r1, r3
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f7fe ff92 	bl	8007076 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008152:	2303      	movs	r3, #3
 8008154:	73fb      	strb	r3, [r7, #15]
      break;
 8008156:	bf00      	nop
  }

  return ret;
 8008158:	7bfb      	ldrb	r3, [r7, #15]
}
 800815a:	4618      	mov	r0, r3
 800815c:	3710      	adds	r7, #16
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	200003e4 	.word	0x200003e4

08008168 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	88db      	ldrh	r3, [r3, #6]
 8008176:	2b01      	cmp	r3, #1
 8008178:	d004      	beq.n	8008184 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800817a:	6839      	ldr	r1, [r7, #0]
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 f8e2 	bl	8008346 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008182:	e023      	b.n	80081cc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800818a:	b2db      	uxtb	r3, r3
 800818c:	2b02      	cmp	r3, #2
 800818e:	dc02      	bgt.n	8008196 <USBD_GetConfig+0x2e>
 8008190:	2b00      	cmp	r3, #0
 8008192:	dc03      	bgt.n	800819c <USBD_GetConfig+0x34>
 8008194:	e015      	b.n	80081c2 <USBD_GetConfig+0x5a>
 8008196:	2b03      	cmp	r3, #3
 8008198:	d00b      	beq.n	80081b2 <USBD_GetConfig+0x4a>
 800819a:	e012      	b.n	80081c2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	3308      	adds	r3, #8
 80081a6:	2201      	movs	r2, #1
 80081a8:	4619      	mov	r1, r3
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 f93c 	bl	8008428 <USBD_CtlSendData>
        break;
 80081b0:	e00c      	b.n	80081cc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	3304      	adds	r3, #4
 80081b6:	2201      	movs	r2, #1
 80081b8:	4619      	mov	r1, r3
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 f934 	bl	8008428 <USBD_CtlSendData>
        break;
 80081c0:	e004      	b.n	80081cc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80081c2:	6839      	ldr	r1, [r7, #0]
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 f8be 	bl	8008346 <USBD_CtlError>
        break;
 80081ca:	bf00      	nop
}
 80081cc:	bf00      	nop
 80081ce:	3708      	adds	r7, #8
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	3b01      	subs	r3, #1
 80081e8:	2b02      	cmp	r3, #2
 80081ea:	d81e      	bhi.n	800822a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	88db      	ldrh	r3, [r3, #6]
 80081f0:	2b02      	cmp	r3, #2
 80081f2:	d004      	beq.n	80081fe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80081f4:	6839      	ldr	r1, [r7, #0]
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 f8a5 	bl	8008346 <USBD_CtlError>
        break;
 80081fc:	e01a      	b.n	8008234 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2201      	movs	r2, #1
 8008202:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800820a:	2b00      	cmp	r3, #0
 800820c:	d005      	beq.n	800821a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	68db      	ldr	r3, [r3, #12]
 8008212:	f043 0202 	orr.w	r2, r3, #2
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	330c      	adds	r3, #12
 800821e:	2202      	movs	r2, #2
 8008220:	4619      	mov	r1, r3
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 f900 	bl	8008428 <USBD_CtlSendData>
      break;
 8008228:	e004      	b.n	8008234 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800822a:	6839      	ldr	r1, [r7, #0]
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f000 f88a 	bl	8008346 <USBD_CtlError>
      break;
 8008232:	bf00      	nop
  }
}
 8008234:	bf00      	nop
 8008236:	3708      	adds	r7, #8
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	885b      	ldrh	r3, [r3, #2]
 800824a:	2b01      	cmp	r3, #1
 800824c:	d107      	bne.n	800825e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2201      	movs	r2, #1
 8008252:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 f940 	bl	80084dc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800825c:	e013      	b.n	8008286 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	885b      	ldrh	r3, [r3, #2]
 8008262:	2b02      	cmp	r3, #2
 8008264:	d10b      	bne.n	800827e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	889b      	ldrh	r3, [r3, #4]
 800826a:	0a1b      	lsrs	r3, r3, #8
 800826c:	b29b      	uxth	r3, r3
 800826e:	b2da      	uxtb	r2, r3
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 f930 	bl	80084dc <USBD_CtlSendStatus>
}
 800827c:	e003      	b.n	8008286 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800827e:	6839      	ldr	r1, [r7, #0]
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 f860 	bl	8008346 <USBD_CtlError>
}
 8008286:	bf00      	nop
 8008288:	3708      	adds	r7, #8
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}

0800828e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800828e:	b580      	push	{r7, lr}
 8008290:	b082      	sub	sp, #8
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
 8008296:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800829e:	b2db      	uxtb	r3, r3
 80082a0:	3b01      	subs	r3, #1
 80082a2:	2b02      	cmp	r3, #2
 80082a4:	d80b      	bhi.n	80082be <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	885b      	ldrh	r3, [r3, #2]
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d10c      	bne.n	80082c8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2200      	movs	r2, #0
 80082b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 f910 	bl	80084dc <USBD_CtlSendStatus>
      }
      break;
 80082bc:	e004      	b.n	80082c8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80082be:	6839      	ldr	r1, [r7, #0]
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 f840 	bl	8008346 <USBD_CtlError>
      break;
 80082c6:	e000      	b.n	80082ca <USBD_ClrFeature+0x3c>
      break;
 80082c8:	bf00      	nop
  }
}
 80082ca:	bf00      	nop
 80082cc:	3708      	adds	r7, #8
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b084      	sub	sp, #16
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
 80082da:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	781a      	ldrb	r2, [r3, #0]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	3301      	adds	r3, #1
 80082ec:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	781a      	ldrb	r2, [r3, #0]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	3301      	adds	r3, #1
 80082fa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80082fc:	68f8      	ldr	r0, [r7, #12]
 80082fe:	f7ff fa41 	bl	8007784 <SWAPBYTE>
 8008302:	4603      	mov	r3, r0
 8008304:	461a      	mov	r2, r3
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	3301      	adds	r3, #1
 800830e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	3301      	adds	r3, #1
 8008314:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008316:	68f8      	ldr	r0, [r7, #12]
 8008318:	f7ff fa34 	bl	8007784 <SWAPBYTE>
 800831c:	4603      	mov	r3, r0
 800831e:	461a      	mov	r2, r3
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	3301      	adds	r3, #1
 8008328:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	3301      	adds	r3, #1
 800832e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008330:	68f8      	ldr	r0, [r7, #12]
 8008332:	f7ff fa27 	bl	8007784 <SWAPBYTE>
 8008336:	4603      	mov	r3, r0
 8008338:	461a      	mov	r2, r3
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	80da      	strh	r2, [r3, #6]
}
 800833e:	bf00      	nop
 8008340:	3710      	adds	r7, #16
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008346:	b580      	push	{r7, lr}
 8008348:	b082      	sub	sp, #8
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
 800834e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008350:	2180      	movs	r1, #128	; 0x80
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 fcf6 	bl	8008d44 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008358:	2100      	movs	r1, #0
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 fcf2 	bl	8008d44 <USBD_LL_StallEP>
}
 8008360:	bf00      	nop
 8008362:	3708      	adds	r7, #8
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b086      	sub	sp, #24
 800836c:	af00      	add	r7, sp, #0
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	60b9      	str	r1, [r7, #8]
 8008372:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008374:	2300      	movs	r3, #0
 8008376:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d036      	beq.n	80083ec <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008382:	6938      	ldr	r0, [r7, #16]
 8008384:	f000 f836 	bl	80083f4 <USBD_GetLen>
 8008388:	4603      	mov	r3, r0
 800838a:	3301      	adds	r3, #1
 800838c:	b29b      	uxth	r3, r3
 800838e:	005b      	lsls	r3, r3, #1
 8008390:	b29a      	uxth	r2, r3
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008396:	7dfb      	ldrb	r3, [r7, #23]
 8008398:	68ba      	ldr	r2, [r7, #8]
 800839a:	4413      	add	r3, r2
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	7812      	ldrb	r2, [r2, #0]
 80083a0:	701a      	strb	r2, [r3, #0]
  idx++;
 80083a2:	7dfb      	ldrb	r3, [r7, #23]
 80083a4:	3301      	adds	r3, #1
 80083a6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80083a8:	7dfb      	ldrb	r3, [r7, #23]
 80083aa:	68ba      	ldr	r2, [r7, #8]
 80083ac:	4413      	add	r3, r2
 80083ae:	2203      	movs	r2, #3
 80083b0:	701a      	strb	r2, [r3, #0]
  idx++;
 80083b2:	7dfb      	ldrb	r3, [r7, #23]
 80083b4:	3301      	adds	r3, #1
 80083b6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80083b8:	e013      	b.n	80083e2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80083ba:	7dfb      	ldrb	r3, [r7, #23]
 80083bc:	68ba      	ldr	r2, [r7, #8]
 80083be:	4413      	add	r3, r2
 80083c0:	693a      	ldr	r2, [r7, #16]
 80083c2:	7812      	ldrb	r2, [r2, #0]
 80083c4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	3301      	adds	r3, #1
 80083ca:	613b      	str	r3, [r7, #16]
    idx++;
 80083cc:	7dfb      	ldrb	r3, [r7, #23]
 80083ce:	3301      	adds	r3, #1
 80083d0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80083d2:	7dfb      	ldrb	r3, [r7, #23]
 80083d4:	68ba      	ldr	r2, [r7, #8]
 80083d6:	4413      	add	r3, r2
 80083d8:	2200      	movs	r2, #0
 80083da:	701a      	strb	r2, [r3, #0]
    idx++;
 80083dc:	7dfb      	ldrb	r3, [r7, #23]
 80083de:	3301      	adds	r3, #1
 80083e0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d1e7      	bne.n	80083ba <USBD_GetString+0x52>
 80083ea:	e000      	b.n	80083ee <USBD_GetString+0x86>
    return;
 80083ec:	bf00      	nop
  }
}
 80083ee:	3718      	adds	r7, #24
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b085      	sub	sp, #20
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80083fc:	2300      	movs	r3, #0
 80083fe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008404:	e005      	b.n	8008412 <USBD_GetLen+0x1e>
  {
    len++;
 8008406:	7bfb      	ldrb	r3, [r7, #15]
 8008408:	3301      	adds	r3, #1
 800840a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	3301      	adds	r3, #1
 8008410:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d1f5      	bne.n	8008406 <USBD_GetLen+0x12>
  }

  return len;
 800841a:	7bfb      	ldrb	r3, [r7, #15]
}
 800841c:	4618      	mov	r0, r3
 800841e:	3714      	adds	r7, #20
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr

08008428 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af00      	add	r7, sp, #0
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	60b9      	str	r1, [r7, #8]
 8008432:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2202      	movs	r2, #2
 8008438:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	68ba      	ldr	r2, [r7, #8]
 800844c:	2100      	movs	r1, #0
 800844e:	68f8      	ldr	r0, [r7, #12]
 8008450:	f000 fd01 	bl	8008e56 <USBD_LL_Transmit>

  return USBD_OK;
 8008454:	2300      	movs	r3, #0
}
 8008456:	4618      	mov	r0, r3
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800845e:	b580      	push	{r7, lr}
 8008460:	b084      	sub	sp, #16
 8008462:	af00      	add	r7, sp, #0
 8008464:	60f8      	str	r0, [r7, #12]
 8008466:	60b9      	str	r1, [r7, #8]
 8008468:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	68ba      	ldr	r2, [r7, #8]
 800846e:	2100      	movs	r1, #0
 8008470:	68f8      	ldr	r0, [r7, #12]
 8008472:	f000 fcf0 	bl	8008e56 <USBD_LL_Transmit>

  return USBD_OK;
 8008476:	2300      	movs	r3, #0
}
 8008478:	4618      	mov	r0, r3
 800847a:	3710      	adds	r7, #16
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b084      	sub	sp, #16
 8008484:	af00      	add	r7, sp, #0
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2203      	movs	r2, #3
 8008490:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	68ba      	ldr	r2, [r7, #8]
 80084a8:	2100      	movs	r1, #0
 80084aa:	68f8      	ldr	r0, [r7, #12]
 80084ac:	f000 fcf4 	bl	8008e98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3710      	adds	r7, #16
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}

080084ba <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80084ba:	b580      	push	{r7, lr}
 80084bc:	b084      	sub	sp, #16
 80084be:	af00      	add	r7, sp, #0
 80084c0:	60f8      	str	r0, [r7, #12]
 80084c2:	60b9      	str	r1, [r7, #8]
 80084c4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	68ba      	ldr	r2, [r7, #8]
 80084ca:	2100      	movs	r1, #0
 80084cc:	68f8      	ldr	r0, [r7, #12]
 80084ce:	f000 fce3 	bl	8008e98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084d2:	2300      	movs	r3, #0
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3710      	adds	r7, #16
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b082      	sub	sp, #8
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2204      	movs	r2, #4
 80084e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80084ec:	2300      	movs	r3, #0
 80084ee:	2200      	movs	r2, #0
 80084f0:	2100      	movs	r1, #0
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 fcaf 	bl	8008e56 <USBD_LL_Transmit>

  return USBD_OK;
 80084f8:	2300      	movs	r3, #0
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3708      	adds	r7, #8
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}

08008502 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008502:	b580      	push	{r7, lr}
 8008504:	b082      	sub	sp, #8
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2205      	movs	r2, #5
 800850e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008512:	2300      	movs	r3, #0
 8008514:	2200      	movs	r2, #0
 8008516:	2100      	movs	r1, #0
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 fcbd 	bl	8008e98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800851e:	2300      	movs	r3, #0
}
 8008520:	4618      	mov	r0, r3
 8008522:	3708      	adds	r7, #8
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800852c:	2200      	movs	r2, #0
 800852e:	4912      	ldr	r1, [pc, #72]	; (8008578 <MX_USB_DEVICE_Init+0x50>)
 8008530:	4812      	ldr	r0, [pc, #72]	; (800857c <MX_USB_DEVICE_Init+0x54>)
 8008532:	f7fe fd07 	bl	8006f44 <USBD_Init>
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d001      	beq.n	8008540 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800853c:	f7f8 fbe4 	bl	8000d08 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008540:	490f      	ldr	r1, [pc, #60]	; (8008580 <MX_USB_DEVICE_Init+0x58>)
 8008542:	480e      	ldr	r0, [pc, #56]	; (800857c <MX_USB_DEVICE_Init+0x54>)
 8008544:	f7fe fd2e 	bl	8006fa4 <USBD_RegisterClass>
 8008548:	4603      	mov	r3, r0
 800854a:	2b00      	cmp	r3, #0
 800854c:	d001      	beq.n	8008552 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800854e:	f7f8 fbdb 	bl	8000d08 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008552:	490c      	ldr	r1, [pc, #48]	; (8008584 <MX_USB_DEVICE_Init+0x5c>)
 8008554:	4809      	ldr	r0, [pc, #36]	; (800857c <MX_USB_DEVICE_Init+0x54>)
 8008556:	f7fe fc1f 	bl	8006d98 <USBD_CDC_RegisterInterface>
 800855a:	4603      	mov	r3, r0
 800855c:	2b00      	cmp	r3, #0
 800855e:	d001      	beq.n	8008564 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008560:	f7f8 fbd2 	bl	8000d08 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008564:	4805      	ldr	r0, [pc, #20]	; (800857c <MX_USB_DEVICE_Init+0x54>)
 8008566:	f7fe fd53 	bl	8007010 <USBD_Start>
 800856a:	4603      	mov	r3, r0
 800856c:	2b00      	cmp	r3, #0
 800856e:	d001      	beq.n	8008574 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008570:	f7f8 fbca 	bl	8000d08 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008574:	bf00      	nop
 8008576:	bd80      	pop	{r7, pc}
 8008578:	200001cc 	.word	0x200001cc
 800857c:	200003e8 	.word	0x200003e8
 8008580:	20000138 	.word	0x20000138
 8008584:	200001b8 	.word	0x200001b8

08008588 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800858c:	2200      	movs	r2, #0
 800858e:	4905      	ldr	r1, [pc, #20]	; (80085a4 <CDC_Init_FS+0x1c>)
 8008590:	4805      	ldr	r0, [pc, #20]	; (80085a8 <CDC_Init_FS+0x20>)
 8008592:	f7fe fc1b 	bl	8006dcc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008596:	4905      	ldr	r1, [pc, #20]	; (80085ac <CDC_Init_FS+0x24>)
 8008598:	4803      	ldr	r0, [pc, #12]	; (80085a8 <CDC_Init_FS+0x20>)
 800859a:	f7fe fc39 	bl	8006e10 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800859e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	bd80      	pop	{r7, pc}
 80085a4:	20000ec4 	.word	0x20000ec4
 80085a8:	200003e8 	.word	0x200003e8
 80085ac:	200006c4 	.word	0x200006c4

080085b0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80085b0:	b480      	push	{r7}
 80085b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80085b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr

080085c0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	4603      	mov	r3, r0
 80085c8:	6039      	str	r1, [r7, #0]
 80085ca:	71fb      	strb	r3, [r7, #7]
 80085cc:	4613      	mov	r3, r2
 80085ce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80085d0:	79fb      	ldrb	r3, [r7, #7]
 80085d2:	2b23      	cmp	r3, #35	; 0x23
 80085d4:	d84a      	bhi.n	800866c <CDC_Control_FS+0xac>
 80085d6:	a201      	add	r2, pc, #4	; (adr r2, 80085dc <CDC_Control_FS+0x1c>)
 80085d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085dc:	0800866d 	.word	0x0800866d
 80085e0:	0800866d 	.word	0x0800866d
 80085e4:	0800866d 	.word	0x0800866d
 80085e8:	0800866d 	.word	0x0800866d
 80085ec:	0800866d 	.word	0x0800866d
 80085f0:	0800866d 	.word	0x0800866d
 80085f4:	0800866d 	.word	0x0800866d
 80085f8:	0800866d 	.word	0x0800866d
 80085fc:	0800866d 	.word	0x0800866d
 8008600:	0800866d 	.word	0x0800866d
 8008604:	0800866d 	.word	0x0800866d
 8008608:	0800866d 	.word	0x0800866d
 800860c:	0800866d 	.word	0x0800866d
 8008610:	0800866d 	.word	0x0800866d
 8008614:	0800866d 	.word	0x0800866d
 8008618:	0800866d 	.word	0x0800866d
 800861c:	0800866d 	.word	0x0800866d
 8008620:	0800866d 	.word	0x0800866d
 8008624:	0800866d 	.word	0x0800866d
 8008628:	0800866d 	.word	0x0800866d
 800862c:	0800866d 	.word	0x0800866d
 8008630:	0800866d 	.word	0x0800866d
 8008634:	0800866d 	.word	0x0800866d
 8008638:	0800866d 	.word	0x0800866d
 800863c:	0800866d 	.word	0x0800866d
 8008640:	0800866d 	.word	0x0800866d
 8008644:	0800866d 	.word	0x0800866d
 8008648:	0800866d 	.word	0x0800866d
 800864c:	0800866d 	.word	0x0800866d
 8008650:	0800866d 	.word	0x0800866d
 8008654:	0800866d 	.word	0x0800866d
 8008658:	0800866d 	.word	0x0800866d
 800865c:	0800866d 	.word	0x0800866d
 8008660:	0800866d 	.word	0x0800866d
 8008664:	0800866d 	.word	0x0800866d
 8008668:	0800866d 	.word	0x0800866d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800866c:	bf00      	nop
  }

  return (USBD_OK);
 800866e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008670:	4618      	mov	r0, r3
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
strcpy(Buf,Buffer);
 8008686:	4b09      	ldr	r3, [pc, #36]	; (80086ac <CDC_Receive_FS+0x30>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4619      	mov	r1, r3
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 fca7 	bl	8008fe0 <strcpy>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008692:	6879      	ldr	r1, [r7, #4]
 8008694:	4806      	ldr	r0, [pc, #24]	; (80086b0 <CDC_Receive_FS+0x34>)
 8008696:	f7fe fbbb 	bl	8006e10 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800869a:	4805      	ldr	r0, [pc, #20]	; (80086b0 <CDC_Receive_FS+0x34>)
 800869c:	f7fe fc1c 	bl	8006ed8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80086a0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3708      	adds	r7, #8
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	200016c4 	.word	0x200016c4
 80086b0:	200003e8 	.word	0x200003e8

080086b4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b084      	sub	sp, #16
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	460b      	mov	r3, r1
 80086be:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80086c0:	2300      	movs	r3, #0
 80086c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80086c4:	4b0d      	ldr	r3, [pc, #52]	; (80086fc <CDC_Transmit_FS+0x48>)
 80086c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086ca:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d001      	beq.n	80086da <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80086d6:	2301      	movs	r3, #1
 80086d8:	e00b      	b.n	80086f2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80086da:	887b      	ldrh	r3, [r7, #2]
 80086dc:	461a      	mov	r2, r3
 80086de:	6879      	ldr	r1, [r7, #4]
 80086e0:	4806      	ldr	r0, [pc, #24]	; (80086fc <CDC_Transmit_FS+0x48>)
 80086e2:	f7fe fb73 	bl	8006dcc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80086e6:	4805      	ldr	r0, [pc, #20]	; (80086fc <CDC_Transmit_FS+0x48>)
 80086e8:	f7fe fbb0 	bl	8006e4c <USBD_CDC_TransmitPacket>
 80086ec:	4603      	mov	r3, r0
 80086ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80086f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3710      	adds	r7, #16
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
 80086fa:	bf00      	nop
 80086fc:	200003e8 	.word	0x200003e8

08008700 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008700:	b480      	push	{r7}
 8008702:	b087      	sub	sp, #28
 8008704:	af00      	add	r7, sp, #0
 8008706:	60f8      	str	r0, [r7, #12]
 8008708:	60b9      	str	r1, [r7, #8]
 800870a:	4613      	mov	r3, r2
 800870c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800870e:	2300      	movs	r3, #0
 8008710:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008712:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008716:	4618      	mov	r0, r3
 8008718:	371c      	adds	r7, #28
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr
	...

08008724 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008724:	b480      	push	{r7}
 8008726:	b083      	sub	sp, #12
 8008728:	af00      	add	r7, sp, #0
 800872a:	4603      	mov	r3, r0
 800872c:	6039      	str	r1, [r7, #0]
 800872e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	2212      	movs	r2, #18
 8008734:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008736:	4b03      	ldr	r3, [pc, #12]	; (8008744 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008738:	4618      	mov	r0, r3
 800873a:	370c      	adds	r7, #12
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr
 8008744:	200001e8 	.word	0x200001e8

08008748 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008748:	b480      	push	{r7}
 800874a:	b083      	sub	sp, #12
 800874c:	af00      	add	r7, sp, #0
 800874e:	4603      	mov	r3, r0
 8008750:	6039      	str	r1, [r7, #0]
 8008752:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	2204      	movs	r2, #4
 8008758:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800875a:	4b03      	ldr	r3, [pc, #12]	; (8008768 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800875c:	4618      	mov	r0, r3
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr
 8008768:	200001fc 	.word	0x200001fc

0800876c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
 8008772:	4603      	mov	r3, r0
 8008774:	6039      	str	r1, [r7, #0]
 8008776:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008778:	79fb      	ldrb	r3, [r7, #7]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d105      	bne.n	800878a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800877e:	683a      	ldr	r2, [r7, #0]
 8008780:	4907      	ldr	r1, [pc, #28]	; (80087a0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008782:	4808      	ldr	r0, [pc, #32]	; (80087a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008784:	f7ff fdf0 	bl	8008368 <USBD_GetString>
 8008788:	e004      	b.n	8008794 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800878a:	683a      	ldr	r2, [r7, #0]
 800878c:	4904      	ldr	r1, [pc, #16]	; (80087a0 <USBD_FS_ProductStrDescriptor+0x34>)
 800878e:	4805      	ldr	r0, [pc, #20]	; (80087a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008790:	f7ff fdea 	bl	8008368 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008794:	4b02      	ldr	r3, [pc, #8]	; (80087a0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008796:	4618      	mov	r0, r3
 8008798:	3708      	adds	r7, #8
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	200016c8 	.word	0x200016c8
 80087a4:	08009180 	.word	0x08009180

080087a8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b082      	sub	sp, #8
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	4603      	mov	r3, r0
 80087b0:	6039      	str	r1, [r7, #0]
 80087b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80087b4:	683a      	ldr	r2, [r7, #0]
 80087b6:	4904      	ldr	r1, [pc, #16]	; (80087c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80087b8:	4804      	ldr	r0, [pc, #16]	; (80087cc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80087ba:	f7ff fdd5 	bl	8008368 <USBD_GetString>
  return USBD_StrDesc;
 80087be:	4b02      	ldr	r3, [pc, #8]	; (80087c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3708      	adds	r7, #8
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	200016c8 	.word	0x200016c8
 80087cc:	08009198 	.word	0x08009198

080087d0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	4603      	mov	r3, r0
 80087d8:	6039      	str	r1, [r7, #0]
 80087da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	221a      	movs	r2, #26
 80087e0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80087e2:	f000 f843 	bl	800886c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80087e6:	4b02      	ldr	r3, [pc, #8]	; (80087f0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3708      	adds	r7, #8
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}
 80087f0:	20000200 	.word	0x20000200

080087f4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	4603      	mov	r3, r0
 80087fc:	6039      	str	r1, [r7, #0]
 80087fe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008800:	79fb      	ldrb	r3, [r7, #7]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d105      	bne.n	8008812 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008806:	683a      	ldr	r2, [r7, #0]
 8008808:	4907      	ldr	r1, [pc, #28]	; (8008828 <USBD_FS_ConfigStrDescriptor+0x34>)
 800880a:	4808      	ldr	r0, [pc, #32]	; (800882c <USBD_FS_ConfigStrDescriptor+0x38>)
 800880c:	f7ff fdac 	bl	8008368 <USBD_GetString>
 8008810:	e004      	b.n	800881c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008812:	683a      	ldr	r2, [r7, #0]
 8008814:	4904      	ldr	r1, [pc, #16]	; (8008828 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008816:	4805      	ldr	r0, [pc, #20]	; (800882c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008818:	f7ff fda6 	bl	8008368 <USBD_GetString>
  }
  return USBD_StrDesc;
 800881c:	4b02      	ldr	r3, [pc, #8]	; (8008828 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800881e:	4618      	mov	r0, r3
 8008820:	3708      	adds	r7, #8
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	200016c8 	.word	0x200016c8
 800882c:	080091ac 	.word	0x080091ac

08008830 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b082      	sub	sp, #8
 8008834:	af00      	add	r7, sp, #0
 8008836:	4603      	mov	r3, r0
 8008838:	6039      	str	r1, [r7, #0]
 800883a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800883c:	79fb      	ldrb	r3, [r7, #7]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d105      	bne.n	800884e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008842:	683a      	ldr	r2, [r7, #0]
 8008844:	4907      	ldr	r1, [pc, #28]	; (8008864 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008846:	4808      	ldr	r0, [pc, #32]	; (8008868 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008848:	f7ff fd8e 	bl	8008368 <USBD_GetString>
 800884c:	e004      	b.n	8008858 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800884e:	683a      	ldr	r2, [r7, #0]
 8008850:	4904      	ldr	r1, [pc, #16]	; (8008864 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008852:	4805      	ldr	r0, [pc, #20]	; (8008868 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008854:	f7ff fd88 	bl	8008368 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008858:	4b02      	ldr	r3, [pc, #8]	; (8008864 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800885a:	4618      	mov	r0, r3
 800885c:	3708      	adds	r7, #8
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
 8008862:	bf00      	nop
 8008864:	200016c8 	.word	0x200016c8
 8008868:	080091b8 	.word	0x080091b8

0800886c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008872:	4b0f      	ldr	r3, [pc, #60]	; (80088b0 <Get_SerialNum+0x44>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008878:	4b0e      	ldr	r3, [pc, #56]	; (80088b4 <Get_SerialNum+0x48>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800887e:	4b0e      	ldr	r3, [pc, #56]	; (80088b8 <Get_SerialNum+0x4c>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008884:	68fa      	ldr	r2, [r7, #12]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	4413      	add	r3, r2
 800888a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d009      	beq.n	80088a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008892:	2208      	movs	r2, #8
 8008894:	4909      	ldr	r1, [pc, #36]	; (80088bc <Get_SerialNum+0x50>)
 8008896:	68f8      	ldr	r0, [r7, #12]
 8008898:	f000 f814 	bl	80088c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800889c:	2204      	movs	r2, #4
 800889e:	4908      	ldr	r1, [pc, #32]	; (80088c0 <Get_SerialNum+0x54>)
 80088a0:	68b8      	ldr	r0, [r7, #8]
 80088a2:	f000 f80f 	bl	80088c4 <IntToUnicode>
  }
}
 80088a6:	bf00      	nop
 80088a8:	3710      	adds	r7, #16
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	bf00      	nop
 80088b0:	1fff7a10 	.word	0x1fff7a10
 80088b4:	1fff7a14 	.word	0x1fff7a14
 80088b8:	1fff7a18 	.word	0x1fff7a18
 80088bc:	20000202 	.word	0x20000202
 80088c0:	20000212 	.word	0x20000212

080088c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b087      	sub	sp, #28
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	4613      	mov	r3, r2
 80088d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80088d2:	2300      	movs	r3, #0
 80088d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80088d6:	2300      	movs	r3, #0
 80088d8:	75fb      	strb	r3, [r7, #23]
 80088da:	e027      	b.n	800892c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	0f1b      	lsrs	r3, r3, #28
 80088e0:	2b09      	cmp	r3, #9
 80088e2:	d80b      	bhi.n	80088fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	0f1b      	lsrs	r3, r3, #28
 80088e8:	b2da      	uxtb	r2, r3
 80088ea:	7dfb      	ldrb	r3, [r7, #23]
 80088ec:	005b      	lsls	r3, r3, #1
 80088ee:	4619      	mov	r1, r3
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	440b      	add	r3, r1
 80088f4:	3230      	adds	r2, #48	; 0x30
 80088f6:	b2d2      	uxtb	r2, r2
 80088f8:	701a      	strb	r2, [r3, #0]
 80088fa:	e00a      	b.n	8008912 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	0f1b      	lsrs	r3, r3, #28
 8008900:	b2da      	uxtb	r2, r3
 8008902:	7dfb      	ldrb	r3, [r7, #23]
 8008904:	005b      	lsls	r3, r3, #1
 8008906:	4619      	mov	r1, r3
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	440b      	add	r3, r1
 800890c:	3237      	adds	r2, #55	; 0x37
 800890e:	b2d2      	uxtb	r2, r2
 8008910:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	011b      	lsls	r3, r3, #4
 8008916:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008918:	7dfb      	ldrb	r3, [r7, #23]
 800891a:	005b      	lsls	r3, r3, #1
 800891c:	3301      	adds	r3, #1
 800891e:	68ba      	ldr	r2, [r7, #8]
 8008920:	4413      	add	r3, r2
 8008922:	2200      	movs	r2, #0
 8008924:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008926:	7dfb      	ldrb	r3, [r7, #23]
 8008928:	3301      	adds	r3, #1
 800892a:	75fb      	strb	r3, [r7, #23]
 800892c:	7dfa      	ldrb	r2, [r7, #23]
 800892e:	79fb      	ldrb	r3, [r7, #7]
 8008930:	429a      	cmp	r2, r3
 8008932:	d3d3      	bcc.n	80088dc <IntToUnicode+0x18>
  }
}
 8008934:	bf00      	nop
 8008936:	bf00      	nop
 8008938:	371c      	adds	r7, #28
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr
	...

08008944 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b08a      	sub	sp, #40	; 0x28
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800894c:	f107 0314 	add.w	r3, r7, #20
 8008950:	2200      	movs	r2, #0
 8008952:	601a      	str	r2, [r3, #0]
 8008954:	605a      	str	r2, [r3, #4]
 8008956:	609a      	str	r2, [r3, #8]
 8008958:	60da      	str	r2, [r3, #12]
 800895a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008964:	d147      	bne.n	80089f6 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008966:	2300      	movs	r3, #0
 8008968:	613b      	str	r3, [r7, #16]
 800896a:	4b25      	ldr	r3, [pc, #148]	; (8008a00 <HAL_PCD_MspInit+0xbc>)
 800896c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800896e:	4a24      	ldr	r2, [pc, #144]	; (8008a00 <HAL_PCD_MspInit+0xbc>)
 8008970:	f043 0301 	orr.w	r3, r3, #1
 8008974:	6313      	str	r3, [r2, #48]	; 0x30
 8008976:	4b22      	ldr	r3, [pc, #136]	; (8008a00 <HAL_PCD_MspInit+0xbc>)
 8008978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800897a:	f003 0301 	and.w	r3, r3, #1
 800897e:	613b      	str	r3, [r7, #16]
 8008980:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008982:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008988:	2300      	movs	r3, #0
 800898a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800898c:	2300      	movs	r3, #0
 800898e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008990:	f107 0314 	add.w	r3, r7, #20
 8008994:	4619      	mov	r1, r3
 8008996:	481b      	ldr	r0, [pc, #108]	; (8008a04 <HAL_PCD_MspInit+0xc0>)
 8008998:	f7f8 fd94 	bl	80014c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800899c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80089a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089a2:	2302      	movs	r3, #2
 80089a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089a6:	2300      	movs	r3, #0
 80089a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80089aa:	2300      	movs	r3, #0
 80089ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80089ae:	230a      	movs	r3, #10
 80089b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80089b2:	f107 0314 	add.w	r3, r7, #20
 80089b6:	4619      	mov	r1, r3
 80089b8:	4812      	ldr	r0, [pc, #72]	; (8008a04 <HAL_PCD_MspInit+0xc0>)
 80089ba:	f7f8 fd83 	bl	80014c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80089be:	4b10      	ldr	r3, [pc, #64]	; (8008a00 <HAL_PCD_MspInit+0xbc>)
 80089c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089c2:	4a0f      	ldr	r2, [pc, #60]	; (8008a00 <HAL_PCD_MspInit+0xbc>)
 80089c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089c8:	6353      	str	r3, [r2, #52]	; 0x34
 80089ca:	2300      	movs	r3, #0
 80089cc:	60fb      	str	r3, [r7, #12]
 80089ce:	4b0c      	ldr	r3, [pc, #48]	; (8008a00 <HAL_PCD_MspInit+0xbc>)
 80089d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089d2:	4a0b      	ldr	r2, [pc, #44]	; (8008a00 <HAL_PCD_MspInit+0xbc>)
 80089d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80089d8:	6453      	str	r3, [r2, #68]	; 0x44
 80089da:	4b09      	ldr	r3, [pc, #36]	; (8008a00 <HAL_PCD_MspInit+0xbc>)
 80089dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089e2:	60fb      	str	r3, [r7, #12]
 80089e4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80089e6:	2200      	movs	r2, #0
 80089e8:	2100      	movs	r1, #0
 80089ea:	2043      	movs	r0, #67	; 0x43
 80089ec:	f7f8 fd25 	bl	800143a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80089f0:	2043      	movs	r0, #67	; 0x43
 80089f2:	f7f8 fd3e 	bl	8001472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80089f6:	bf00      	nop
 80089f8:	3728      	adds	r7, #40	; 0x28
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	bf00      	nop
 8008a00:	40023800 	.word	0x40023800
 8008a04:	40020000 	.word	0x40020000

08008a08 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	4610      	mov	r0, r2
 8008a20:	f7fe fb43 	bl	80070aa <USBD_LL_SetupStage>
}
 8008a24:	bf00      	nop
 8008a26:	3708      	adds	r7, #8
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b082      	sub	sp, #8
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	460b      	mov	r3, r1
 8008a36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008a3e:	78fa      	ldrb	r2, [r7, #3]
 8008a40:	6879      	ldr	r1, [r7, #4]
 8008a42:	4613      	mov	r3, r2
 8008a44:	00db      	lsls	r3, r3, #3
 8008a46:	4413      	add	r3, r2
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	440b      	add	r3, r1
 8008a4c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008a50:	681a      	ldr	r2, [r3, #0]
 8008a52:	78fb      	ldrb	r3, [r7, #3]
 8008a54:	4619      	mov	r1, r3
 8008a56:	f7fe fb7d 	bl	8007154 <USBD_LL_DataOutStage>
}
 8008a5a:	bf00      	nop
 8008a5c:	3708      	adds	r7, #8
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}

08008a62 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a62:	b580      	push	{r7, lr}
 8008a64:	b082      	sub	sp, #8
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]
 8008a6a:	460b      	mov	r3, r1
 8008a6c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008a74:	78fa      	ldrb	r2, [r7, #3]
 8008a76:	6879      	ldr	r1, [r7, #4]
 8008a78:	4613      	mov	r3, r2
 8008a7a:	00db      	lsls	r3, r3, #3
 8008a7c:	4413      	add	r3, r2
 8008a7e:	009b      	lsls	r3, r3, #2
 8008a80:	440b      	add	r3, r1
 8008a82:	334c      	adds	r3, #76	; 0x4c
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	78fb      	ldrb	r3, [r7, #3]
 8008a88:	4619      	mov	r1, r3
 8008a8a:	f7fe fc16 	bl	80072ba <USBD_LL_DataInStage>
}
 8008a8e:	bf00      	nop
 8008a90:	3708      	adds	r7, #8
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}

08008a96 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a96:	b580      	push	{r7, lr}
 8008a98:	b082      	sub	sp, #8
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f7fe fd4a 	bl	800753e <USBD_LL_SOF>
}
 8008aaa:	bf00      	nop
 8008aac:	3708      	adds	r7, #8
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}

08008ab2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ab2:	b580      	push	{r7, lr}
 8008ab4:	b084      	sub	sp, #16
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008aba:	2301      	movs	r3, #1
 8008abc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	68db      	ldr	r3, [r3, #12]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d102      	bne.n	8008acc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	73fb      	strb	r3, [r7, #15]
 8008aca:	e008      	b.n	8008ade <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	68db      	ldr	r3, [r3, #12]
 8008ad0:	2b02      	cmp	r3, #2
 8008ad2:	d102      	bne.n	8008ada <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	73fb      	strb	r3, [r7, #15]
 8008ad8:	e001      	b.n	8008ade <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008ada:	f7f8 f915 	bl	8000d08 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ae4:	7bfa      	ldrb	r2, [r7, #15]
 8008ae6:	4611      	mov	r1, r2
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f7fe fcea 	bl	80074c2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008af4:	4618      	mov	r0, r3
 8008af6:	f7fe fc92 	bl	800741e <USBD_LL_Reset>
}
 8008afa:	bf00      	nop
 8008afc:	3710      	adds	r7, #16
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
	...

08008b04 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b12:	4618      	mov	r0, r3
 8008b14:	f7fe fce5 	bl	80074e2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	6812      	ldr	r2, [r2, #0]
 8008b26:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008b2a:	f043 0301 	orr.w	r3, r3, #1
 8008b2e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6a1b      	ldr	r3, [r3, #32]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d005      	beq.n	8008b44 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b38:	4b04      	ldr	r3, [pc, #16]	; (8008b4c <HAL_PCD_SuspendCallback+0x48>)
 8008b3a:	691b      	ldr	r3, [r3, #16]
 8008b3c:	4a03      	ldr	r2, [pc, #12]	; (8008b4c <HAL_PCD_SuspendCallback+0x48>)
 8008b3e:	f043 0306 	orr.w	r3, r3, #6
 8008b42:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008b44:	bf00      	nop
 8008b46:	3708      	adds	r7, #8
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}
 8008b4c:	e000ed00 	.word	0xe000ed00

08008b50 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f7fe fcd5 	bl	800750e <USBD_LL_Resume>
}
 8008b64:	bf00      	nop
 8008b66:	3708      	adds	r7, #8
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b082      	sub	sp, #8
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	460b      	mov	r3, r1
 8008b76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b7e:	78fa      	ldrb	r2, [r7, #3]
 8008b80:	4611      	mov	r1, r2
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7fe fd2d 	bl	80075e2 <USBD_LL_IsoOUTIncomplete>
}
 8008b88:	bf00      	nop
 8008b8a:	3708      	adds	r7, #8
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b082      	sub	sp, #8
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	460b      	mov	r3, r1
 8008b9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ba2:	78fa      	ldrb	r2, [r7, #3]
 8008ba4:	4611      	mov	r1, r2
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f7fe fce9 	bl	800757e <USBD_LL_IsoINIncomplete>
}
 8008bac:	bf00      	nop
 8008bae:	3708      	adds	r7, #8
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b082      	sub	sp, #8
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7fe fd3f 	bl	8007646 <USBD_LL_DevConnected>
}
 8008bc8:	bf00      	nop
 8008bca:	3708      	adds	r7, #8
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7fe fd3c 	bl	800765c <USBD_LL_DevDisconnected>
}
 8008be4:	bf00      	nop
 8008be6:	3708      	adds	r7, #8
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}

08008bec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b082      	sub	sp, #8
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d13c      	bne.n	8008c76 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008bfc:	4a20      	ldr	r2, [pc, #128]	; (8008c80 <USBD_LL_Init+0x94>)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	4a1e      	ldr	r2, [pc, #120]	; (8008c80 <USBD_LL_Init+0x94>)
 8008c08:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008c0c:	4b1c      	ldr	r3, [pc, #112]	; (8008c80 <USBD_LL_Init+0x94>)
 8008c0e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008c12:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008c14:	4b1a      	ldr	r3, [pc, #104]	; (8008c80 <USBD_LL_Init+0x94>)
 8008c16:	2204      	movs	r2, #4
 8008c18:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008c1a:	4b19      	ldr	r3, [pc, #100]	; (8008c80 <USBD_LL_Init+0x94>)
 8008c1c:	2202      	movs	r2, #2
 8008c1e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008c20:	4b17      	ldr	r3, [pc, #92]	; (8008c80 <USBD_LL_Init+0x94>)
 8008c22:	2200      	movs	r2, #0
 8008c24:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008c26:	4b16      	ldr	r3, [pc, #88]	; (8008c80 <USBD_LL_Init+0x94>)
 8008c28:	2202      	movs	r2, #2
 8008c2a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008c2c:	4b14      	ldr	r3, [pc, #80]	; (8008c80 <USBD_LL_Init+0x94>)
 8008c2e:	2200      	movs	r2, #0
 8008c30:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008c32:	4b13      	ldr	r3, [pc, #76]	; (8008c80 <USBD_LL_Init+0x94>)
 8008c34:	2200      	movs	r2, #0
 8008c36:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008c38:	4b11      	ldr	r3, [pc, #68]	; (8008c80 <USBD_LL_Init+0x94>)
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008c3e:	4b10      	ldr	r3, [pc, #64]	; (8008c80 <USBD_LL_Init+0x94>)
 8008c40:	2200      	movs	r2, #0
 8008c42:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008c44:	4b0e      	ldr	r3, [pc, #56]	; (8008c80 <USBD_LL_Init+0x94>)
 8008c46:	2200      	movs	r2, #0
 8008c48:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008c4a:	480d      	ldr	r0, [pc, #52]	; (8008c80 <USBD_LL_Init+0x94>)
 8008c4c:	f7f9 fc04 	bl	8002458 <HAL_PCD_Init>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d001      	beq.n	8008c5a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008c56:	f7f8 f857 	bl	8000d08 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008c5a:	2180      	movs	r1, #128	; 0x80
 8008c5c:	4808      	ldr	r0, [pc, #32]	; (8008c80 <USBD_LL_Init+0x94>)
 8008c5e:	f7fa fe5c 	bl	800391a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008c62:	2240      	movs	r2, #64	; 0x40
 8008c64:	2100      	movs	r1, #0
 8008c66:	4806      	ldr	r0, [pc, #24]	; (8008c80 <USBD_LL_Init+0x94>)
 8008c68:	f7fa fe10 	bl	800388c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008c6c:	2280      	movs	r2, #128	; 0x80
 8008c6e:	2101      	movs	r1, #1
 8008c70:	4803      	ldr	r0, [pc, #12]	; (8008c80 <USBD_LL_Init+0x94>)
 8008c72:	f7fa fe0b 	bl	800388c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008c76:	2300      	movs	r3, #0
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3708      	adds	r7, #8
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}
 8008c80:	200018c8 	.word	0x200018c8

08008c84 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c90:	2300      	movs	r3, #0
 8008c92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f7f9 fcf9 	bl	8002692 <HAL_PCD_Start>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ca4:	7bfb      	ldrb	r3, [r7, #15]
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f000 f942 	bl	8008f30 <USBD_Get_USB_Status>
 8008cac:	4603      	mov	r3, r0
 8008cae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3710      	adds	r7, #16
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b084      	sub	sp, #16
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
 8008cc2:	4608      	mov	r0, r1
 8008cc4:	4611      	mov	r1, r2
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	4603      	mov	r3, r0
 8008cca:	70fb      	strb	r3, [r7, #3]
 8008ccc:	460b      	mov	r3, r1
 8008cce:	70bb      	strb	r3, [r7, #2]
 8008cd0:	4613      	mov	r3, r2
 8008cd2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008ce2:	78bb      	ldrb	r3, [r7, #2]
 8008ce4:	883a      	ldrh	r2, [r7, #0]
 8008ce6:	78f9      	ldrb	r1, [r7, #3]
 8008ce8:	f7fa f9ca 	bl	8003080 <HAL_PCD_EP_Open>
 8008cec:	4603      	mov	r3, r0
 8008cee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cf0:	7bfb      	ldrb	r3, [r7, #15]
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f000 f91c 	bl	8008f30 <USBD_Get_USB_Status>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cfc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}

08008d06 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d06:	b580      	push	{r7, lr}
 8008d08:	b084      	sub	sp, #16
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
 8008d0e:	460b      	mov	r3, r1
 8008d10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d12:	2300      	movs	r3, #0
 8008d14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d16:	2300      	movs	r3, #0
 8008d18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d20:	78fa      	ldrb	r2, [r7, #3]
 8008d22:	4611      	mov	r1, r2
 8008d24:	4618      	mov	r0, r3
 8008d26:	f7fa fa13 	bl	8003150 <HAL_PCD_EP_Close>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d2e:	7bfb      	ldrb	r3, [r7, #15]
 8008d30:	4618      	mov	r0, r3
 8008d32:	f000 f8fd 	bl	8008f30 <USBD_Get_USB_Status>
 8008d36:	4603      	mov	r3, r0
 8008d38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3710      	adds	r7, #16
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b084      	sub	sp, #16
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d50:	2300      	movs	r3, #0
 8008d52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d54:	2300      	movs	r3, #0
 8008d56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d5e:	78fa      	ldrb	r2, [r7, #3]
 8008d60:	4611      	mov	r1, r2
 8008d62:	4618      	mov	r0, r3
 8008d64:	f7fa faeb 	bl	800333e <HAL_PCD_EP_SetStall>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d6c:	7bfb      	ldrb	r3, [r7, #15]
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f000 f8de 	bl	8008f30 <USBD_Get_USB_Status>
 8008d74:	4603      	mov	r3, r0
 8008d76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d78:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3710      	adds	r7, #16
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}

08008d82 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d82:	b580      	push	{r7, lr}
 8008d84:	b084      	sub	sp, #16
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6078      	str	r0, [r7, #4]
 8008d8a:	460b      	mov	r3, r1
 8008d8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d92:	2300      	movs	r3, #0
 8008d94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d9c:	78fa      	ldrb	r2, [r7, #3]
 8008d9e:	4611      	mov	r1, r2
 8008da0:	4618      	mov	r0, r3
 8008da2:	f7fa fb30 	bl	8003406 <HAL_PCD_EP_ClrStall>
 8008da6:	4603      	mov	r3, r0
 8008da8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008daa:	7bfb      	ldrb	r3, [r7, #15]
 8008dac:	4618      	mov	r0, r3
 8008dae:	f000 f8bf 	bl	8008f30 <USBD_Get_USB_Status>
 8008db2:	4603      	mov	r3, r0
 8008db4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008db6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3710      	adds	r7, #16
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b085      	sub	sp, #20
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	460b      	mov	r3, r1
 8008dca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008dd2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008dd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	da0b      	bge.n	8008df4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008ddc:	78fb      	ldrb	r3, [r7, #3]
 8008dde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008de2:	68f9      	ldr	r1, [r7, #12]
 8008de4:	4613      	mov	r3, r2
 8008de6:	00db      	lsls	r3, r3, #3
 8008de8:	4413      	add	r3, r2
 8008dea:	009b      	lsls	r3, r3, #2
 8008dec:	440b      	add	r3, r1
 8008dee:	333e      	adds	r3, #62	; 0x3e
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	e00b      	b.n	8008e0c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008df4:	78fb      	ldrb	r3, [r7, #3]
 8008df6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008dfa:	68f9      	ldr	r1, [r7, #12]
 8008dfc:	4613      	mov	r3, r2
 8008dfe:	00db      	lsls	r3, r3, #3
 8008e00:	4413      	add	r3, r2
 8008e02:	009b      	lsls	r3, r3, #2
 8008e04:	440b      	add	r3, r1
 8008e06:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008e0a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3714      	adds	r7, #20
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr

08008e18 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
 8008e20:	460b      	mov	r3, r1
 8008e22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e24:	2300      	movs	r3, #0
 8008e26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e32:	78fa      	ldrb	r2, [r7, #3]
 8008e34:	4611      	mov	r1, r2
 8008e36:	4618      	mov	r0, r3
 8008e38:	f7fa f8fd 	bl	8003036 <HAL_PCD_SetAddress>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e40:	7bfb      	ldrb	r3, [r7, #15]
 8008e42:	4618      	mov	r0, r3
 8008e44:	f000 f874 	bl	8008f30 <USBD_Get_USB_Status>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3710      	adds	r7, #16
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}

08008e56 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e56:	b580      	push	{r7, lr}
 8008e58:	b086      	sub	sp, #24
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	60f8      	str	r0, [r7, #12]
 8008e5e:	607a      	str	r2, [r7, #4]
 8008e60:	603b      	str	r3, [r7, #0]
 8008e62:	460b      	mov	r3, r1
 8008e64:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e66:	2300      	movs	r3, #0
 8008e68:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008e74:	7af9      	ldrb	r1, [r7, #11]
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	f7fa fa16 	bl	80032aa <HAL_PCD_EP_Transmit>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e82:	7dfb      	ldrb	r3, [r7, #23]
 8008e84:	4618      	mov	r0, r3
 8008e86:	f000 f853 	bl	8008f30 <USBD_Get_USB_Status>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e8e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3718      	adds	r7, #24
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b086      	sub	sp, #24
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	607a      	str	r2, [r7, #4]
 8008ea2:	603b      	str	r3, [r7, #0]
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008eac:	2300      	movs	r3, #0
 8008eae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008eb6:	7af9      	ldrb	r1, [r7, #11]
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	687a      	ldr	r2, [r7, #4]
 8008ebc:	f7fa f992 	bl	80031e4 <HAL_PCD_EP_Receive>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ec4:	7dfb      	ldrb	r3, [r7, #23]
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f000 f832 	bl	8008f30 <USBD_Get_USB_Status>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008ed0:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3718      	adds	r7, #24
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}

08008eda <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008eda:	b580      	push	{r7, lr}
 8008edc:	b082      	sub	sp, #8
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
 8008ee2:	460b      	mov	r3, r1
 8008ee4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008eec:	78fa      	ldrb	r2, [r7, #3]
 8008eee:	4611      	mov	r1, r2
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f7fa f9c2 	bl	800327a <HAL_PCD_EP_GetRxCount>
 8008ef6:	4603      	mov	r3, r0
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3708      	adds	r7, #8
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008f08:	4b03      	ldr	r3, [pc, #12]	; (8008f18 <USBD_static_malloc+0x18>)
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	370c      	adds	r7, #12
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr
 8008f16:	bf00      	nop
 8008f18:	20001dd4 	.word	0x20001dd4

08008f1c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]

}
 8008f24:	bf00      	nop
 8008f26:	370c      	adds	r7, #12
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr

08008f30 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b085      	sub	sp, #20
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	4603      	mov	r3, r0
 8008f38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008f3e:	79fb      	ldrb	r3, [r7, #7]
 8008f40:	2b03      	cmp	r3, #3
 8008f42:	d817      	bhi.n	8008f74 <USBD_Get_USB_Status+0x44>
 8008f44:	a201      	add	r2, pc, #4	; (adr r2, 8008f4c <USBD_Get_USB_Status+0x1c>)
 8008f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f4a:	bf00      	nop
 8008f4c:	08008f5d 	.word	0x08008f5d
 8008f50:	08008f63 	.word	0x08008f63
 8008f54:	08008f69 	.word	0x08008f69
 8008f58:	08008f6f 	.word	0x08008f6f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	73fb      	strb	r3, [r7, #15]
    break;
 8008f60:	e00b      	b.n	8008f7a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008f62:	2303      	movs	r3, #3
 8008f64:	73fb      	strb	r3, [r7, #15]
    break;
 8008f66:	e008      	b.n	8008f7a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	73fb      	strb	r3, [r7, #15]
    break;
 8008f6c:	e005      	b.n	8008f7a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008f6e:	2303      	movs	r3, #3
 8008f70:	73fb      	strb	r3, [r7, #15]
    break;
 8008f72:	e002      	b.n	8008f7a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008f74:	2303      	movs	r3, #3
 8008f76:	73fb      	strb	r3, [r7, #15]
    break;
 8008f78:	bf00      	nop
  }
  return usb_status;
 8008f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3714      	adds	r7, #20
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr

08008f88 <__libc_init_array>:
 8008f88:	b570      	push	{r4, r5, r6, lr}
 8008f8a:	4d0d      	ldr	r5, [pc, #52]	; (8008fc0 <__libc_init_array+0x38>)
 8008f8c:	4c0d      	ldr	r4, [pc, #52]	; (8008fc4 <__libc_init_array+0x3c>)
 8008f8e:	1b64      	subs	r4, r4, r5
 8008f90:	10a4      	asrs	r4, r4, #2
 8008f92:	2600      	movs	r6, #0
 8008f94:	42a6      	cmp	r6, r4
 8008f96:	d109      	bne.n	8008fac <__libc_init_array+0x24>
 8008f98:	4d0b      	ldr	r5, [pc, #44]	; (8008fc8 <__libc_init_array+0x40>)
 8008f9a:	4c0c      	ldr	r4, [pc, #48]	; (8008fcc <__libc_init_array+0x44>)
 8008f9c:	f000 f828 	bl	8008ff0 <_init>
 8008fa0:	1b64      	subs	r4, r4, r5
 8008fa2:	10a4      	asrs	r4, r4, #2
 8008fa4:	2600      	movs	r6, #0
 8008fa6:	42a6      	cmp	r6, r4
 8008fa8:	d105      	bne.n	8008fb6 <__libc_init_array+0x2e>
 8008faa:	bd70      	pop	{r4, r5, r6, pc}
 8008fac:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fb0:	4798      	blx	r3
 8008fb2:	3601      	adds	r6, #1
 8008fb4:	e7ee      	b.n	8008f94 <__libc_init_array+0xc>
 8008fb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fba:	4798      	blx	r3
 8008fbc:	3601      	adds	r6, #1
 8008fbe:	e7f2      	b.n	8008fa6 <__libc_init_array+0x1e>
 8008fc0:	080091e8 	.word	0x080091e8
 8008fc4:	080091e8 	.word	0x080091e8
 8008fc8:	080091e8 	.word	0x080091e8
 8008fcc:	080091ec 	.word	0x080091ec

08008fd0 <memset>:
 8008fd0:	4402      	add	r2, r0
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d100      	bne.n	8008fda <memset+0xa>
 8008fd8:	4770      	bx	lr
 8008fda:	f803 1b01 	strb.w	r1, [r3], #1
 8008fde:	e7f9      	b.n	8008fd4 <memset+0x4>

08008fe0 <strcpy>:
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008fe6:	f803 2b01 	strb.w	r2, [r3], #1
 8008fea:	2a00      	cmp	r2, #0
 8008fec:	d1f9      	bne.n	8008fe2 <strcpy+0x2>
 8008fee:	4770      	bx	lr

08008ff0 <_init>:
 8008ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ff2:	bf00      	nop
 8008ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ff6:	bc08      	pop	{r3}
 8008ff8:	469e      	mov	lr, r3
 8008ffa:	4770      	bx	lr

08008ffc <_fini>:
 8008ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ffe:	bf00      	nop
 8009000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009002:	bc08      	pop	{r3}
 8009004:	469e      	mov	lr, r3
 8009006:	4770      	bx	lr
